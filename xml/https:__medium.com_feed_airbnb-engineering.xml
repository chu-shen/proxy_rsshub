<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[The Airbnb Tech Blog - Medium]]></title>
        <description><![CDATA[Creative engineers and data scientists building a world where you can belong anywhere. http://airbnb.io - Medium]]></description>
        <link>https://medium.com/airbnb-engineering?source=rss----53c7c27702d5---4</link>
        <image>
            <url>https://cdn-images-1.medium.com/proxy/1*TGH72Nnw24QL3iV9IOm4VA.png</url>
            <title>The Airbnb Tech Blog - Medium</title>
            <link>https://medium.com/airbnb-engineering?source=rss----53c7c27702d5---4</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Thu, 17 Mar 2022 16:23:00 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/airbnb-engineering" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[Artificial Counterfactual Estimation (ACE): Machine Learning-Based Causal Inference at Airbnb]]></title>
            <link>https://medium.com/airbnb-engineering/artificial-counterfactual-estimation-ace-machine-learning-based-causal-inference-at-airbnb-ee32ee4d0512?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/ee32ee4d0512</guid>
            <category><![CDATA[machine-learning]]></category>
            <category><![CDATA[experimentation]]></category>
            <category><![CDATA[causality]]></category>
            <category><![CDATA[engineering]]></category>
            <category><![CDATA[causal-inference]]></category>
            <dc:creator><![CDATA[zhiying gu]]></dc:creator>
            <pubDate>Wed, 16 Mar 2022 19:34:04 GMT</pubDate>
            <atom:updated>2022-03-16T19:34:04.610Z</atom:updated>
            <content:encoded><![CDATA[<figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*EQ_C2aqZE91XHEJ4" /></figure><p><strong>By:</strong><a href="https://www.linkedin.com/in/zhiying-gu-2293a353/"><strong> Zhiying Gu</strong></a><strong>, </strong><a href="https://www.linkedin.com/in/qianrongwu/"><strong>Qianrong Wu</strong></a></p><h3>Summary</h3><p>What if you wanted to measure the impact of a change to your business, but it was not possible to run a randomized controlled experiment? That’s exactly the problem we faced when measuring the benefit of a new tool used by Airbnb operations to automate part of their workflow. Due to organizational constraints, it was simply not possible to randomly assign the tool to operations agents; even if we could make random assignments, the sample sizes were too small to generate sufficient statistical power. So what did we do? We imagined a parallel universe in which the operations agents who did not use the new tool were identical in all respects to those who did–in other words, a world in which the assignment criteria were as good as random. In this blog post, we explain this new methodology, called <strong>ACE (Artificial Counterfactual Estimation)</strong>, which leverages machine learning (ML) and causal inference to artificially reproduce the “counterfactual” scenario produced by random assignment. We’ll explain how this works in practice, why it is better than other methods such as matching and synthetic control, and how we overcame challenges associated with this method.</p><h3>The Non-Randomizable Operations Problem</h3><p>There are two key assumptions undergirding randomized controlled <a href="https://medium.com/airbnb-engineering/experiments-at-airbnb-e2db3abf39e7">experiments</a> (often referred to as “A/B tests”):</p><ol><li>The treatment and control groups are similar. When you have similar groups, outcomes are independent of group attributes such as age, gender, and location, meaning that any difference between the groups can be attributed to a treatment that was received by one group but not the other. In statistical terms, we assume that we have controlled all confounders, thereby reducing the bias of our estimates.</li><li>The sample sizes are sufficiently large. Large sample sizes serve to reduce the magnitude of chance differences between the two randomized groups, giving us confidence that the treatment has a true causal impact. In technical lingo, we assume that we have reduced the variance of our estimates enough to give us appropriate statistical power.</li></ol><p>Given the need for similar groups and large sample sizes when running A/B tests, any organization with operational teams presents challenges. To start, there are general concerns about unfairness and disruptive experience when running randomized experiments on operations agents. Second, the operational sites are located in different countries with varied amounts of employees, skill levels and so on so we cannot simply assign certain geographies to treatment and some to control without introducing apples-to-oranges comparison, which will lead to bias of the measurement. Finally, we have millions of customers but not millions of operations agents, so the sample size for this test is always going to be much smaller than that of other experiments.</p><h3>ACE to the Rescue</h3><p>With the ACE (<strong>Artificial Counterfactual Estimation)</strong>, we have the next best thing to a randomized experiment. The trick is to achieve <strong>bias reduction and variance reduction</strong> at the same time using a machine learning-based causal impact estimation technique.</p><p>Causal inference is a process of estimating the counterfactual outcome that would have occurred had the treated units not been treated. In our case, we want to know how productive our operations agents would have been, had they not used the new workflow automation tool. There are many ways to construct such a counterfactual outcome, but the most common methods are:</p><ul><li>Use the control group from a randomized controlled experiment (unfortunately, is often times not possible in our case)</li><li>Construct a group that is similar to the treated group using matching methods such as Propensity Score Matching (Weighting), <a href="https://gking.harvard.edu/files/political_analysis-2011-iacus-pan_mpr013.pdf">Coarsened Exact Matching</a>, or <a href="https://web.stanford.edu/~jhain/Paper/PA2012.pdf">Entropy Balancing</a></li><li>Construct the counterfactual outcome with time-series predictions (e.g., <a href="https://research.google/pubs/pub41854/">Causal Impact Model</a>)</li><li>Construct the counterfactual outcome as the weighted average of all non-treated units (<a href="https://economics.mit.edu/files/11859">Synthetic Control</a>, <a href="https://www.cambridge.org/core/journals/political-analysis/article/generalized-synthetic-control-method-causal-inference-with-interactive-fixed-effects-models/B63A8BD7C239DD4141C67DA10CD0E4F3">Generalized Synthetic Control</a>)</li></ul><p>We can construct the counterfactual outcome by ML prediction using both confounding and non-confounding factors as features. In a nutshell, we use a holdout group (i.e., the group not treated)) to train an ML model that predicts the counterfactual outcome being not treated in the post-treatment period. We then apply the trained model to the treated group <strong>for the same period. </strong>The<strong> </strong>predicted outcome serves as the counterfactual (new control) representing the imagined scenario in which the treatment group had not been treated in the post-treatment period<strong> </strong>(<em>Y’’</em><strong> </strong>in the equation below).</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/194/1*NKttYN8--2qKUiGFtU6b3w.png" /></figure><p><strong>In the equation above,<em> t </em>is the difference between the observed treatment group outcome </strong>(Y)<strong> and the predicted outcome </strong>(<em>Y’’</em>). It represents <strong>a <em>naive</em> estimate of the impact </strong>because it<strong> is <em>biased</em>. </strong>The following graph illustrates ACE at a high level. It has the following steps as illustrated in Figure 1:</p><ol><li>We train a machine learning model using data from a hold out group, i.e. a group without treatment.</li><li>We apply the trained model on the treatment group to obtain the predicted outcome had we not applied treatment on this group.</li><li>The difference between the actual and the predicted outcome for the treatment group is the estimated impact.</li></ol><p>We will flesh out the detailed challenges in a later section before its application.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1007/0*GymYMQAYRWRjpbf-" /><figcaption>Figure 1: Estimation Process</figcaption></figure><h3>Challenges of ACE, and Solutions</h3><p>There are two major challenges in developing ACE: bias estimation and construction of confidence intervals.</p><h3>Challenge 1: Bias estimation</h3><p>The predicted outcome <strong><em>Y’’</em> </strong>from the machine learning models is often biased for two reasons, causing the estimated causal impact <em>t</em> to also be biased (see <a href="https://academic.oup.com/ectj/article/21/1/C1/5056401">Chernozhukov et. al. (2018)</a>). The two reasons for bias are 1) regularization, and 2) overfitting.</p><p>The figure below shows the ML model prediction error on 100 synthetic A/A tests, for which the estimated impact should always be zero. Clearly, however, the distribution of estimates is not centered around zero. The average prediction error is actually 2%, meaning that the ML prediction <em>Y’’</em> is, on average, overestimated by 2%.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/492/0*AQMF97y43O2klwcr" /><figcaption>Figure 2: Prediction Bias</figcaption></figure><h3>Challenge 2: Construction of Confidence Intervals</h3><p>Unlike in a traditional t-test for A/B testing, there is no analytical solution for confidence intervals when we are doing ACE. As a result, we have to construct empirical confidence intervals for the estimates. To address these two challenges, we took an empirical approach to removing bias from the prediction and then constructed our confidence intervals based on that same empirical approach.</p><p>In ACE, we use A/A tests both for debiasing and for constructing confidence Intervals.</p><h3>Solution to Challenge 1: Debias</h3><p>One natural idea is that if we can confidently estimate the magnitude of the bias, we can simply adjust the prediction by the estimated bias. The estimation then becomes:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/408/1*tf49yKKBFKPqxqyxkTa4EA.png" /></figure><p>Practitioners can freely choose any machine learning models to use — <em>f(X) </em>— for the prediction of <em>Y’’.</em> Figure 2 shows a 2% bias for 100 A/A samples. The question is: can we say the true bias is 2%? If we can verify that the bias is systematically 2% (i.e., consistent across different A/A samples during the same periods and repeatable across different time periods), we can say bias = 2%. Figure 3 shows the repeatability of the bias estimation over time. The estimates are always biased upwards and the average estimates of bias are around 2%. Figure 4 shows the average prediction error after removing the bias (2%). With bias correction, the distribution of estimated impact is centered around zero.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*3VxewhXE-I6q6e3B" /><figcaption>Figure 3: the stability of bias estimation</figcaption></figure><figure><img alt="" src="https://cdn-images-1.medium.com/max/846/0*BIyfw_s9Jo80_zya" /><figcaption>Figure 4: Distribution of impact estimates based on A/A after bias correction</figcaption></figure><h3>Solution to Challenge 2: Construct Empirical Confidence Intervals</h3><p>We can use data from A/A tests to construct empirical confidence intervals and p-values.</p><ul><li>Empirical confidence interval: to be more specific, the 95% confidence interval is constructed by looking at the distribution of 100 bootstrapped A/A samples. Given that we know the true differences of A/A tests are 0, and if 5% of estimated impacts from 100 A/A tests are outside [-0.2, 0.2] range, then we know the 95% confidence interval is [-0.2, 0.2].</li><li>Empirical p-value: we can estimate Type I error via A/A tests estimated from ML models as follows. Suppose we estimated a 3% of the impact for the treatment. P-value is to estimate the probability of obtaining an estimate that is outside [-3%, 3%] when the null hypothesis is true — there is no impact. This probably is estimated with the empirical distribution of iterative A/A tests. If the probability is 1%, we will conclude that we have at least 98% (i.e 100% — (1%*2)) confidence that the alternative hypothesis — the impact is not zero — is true.</li></ul><h3>Validation</h3><p>To validate if ACE can accurately measure the impact, we further ACE to the data from a large scale randomized A/B data and compared ACE results with the A/B tests results. The result from the A/B test is considered as ground truth for validation because A/B testing is the gold standard for measurement. The results are nearly identical.</p><h3>Advantages of ACE</h3><p>There are several advantages of ACE over other estimation methods:</p><ul><li>It is flexible in the choice of estimation model. We can freely choose any cutting-edge ML models to achieve desired level of accuracy, based on various use cases and data properties..</li><li>Its validity and accuracy can be easily assessed during the design phase of the measurement plan by conducting A/A tests.</li><li>It can be applied on both experimental data for variance reduction and on non-experimental data for bias correction as well as for variance reduction.</li><li>For experimental data:<br>- It is less prone to biases compared to regression adjustments. <br>- It has more power compared to stratification when the ML model has a good performance. <br>- It estimates the magnitude of the impacts instead of only the existence of the impacts compared to rank tests.</li></ul><p>You’ll recall that we applied ACE to estimate the incremental benefit of a tool that helps operations agents to automate part of their workflow. We generated p-values for three different measurement methodologies: (1) classic t-test; (2) <a href="https://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test">non-parametric rank test</a> and (3) ACE non-parametric test based on the empirical confidence interval we described in the previous section. The following is a performance comparison for t-test, rank test, and ML-based methods for the same sample size, in particular, when sample size is small when we try to conduct inference with classic t-test as we do in A/B testing.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*EnfVbOcLKkcDHoEa" /></figure><h3>Recap</h3><p>In this blog post, we explained how one can leverage ML for counterfactual prediction, using an estimation problem for the efficacy of an agent tool as our motivating example.</p><p>Combining statistical inference and machine learning methods is a powerful approach when it’s not possible to run an A/B test. However, as we have seen, it can be dangerous to apply ML methodologies if intrinsic model bias is not addressed.. This post outlined a practical and reliable way to correct for this intrinsic bias, while minimizing Type I error relative to competing methods.</p><p>Currently, we are working to turn our code template into an easy-to-use Python package that will be accessible to all data scientists within the company.</p><p>If this type of work interests you, check out some of our related positions!</p><p><a href="https://careers.airbnb.com/positions/3859241/">Senior Data Scientist — Payments</a></p><h3>Acknowledgments</h3><p>Thanks to Alex Deng and Lo-hua Yuan for providing feedback on the development of ACE and spending time reviewing the work. We would also like to thank Airbnb Experiment Review Committee Members for feedback and comments. Last but not least, we really appreciate Joy Zhang and Nathan Triplett for their guidance, and feedback and support from Tina Su, Raj Rajagopal and Andy Yasutake.</p><h3>References</h3><ul><li>Stefano M. Iacus, King, Gary, Giuseppe Porro, 2017. <a href="https://gking.harvard.edu/files/political_analysis-2011-iacus-pan_mpr013.pdf">Causal Inference without Balance Checking: Coarsened Exact Matching</a>, <em>Political Analysis.</em></li><li>Jens Hainmueller, 2012, <a href="https://web.stanford.edu/~jhain/Paper/PA2012.pdf">Entropy Balancing for Causal Effects: A Multivariate Reweighting Method to Produce Balanced Samples in Observational Studies</a>, <em>Political Analysis.</em></li><li><a href="https://research.google/people/KayBrodersen/">Kay H. Brodersen</a>, Fabian Gallusser, Jim Koehler, <a href="https://research.google/people/NicolasRemy/">Nicolas Remy</a>, Steven L. Scott, 2015. <a href="https://research.google/pubs/pub41854/">Inferring causal impact using Bayesian structural time-series models</a>, <em>Annals of Applied Statistics</em>.</li><li>Alberto Abadie, Alexis Diamond, and Jens Hainmueller, 2010. <a href="https://economics.mit.edu/files/11859">Synthetic Control Methods for Comparative Case Studies: Estimating the Effect of California’s Tobacco Control Program</a>, <em>Journal of the American Statistical Association.</em></li><li>Yiqing Xu, 2017.<a href="https://www.cambridge.org/core/journals/political-analysis/article/generalized-synthetic-control-method-causal-inference-with-interactive-fixed-effects-models/B63A8BD7C239DD4141C67DA10CD0E4F3">Generalized Synthetic Control Method: Causal Inference with Interactive Fixed Effects Models</a>, <em>Political Analysis.</em></li><li>Victor Chernozhukov, Denis Chetverikov, Mert Demirer, Esther Duflo, Christian Hansen, Whitney Newey, James Robins, 2018. <a href="https://academic.oup.com/ectj/article/21/1/C1/5056401">Double/debiased machine learning for treatment and structural parameters</a>,<em> The Econometrics Journal.</em></li></ul><h3>Further Reading on Similar Topic</h3><ul><li><a href="https://medium.com/airbnb-engineering/how-airbnb-measures-future-value-to-standardize-tradeoffs-3aa99a941ba5">How Airbnb Measures Future Value to Standardize Tradeoff</a></li></ul><h3>****************</h3><p><em>All product names, logos, and brands are property of their respective owners. All company, product and service names used in this website are for identification purposes only. Use of these names, logos, and brands does not imply endorsement.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=ee32ee4d0512" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/artificial-counterfactual-estimation-ace-machine-learning-based-causal-inference-at-airbnb-ee32ee4d0512">Artificial Counterfactual Estimation (ACE): Machine Learning-Based Causal Inference at Airbnb</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Rebuilding Payment Orchestration at Airbnb]]></title>
            <link>https://medium.com/airbnb-engineering/rebuilding-payment-orchestration-at-airbnb-341d194a781b?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/341d194a781b</guid>
            <category><![CDATA[technology]]></category>
            <category><![CDATA[tech]]></category>
            <category><![CDATA[payments]]></category>
            <category><![CDATA[engineering]]></category>
            <category><![CDATA[infrastructure]]></category>
            <dc:creator><![CDATA[Bryon Ross]]></dc:creator>
            <pubDate>Thu, 24 Feb 2022 19:47:55 GMT</pubDate>
            <atom:updated>2022-02-24T19:48:41.588Z</atom:updated>
            <content:encoded><![CDATA[<h4>How we maintained reliable money movement while migrating Airbnb’s payment orchestration system from the legacy monolithic application to a service-oriented architecture</h4><p><strong>By:</strong> <a href="https://www.linkedin.com/in/bryon-ross/">Bryon Ross</a>, <a href="https://www.linkedin.com/in/feifeng-yang-339b8b33/">Feifeng Yang</a>, <a href="https://www.linkedin.com/in/sophie-behr-6874b734/">Sophie Behr</a>, <a href="https://www.linkedin.com/in/johnsont/">Theresa Johnson</a>, <a href="https://www.linkedin.com/in/xin-lin-39527b58/">Xin Lin</a>, <a href="https://www.linkedin.com/in/yunjincho/">Yun Jin Cho</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*xkVmheTk8AghzmfFEJuIKg.jpeg" /></figure><h3>Introduction</h3><p>Airbnb’s payment orchestration system is responsible for ensuring reliable money movement between hosts, guests, and Airbnb. In short, guests should be charged the right amount at the right time using their selected payment methods; hosts should be paid the right amount at the right time to their desired payout methods. For historical reasons, Airbnb’s billing data, payment APIs, payment orchestration, and user experiences were tightly coupled with the concept of a reservation for a stay. Unfortunately, this meant that a payment-related feature for stays had to be rebuilt for other products — for example, Airbnb Experiences — and each implementation may have its own product-specific quirks. As you can imagine, this approach is neither scalable nor easy to maintain.</p><p>For several years, Airbnb has been migrating away from our monolithic Ruby on Rails application toward a service-oriented architecture (SOA). This migration has been discussed extensively in several Airbnb <a href="https://medium.com/airbnb-engineering/building-services-at-airbnb-part-1-c4c1d8fa811b">tech</a> <a href="https://medium.com/airbnb-engineering/building-services-at-airbnb-part-2-142be1c5d506">blog</a> <a href="https://medium.com/airbnb-engineering/building-services-at-airbnb-part-3-ac6d4972fc2d">posts</a>. We will gloss over some of the technical discussions common to those migrations and instead focus on some of the aspects that were unique to migrating our payments systems. While many teams at Airbnb chose to create a one-to-one replacement when migrating to SOA, the payments organization instead decided to use it as an opportunity to fundamentally redesign our services to provide a sound technical foundation for future growth. As a consequence of this decision, the migration process took longer to complete than a more straightforward one-to-one replacement.</p><h3>Why Redesign?</h3><iframe src="https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FMssx8PleeYc%3Ffeature%3Doembed&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DMssx8PleeYc&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FMssx8PleeYc%2Fhqdefault.jpg&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=youtube" width="854" height="480" frameborder="0" scrolling="no"><a href="https://medium.com/media/20c047e574ac84523c61f08a3e5c51b0/href">https://medium.com/media/20c047e574ac84523c61f08a3e5c51b0/href</a></iframe><p>As Brian shared in the video above, support for on-platform payments has played a critical role in establishing trust among Airbnb’s hosts and guests. Airbnb has grown significantly since our first payment system was created over a decade ago and, with that growth, the scope and scale of payments at Airbnb have also grown and changed. Many of the original payment models were tied closely to reservations for a stay. This made sense in the early days of Airbnb as there was only one product, and the engineers working on payments at that time did an excellent job developing a solution that solved the needs of guests and hosts. While these original models used for payments have proven extremely versatile and powerful, this tight coupling between stays and payments has led to increased complexity when adding new products like Experiences or features like the Resolution Center.</p><p>When planning for the SOA migration, Airbnb’s payments teams made a bold decision to fundamentally redesign the payments system. Our goal was to create a payment platform that would allow teams across Airbnb to quickly, easily, and safely integrate new features and products with payments. It’s not feasible to list all of the enhancements in a single blog post, so this post will focus on some design highlights affecting the new payment orchestration system: idempotency, platformization, and data immutability.</p><h4>Idempotent Orchestration</h4><p>As discussed in an <a href="https://medium.com/airbnb-engineering/avoiding-double-payments-in-a-distributed-payments-system-2981f6b070bb">earlier blog post</a>, idempotency is a common technique to maintain consistency among distributed services. The new payment orchestration system was designed around Orpheus (the idempotency framework described in that post). Every major workflow is divided into a directed acyclic graph (DAG) of retryable idempotent steps, each with well-defined behavior. This allows the payment orchestration layer to maintain eventual consistency with other key services (such as the payment gateway layer and product fulfillment services). This approach has led to five 9s (99.999%) of consistency for payments.</p><p>The idempotency framework works well for both synchronous and asynchronous communication between services. For asynchronous communication, payments services primarily use a Kafka-based message bus to send “events” to one another. Event processors use the idempotency framework to enhance the at-least-once guarantee of Kafka into an exactly-once guarantee. The transactional integrity analysis tools described in <a href="https://medium.com/airbnb-engineering/measuring-transactional-integrity-in-airbnbs-distributed-payment-ecosystem-a670d6926d22">this post</a> provide an additional layer of confidence by ensuring consistency between events and transactional data sources.</p><h4>Product-Agnostic Platform</h4><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*wXTahHCWmRKVpdsQeFwa3w.png" /><figcaption>The payments SOA migration decoupled product fulfillment, payment orchestration, and pricing</figcaption></figure><p>A significant disadvantage of our legacy payment data models is that they were closely tied to a single product, reservations for stays. For this reason, our new payment orchestration service was intentionally architected to avoid tightly coupling the payments system to any particular product. Instead, the new orchestration layer was designed around generic payment-specific workflows (e.g., validation, payment processing, financial reporting) with payment-specific logic and product-specific logic isolated from one another, with the exception of a few well-defined integration points. When combined with the generic billing and pricing APIs described in <a href="https://medium.com/airbnb-engineering/scaling-airbnbs-payment-platform-43ebfc99b324">this blog post</a>, this approach allows new products to integrate quickly and easily with existing generic payment flows, drastically reducing both engineering effort and time to delivery. Additionally, as new features are added to the payment systems, these features can be easily adopted by other products.</p><h4>Data Immutability</h4><p>Immutable data is easier to understand, audit, and reconcile. All of the new payment services were built around the idea of data immutability. For payment orchestration, data immutability manifests in two major forms: persistent events and versioning. Events are naturally append-only. It is the responsibility of the event consumer to determine if a new event represents a modification to an existing event. When an existing product is altered (e.g., adding another night to a stay), the modifications to the payment orchestration plan are modeled as a new version in a sequence of plans for that product. The combined information from all the versions provides a complete history of the intended and actual money movement related to that product.</p><h3>A Phased Migration</h3><p>Various teams at Airbnb took different approaches to the migration towards a service-oriented architecture (SOA). Many teams chose to migrate functionality in small blocks, replacing the legacy implementation with an equivalent SOA one. Generally, with this approach, the existing system would be broken down into discrete, cohesive, functional blocks. Each block could be migrated mostly independently of the others. The behavior of each block would be well defined and the result could be trivially compared across both systems to ensure consistent results.</p><p>The Airbnb payments organization took a different approach for the migration of the various payments systems. Instead of small functional blocks, the migration for the payments systems was broken down into four major phases: Pricing, Payouts, Bookings, and Data Migration. The Pricing phase remodeled each of the product-specific pricing models into a generic model that could be used across all Airbnb products. The Payouts and Bookings phases fundamentally redesigned the way that money movement is orchestrated at Airbnb to more easily support new products, features, and business needs. The majority of the work related to payment orchestration was contained within these phases. The Data Migration phase migrated existing bookings from the legacy system to SOA, allowing the legacy system to be wound down and deprecated.</p><p>Within each phase, the migration was divided into smaller migrations, usually by feature or product. For example, in the Bookings phase, bookings for stays were migrated independently from bookings for experiences. When reasonable, those subphases were further broken down as well. The migration of bookings for stays was subdivided into over 30 milestones based on characteristics of the bookings. The relatively small scope of each milestone allowed engineers and data scientists to thoroughly test and validate each set of migrations. Additionally, the relatively independent nature of each milestone allowed many of them to be completed in parallel.</p><h3>Maintaining Two Systems</h3><p>The new payment orchestration system introduced a fundamentally redesigned data model based around the concept of a bill. Unlike the legacy model, the new data model is not tied to any specific product, but rather focuses on being sufficiently powerful, extensible, and generic to be useful for existing and future Airbnb products. One important consequence of fundamentally redesigning the payment data model was that it became non-trivial to convert from one data model to another.</p><p>In general, historical bookings and payouts were not moved from one system to another as part of the initial migration process. Rather, new bookings and payouts would be routed to SOA if they were deemed eligible. Otherwise, they would continue to be routed to the legacy system. Throughout most of the migration process, existing bookings would continue to proceed through their lifecycle in the legacy monolithic system. Only at the tail end of the migration were active bookings transitioned from the legacy system to SOA. As a result, engineering teams needed to maintain two parallel payment orchestration systems throughout virtually the entire migration process.</p><p>Most consumers of payments data don’t actually care whether the data is stored in the legacy or SOA system; they just want the data. In order to provide an easy and consistent experience for those client services, a new transformation layer was built to transparently retrieve data from the correct underlying source and to seamlessly convert them into a unified data model that could be consumed by all clients. The translation layer proved incredibly valuable as it decoupled the work of the teams working on the migration from the work of the client teams.</p><p>Nothing happens in a vacuum. While the migration was in progress, business needs arose and features had to be added to the payment orchestration system. For each feature, teams had to decide whether the changes should be implemented in only one system or in both. In many cases, this led to twice as much work in order to maintain a consistent user experience across both systems. In other cases, features were simply deferred or redesigned to avoid duplication of effort.</p><p>Finally, special care had to be taken to ensure that both systems behaved in the way that our guests and hosts expected. Ideally, guests and hosts wouldn’t even notice the difference apart from some improvements in performance. Additional tooling and workflows were created to ensure that Airbnb’s support ambassadors continued to provide a consistent experience for our guests and hosts regardless of which system was used to orchestrate payments.</p><p>One key learning from this experience was how critical it is to communicate with all stakeholders to ensure that everyone is aligned on timelines, constraints, and priorities. Maintaining two parallel systems over an extended period of time creates a lot of overhead and slows down iteration speeds for new features. It is vital to ensure that the broader organization is aligned on the timeline so that product teams aren’t unnecessarily slowed down by unexpected work related to a partially migrated system. Splitting the migration into phases helps reduce the time during which teams are impacted.</p><h3>Commitment to Craft</h3><p>Perhaps the most important part of the migration process was ensuring that the new system was built with Airbnb’s <a href="https://medium.com/airbnb-engineering/commitment-to-craft-e36d5a8efe2a">Commitment to Craft</a> in mind and thoroughly validated before being rolled out. A dedicated team of quality assurance engineers performed comprehensive manual testing of hundreds of scenarios to help to ensure consistency with the legacy system across a wide spectrum of use cases. In addition, an extensive set of unit tests, shallow integration tests, and end-to-end integration tests were created across the entire payments engineering organization to ensure the correct behavior of key payment flows. As an additional safeguard, whenever possible, asynchronous “matchup” jobs would compare the new data model and the old data model to validate that both codepaths produced consistent results.</p><h3>Conclusion</h3><p>Payments systems are complex. Taking the time to thoughtfully redesign the system can lead to improvements in maintainability, extensibility, performance, and resiliency. However, there are also noteworthy disadvantages to a long-lived migration process. The process can lead to uncertainty among clients of the service and consume resources that might otherwise be spent creating new features or optimizing existing flows. It is possible to mitigate some of these concerns by dividing the migration into smaller, well-defined milestones and ensuring regular communication with stakeholders. A thorough testing and validation plan is vital for ensuring that the new service can seamlessly replace legacy systems. By following this approach, we were able to launch a new payment orchestration system that is faster, easier to maintain, and can more easily support new products, features, and business needs.</p><p>Watch the recording of the <a href="https://www.facebook.com/AirbnbTech/videos/airbnb-tech-talk-make-money-moves/349403395953262/">Make Money Moves tech talk</a> for a more in-depth discussion of the migration of payments services to SOA.</p><p>If this type of work interests you, check out some of our related positions:</p><p><a href="https://careers.airbnb.com/positions/3393082/?gh_src=5a0351831us">Senior Software Engineer, Payments</a> (San Francisco or Seattle)</p><p><a href="https://careers.airbnb.com/positions/3393185/?gh_src=3eaf43fe1us">Staff Software Engineer, Payments</a> (San Francisco or Seattle)</p><p><a href="https://careers.airbnb.com/positions/2768475/">Manager, Engineering Payments Compliance</a> (Bangalore, India)</p><p><a href="https://careers.airbnb.com/positions/2925359/">Senior Software Engineer, Payments Compliance</a> (Bangalore, India)</p><p><a href="https://careers.airbnb.com/positions/2773515/">Staff Software Engineer, Payments Compliance</a> (Bangalore, India)</p><p><a href="https://careers.airbnb.com/positions/3197040/">Software Engineer </a>— Cities (Bangalore, India)</p><h3>Acknowledgments</h3><p>This migration has been a long journey that wouldn’t have been possible without the contributions of many people at Airbnb across several organizations including Payments, Hosting, Guest Experience, QA, and Finance. Too many people helped on this project to thank all of them here, but the authors would like to recognize Musaab At-Taras, Xuemei Bao, Ryan Bi, Abhijit Borude, Ben Bowler, Yizheng Cai, Jiaqi Chen, Haoran Cheng, Cynthia Adams, Pat Connors, David Cordoba, Chong Chung, Anqi Dai, Xinyue Deng, Rex Du, Ali Goksel, Ömer Faruk Gül, Jiajia Han, Jing Hao, Toland Hon, Jeremy Kane, Hide Kato, Fanchen Kong, Victoria Ku, Pasha Lahutski, Serena Li, Tina Li, Harry Liu, Michael Liu, Wenguo Liu, Yixia Mao, Elena Moskvichev, Eric Ning, Ika Ogeil, Christina Ou, Payut Pantawongdecha, Yixiao Peng, Yaritza Perez, Wentao Qi, Zachary Sabin, Rajen Shah, Patrick Shay, Bo Shi, Derek Shimozawa, Erika Stott, Huayan Sun, Sam Tang, Claire Thompson, Neo Tong, Alex Virrueta, Jing Wang, Bryan Wehner, Michel Weksler, Claudio Wilson, Xuanxuan Wu, Liang Xiao, Chao Xin, Serdar Yildirim, Hang Yuan, Brian Zhang, Yunfei Zhao, Jaclyn Zhong, and Linglong Zhu for their contributions over the lifetime of this project.</p><p>All product names, logos, and brands are property of their respective owners. All company, product and service names used in this website are for identification purposes only. Use of these names, logos, and brands does not imply endorsement.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=341d194a781b" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/rebuilding-payment-orchestration-at-airbnb-341d194a781b">Rebuilding Payment Orchestration at Airbnb</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[My Journey to Airbnb — Lucius DiPhillips]]></title>
            <link>https://medium.com/airbnb-engineering/my-journey-to-airbnb-lucius-diphillips-79d1f0bc72a2?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/79d1f0bc72a2</guid>
            <category><![CDATA[diversity]]></category>
            <category><![CDATA[leadership-development]]></category>
            <category><![CDATA[leadership]]></category>
            <dc:creator><![CDATA[AirbnbEng]]></dc:creator>
            <pubDate>Thu, 17 Feb 2022 19:54:26 GMT</pubDate>
            <atom:updated>2022-02-17T19:56:34.003Z</atom:updated>
            <content:encoded><![CDATA[<h3>My Journey to Airbnb — Lucius DiPhillips</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*hnM9txCDUVpdDN-u9Z9lJQ.jpeg" /></figure><p>Airbnb’s CIO on sponsorship, belonging, and the power of human connection</p><p><em>Lucius DiPhillips is the Chief Information Officer (CIO) at Airbnb. He has over 20 years of experience that spans Product Development, Information Technology, Customer Service, Financial Services, Payments, eCommerce, and Trust &amp; Safety. He has a Degree in Management Information Systems from Rensselaer Polytechnic Institute and serves as the executive sponsor for several diversity and belonging groups and initiatives across the company. Through his sponsorship, Lucius has been instrumental in helping to improve the ways in which Airbnb attracts and retains diverse technical talent.</em></p><h3>Breaking barriers and growing from adversity</h3><p>I grew up in Upstate New York, in a small town called Hudson Falls. I was raised by a single-parent mom, and I’m an only child. Growing up, we struggled financially, and I helped out wherever I could. From delivering papers as a ten-year-old to waiting tables as a high-schooler, I always had something to balance. That’s helped me as a leader to this day: balance and having that hard work ethic, and seeing my mom’s struggle as a single mom.</p><p>I’m multiracial: my mom is white and my dad has Black heritage. At an early age, I became acutely aware that I was different, and sometimes I didn’t feel like I belonged — because of how I looked, because I didn’t have both parents in the picture, and because we didn’t have a lot financially. Rather than letting my differences hold me back, I immersed myself in many things, from playing sports to the school choir and musicals. I wanted to get to know a lot of different people and ultimately go beyond the superficial labels and barriers between us.</p><p>That has become part of how I lead to this day, and how I build teams. It’s very much about connecting with people beyond what you might see on the surface, and really trying to find common ground. It was a skill that came from a dark place early on in my career, that has now become a skill that helps me be a coach, mentor, and sponsor, who invests in others and leads them to develop in their own careers.</p><h3>A career path shaped by curiosity, connections, and conversations</h3><p>I first got interested in tech in the 90s, as a student curious about this new thing called the internet. While my career started in traditional IT, I later got into product development and software development for end-users. Normally, those are two different profiles, but I’m more of a hybrid with a broad understanding of all facets of tech. I love technology, but I also love operations, leadership, and people. I have an appreciation for how we make sure that we connect what’s happening with tech to real customers, real people at the end of the day.</p><p>Making and maintaining many different personal connections with mentors and colleagues has led to a variety of opportunities in my career, and eventually brought me to Airbnb. I first came to Airbnb leading our Payments technology organization. Airbnb has a structured framework for career conversations that involves assessing your dream job, your story, your strengths, and what you want to do better, and from there identifying career development opportunities. This process led to my current role as the first CIO at Airbnb.</p><p>I feel like I have the best job as a CIO. I feel like I work for the best company in the world at Airbnb. That’s why I’m still glowing and here, going on four years later. And to me, this is just the beginning.</p><h3>Diversity and belonging in tech</h3><p>I am the co-sponsor of the Tech Diversity Council, a group of senior technical leaders at Airbnb tasked with amplifying and advocating for diversity-related projects and initiatives across our Tech org. It’s one of the most important roles that I have to play, if not the most important. And we’ve created the Council because we still have a long way to go in terms of representation across tech and across Airbnb. To me, the best way to get involved is to give my time and push ideas and vision into action that creates impact.</p><p>There isn’t just one initiative to talk about here, but rather many parallel efforts that span from wide-scale to personal. In addition to the Tech Diversity Council, we have a hyperfocus on Black in Tech as a group, and we have the Black Sponsorship Program, developed and led by Airbnb’s Black Employee Resource Group, Black@. I lead a monthly series for anyone who’s in technology that self-identifies as Black, who optionally wants to come together, to have a safe place to share, to contribute.</p><p>At Airbnb, we’ve always prided ourselves in standing for what we believe in unapologetically. With the Black Lives Matter movement and the George Floyd protests, I felt like we had the support to speak up about what we were feeling and the experiences we were having. The Black@ group created <a href="https://news.airbnb.com/activism-and-allyship-guide/">a guide</a> on how to be an ally, and we hosted many conversations about what it means to be Black in America. To me, that was the most important thing we could have been doing in that moment of time, and we continue doing it.</p><h3>Redesigning our hiring process</h3><p>I’m proud of Airbnb, because most companies don’t even talk about where they hope they go. They don’t share representation numbers. We not only share them, we say we can do better, and we’re going to do better, and here’s how and when.</p><p>One of the things we’ve done is go back to the drawing board to redesign our hiring process. Having a love of operations, data, and driving process improvements, I approached our hiring process like a product. Step by step, we looked at the data and asked “Is there a disproportionate drop-off here for certain demographics? What can we do differently?”</p><p>We realized that engineers are very unique — not just in their gender and ethnicity and work experience, but in how they’re most comfortable interviewing. So we decided to give candidates more flexibility: they might choose either to do a take-home coding test or show us some open source work they’re proud of. We also got more managers involved at the ground level to support our diversity and inclusion candidates and help them feel seen, understood, and connected to their future team. Engaging more of our diverse engineers early on in the hiring process had a huge impact.</p><p>Starting from my time with the Payments organization, I recognized the urgency of the moment and the stakes at play for underrepresented candidates and pushed the recruiting team to put changes into action rather than waiting or holding back. I call it breaking some glass — you need to break some glass every once in a while to challenge the status quo.</p><h3>A human-centric way to lead</h3><p>If you focus on belonging and engagement, and you make it a priority, then you can create a better environment for your team. When traumatic things happen, it’s important to educate others so they can be allies, as well as creating a safe space for people to share. As part of our wellness programs, we host “listening sessions.” I’ve hosted them with my leadership team, for Black@, for what was happening with the Afghan refugee situation, or when the COVID-19 pandemic was spiking in India.</p><p>I’m also passionate about demystifying the fact that work-life balance is a real thing you can actually conquer. It’s a pet peeve of mine that we talk about work-life balance. My balance is very different than any one of yours individually. So let’s talk about flexibility, and having empathy for each other’s unique needs and situations.</p><p>I care about being transparent and available, and part of the way I do that is by offering an office hours slot twice a day that anyone can sign up for at any time. We actually took that idea and scaled it with something called coffee chats. Anyone in our organization can sign up to have a coffee chat with someone else. You don’t know who it’s going to be until you show up. And that’s what I loved about my office hour slots, being able to ask, “What’s your story? How long have you been here? What’s one personal thing you’re thinking about?” At heart I want to connect with people. I want to demonstrate a human-centric way to lead.</p><p>–</p><p>Interested in working with Lucius at Airbnb? Check out these open roles:</p><p><a href="https://careers.airbnb.com/positions/3897689/">Senior Engineering Manager, Tax Platform</a></p><p><a href="https://careers.airbnb.com/positions/3873636/">Systems Engineer, Client Engineering</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=79d1f0bc72a2" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/my-journey-to-airbnb-lucius-diphillips-79d1f0bc72a2">My Journey to Airbnb — Lucius DiPhillips</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[The Past, Present, and Future of react-dates]]></title>
            <link>https://medium.com/airbnb-engineering/the-past-present-and-future-of-react-dates-b351ab739d3f?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/b351ab739d3f</guid>
            <category><![CDATA[open-source]]></category>
            <category><![CDATA[frontend]]></category>
            <category><![CDATA[front-end-development]]></category>
            <category><![CDATA[react]]></category>
            <category><![CDATA[javascript]]></category>
            <dc:creator><![CDATA[Diane Ko]]></dc:creator>
            <pubDate>Fri, 21 Jan 2022 17:45:50 GMT</pubDate>
            <atom:updated>2022-01-24T22:44:18.497Z</atom:updated>
            <content:encoded><![CDATA[<p><a href="https://www.linkedin.com/in/kodiane/">Diane Ko</a></p><figure><img alt="Silhouettes of two people in front of the inside of a large, clear clock overlooking a city." src="https://cdn-images-1.medium.com/max/1024/1*VymqCVttV2_VOqmmApgakw.jpeg" /></figure><p>In 2016, Airbnb released react-dates, a React date picker component library. The <a href="https://github.com/airbnb/react-dates/stargazers">project has amassed more than 11,000 stars</a>. GitHub also tells us that <a href="https://github.com/airbnb/react-dates/network/dependents">react-dates is used by over 30,000 repos</a>.</p><p>In more recent years, Airbnb’s requirements for a date picker have changed in a way that has diverged from react-dates. If we were to have made those changes to the library, it would have severely limited the flexibility of the library, one of its key features. To better support the react-dates community, we’ve made the decision to transfer ownership of the react-dates repo to a new <a href="https://github.com/react-dates">react-dates GitHub organization</a>. We believe this new home will better serve the community and continue to evolve the original goals of react-dates.</p><p>If you want to help react-dates grow, please check out the <a href="https://github.com/airbnb/react-dates/issues">open issues</a> and <a href="https://github.com/airbnb/react-dates/pulls">pull requests</a> — the <a href="https://github.com/airbnb/react-dates/labels/pull%20request%20wanted">“pull request wanted” tag</a> is a great starting point.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b351ab739d3f" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/the-past-present-and-future-of-react-dates-b351ab739d3f">The Past, Present, and Future of react-dates</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Intelligent Automation Platform: Empowering Conversational AI and Beyond at Airbnb]]></title>
            <link>https://medium.com/airbnb-engineering/intelligent-automation-platform-empowering-conversational-ai-and-beyond-at-airbnb-869c44833ff2?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/869c44833ff2</guid>
            <category><![CDATA[engineering]]></category>
            <category><![CDATA[ai]]></category>
            <category><![CDATA[automation]]></category>
            <category><![CDATA[chatbots]]></category>
            <category><![CDATA[customer-support]]></category>
            <dc:creator><![CDATA[Zhiheng Xu]]></dc:creator>
            <pubDate>Tue, 11 Jan 2022 18:10:01 GMT</pubDate>
            <atom:updated>2022-01-11T21:19:55.329Z</atom:updated>
            <content:encoded><![CDATA[<p>How Intelligent Automation Platform supports conversational AI and agent-automation to improve the Airbnb customer experience</p><p>By <a href="https://www.linkedin.com/in/zhiheng-xu-50249b31/">Zhiheng Xu</a>, <a href="https://www.linkedin.com/in/yi-alex-zhou-1284651b/">Alex Zhou</a>, <a href="https://www.linkedin.com/in/chutianwang/">Jeremy Wang</a>, <a href="https://www.linkedin.com/in/zecheng-xu-11bb778a/">Zecheng Xu</a>, <a href="https://www.linkedin.com/in/ziyi-wang-6651b5b1/">Ziyi Wang</a>, <a href="https://www.linkedin.com/in/jiayu-lou-337ba785/">Jiayu Lou</a>, <a href="https://www.linkedin.com/in/liuming-zhang-4b120894/">Liuming Zhang</a>, <a href="https://www.linkedin.com/in/fengjian-pan/">Gary Pan</a>, Jeffrey Zhao, Yisong Wang, <a href="https://www.linkedin.com/in/priyanksinghal/">Priyank Singhal</a>, <a href="https://www.linkedin.com/in/clairexiong/">Claire Xiong</a>, <a href="https://medium.com/@waynezhang511">Wayne Zhang</a>, <a href="https://www.linkedin.com/in/benmatata2020/">Ben Ma</a>, <a href="https://www.linkedin.com/in/hao-wang-2661553/">Hao Wang</a>, Carter Appleton, Anthony Clifton</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*-OP5Y1xe4uxuNzvn" /></figure><p>With the rapid development of Machine Learning and Natural Language Processing technologies, conversational AI has attracted huge attention in recent years. More and more conversational AI applications such as virtual assistants, smart speakers, and customer support chatbots have been developed to help people in their daily lives.</p><p>At Airbnb, we have developed multiple conversational AI products to enhance our host and guest experience. Examples include our <a href="https://medium.com/airbnb-engineering/using-chatbots-to-provide-faster-covid-19-community-support-567c97c5c1c9">chatbot systems</a>, which support users through in-app messaging or automated phone calls, our <a href="https://medium.com/airbnb-engineering/task-oriented-conversational-ai-in-airbnb-customer-support-5ebf49169eaa">task-oriented ML framework</a> for issue detection and automatic problem solving, and various on-trip support products to proactively help guests improve their experience while they are on trip.</p><p>In this blog post, we introduce the <strong><em>Intelligent Automation Platform</em></strong> (AP), a generic enterprise-level platform developed by Airbnb to support a suite of conversational AI products. From this point forward, the Intelligent Automation Platform will be referenced as “AP”.</p><p>By modeling Conversational AI products as <a href="https://en.wikipedia.org/wiki/Markov_decision_process">Markov Decision Process</a> (MDP) workflows, AP provides a unified representation of workflows and actions to facilitate workflow consolidation and action reusability. Additionally, the platform offers a GUI development tool to enable drag-and-drop workflow creation, facilitate fast iteration of products, and empower non-technical teams to build conversational AI products.</p><h3><strong>1. Platform Architecture</strong></h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*UIcZmMClcOTgHDDW" /><figcaption>Figure 1: AP Architecture</figcaption></figure><p>Figure 1 shows the high-level architecture of AP, which consists of 4 main components:</p><ol><li><strong>Event Orchestrator</strong>, the event orchestration layer of the platform. It translates input/output messages between clients and Workflow Engine, to ensure that workflows on AP can be built and executed in a generic way.</li><li><strong>Workflow Engine</strong>, the “brain” of the platform. It is responsible for managing and executing all the workflows powered by the platform.</li><li><strong>Action Store</strong>, the action execution engine of the platform. It supports action requests during workflow execution. Action Store is an open platform for developers to create new actions or reuse existing ones. By using actions in the Action Store, we standardize task execution based on different systems and backends, and ensure consistent user experience across different products.</li><li><strong>Flow Builder</strong>, the workflow creation GUI tool of the platform. It’s a collaborative, drag-and-drop interface that simplifies creation and management of workflows. The output of Flow Builder are workflows that can be loaded and executed by Workflow Engine.</li></ol><p>Figure 2 shows an example of a demo “Q &amp; A” workflow on AP. The demo workflow, configured via Flow Builder, can answer users’ questions from different channels (such as messaging or phone).</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*FnBOBUiWhA2gjW8t" /><figcaption>Figure 2: A Demo Q&amp;A Workflow on AP</figcaption></figure><p>When the platform receives a request for the “Q &amp; A” workflow, it triggers:</p><ol><li>Event Orchestrator to normalize the request and find the corresponding workflow session if it exists (a workflow session is a single instance of the workflow), and then forward the request to Workflow Engine.</li><li>Workflow Engine to restore the previous state of the workflow or create a new one from the start node (state), and then execute the workflow: a) Execute the actions defined for the current workflow state. b) Move the workflow to the next state based on the action results or other conditions. c) Pause the workflow and wait for the next input if needed.</li><li>Action Store to execute all the actions required by Workflow Engine.</li></ol><h3>2. Key Components of Intelligent Automation Platform</h3><h4>2.1 Event Orchestrator</h4><p>One of the design principles of AP is to provide channel-agnostic problem solving capabilities (channels represent the source of requests, such as in-app chatbot or phone). Workflows and Actions are intended to be channel-agnostic, focusing on the core of the problem no matter which channel users choose to contact us via to resolve their issues.</p><p><strong><em>Event Orchestrator</em></strong> is the event orchestration layer of AP. It normalizes the input and output of the platform to ensure that conversational workflows can be built and executed in a channel-agnostic way. Figure 3 provides the architecture of Event Orchestrator, which contains 3 layers: orchestration layer, context data layer, and workflow request layer.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*B_Xp_EsngxICFpgh" /><figcaption>Figure 3: Event Orchestrator Architecture</figcaption></figure><p>The orchestration layer handles all the requests and responses. It currently supports 3 types of input:</p><ol><li><strong>Channel message</strong>. These are messages delivered from different channels, such as phone, email or in-app messaging.</li><li><strong>Async events</strong>. These are async events (such as <a href="https://kafka.apache.org/intro">Kafka</a> events) generated by different Airbnb internal systems, like cancellation events.</li><li><strong>Internal service requests</strong>. Event Orchestrator also provides a few endpoints to handle workflow requests from other Airbnb internal services directly.</li></ol><p>Context data layer stores all contextual information related to the platform requests. Before creating a workflow request to the <em>Workflow Engine</em>, context data layer: a) Identifies whether the request is about a new workflow session or an existing one, by looking up the session mapping tables. b) Restores critical contextual information for workflow execution by reading from session data tables.</p><p>Workflow request layer prepares the request to <em>Workflow Engine</em> for workflow execution and processes the response from <em>Workflow Engine</em>. It makes sure that platform requests from different sources are converted into the same Workflow Engine requests so that <em>Workflow Engine</em> can handle all workflows in a generic way.</p><h4>2.2 Workflow Engine</h4><p><strong><em>Workflow Engine</em></strong> is the “brain” of AP, responsible for executing and monitoring all the workflows powered by the platform.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*KCemaFJ_3_SHp3s5" /><figcaption>Figure 4: Workflow Engine Architecture</figcaption></figure><p>Figure 4 shows the overall architecture of Workflow Engine, which consists of 4 main components:</p><ol><li><strong>Session Manager</strong>. Session Manager manages the lifecycle of entire workflow execution. After receiving a workflow execution request, it will restore the previous state of the workflow (if a workflow is resumed) or create a new workflow from the start state (if a new workflow is created). When workflow needs to pause and wait for user response, Session Manager will store the current state and all workflow variables into the database, to be restored by the next request of the same session.</li><li><strong>Schema Loader</strong>. Schema Loader loads the workflow schema generated by <em>Flow Builder</em>, the workflow creation UI tool of AP. A workflow schema is a JSON schema file automatically generated by <em>Flow Builder </em>(see more details in the <em>Flow Builder</em> section).</li><li><strong>Workflow Executor</strong>. Workflow Executor executes the workflow based on the workflow schema, starting from the current state of the workflow. It processes the action defined in the current state by sending a request to the <em>Action Store</em>, handles the response, and saves the variables to the Variable Manager. After that, it moves the workflow to the next state according to the transition conditions and starts processing the next workflow state. The Workflow Executor will keep repeating the process until the workflow needs to be paused (and waiting for user response), or until it reaches the end of the workflow.</li><li><strong>Variable Manager</strong>. Variables are the data supporting workflow execution. Variable Manager manages all the variables and is accessible by Workflow Executor to read and update variables during workflow execution.</li></ol><h4>2.3 Action Store</h4><p><strong><em>Action Store</em></strong> is the action execution engine of AP, supporting action execution requests from <em>Workflow Engine</em>. It is also an open platform for developers to create new actions or reuse existing ones. All actions in the Action Store are available on <em>Flow Builder</em> for creating workflows.</p><p>As shown in figure 5, all actions in the Action Store implement a common interface, so that they can be processed in the same way during action execution (by <em>Workflow Engine</em>) and workflow creation (by <em>Flow Builder</em>). An action can be as simple as fetching a user’s reservation data or as complicated as issue prediction, which might involve multiple machine learning models and feature generation pipelines.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*mGHSc3l3YH9cd9GJ" /><figcaption>Figure 5: Action Interface</figcaption></figure><p>Figure 6 shows the high level Architecture of Action Store, which contains 3 main components:</p><ol><li><strong>Action Executor</strong>. Action Executor supports action execution requests. When receiving a request, Action Executor will load the action implementation from Action Manager based on the action type and invoke the execution function defined in the implementation. Many actions rely on external services to finish the execution, and the Action Executor will be responsible for sending those external requests and processing the response.</li><li><strong>ActionInfo Handler</strong>. ActionInfo Handler supports <em>Flow Builder</em> for workflow creation by serializing all the action information (e.g., metadata, payload, results, etc.) to <em>Flow Builder</em> to render the actions on the UI and support action configuration when creating workflows. More details are available in the <em>Flow Builder</em> section.</li><li><strong>Action Manager</strong>. Action Manager registers and manages all the actions created in the Action Store. It provides action implementation to Action Executor and ActionInfo Handler based on the action type.</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*0upy1aVoDkIG8tVJ" /><figcaption>Figure 6: Action Store Architecture</figcaption></figure><h4>2.4 Flow Builder</h4><p><strong><em>Flow Builder</em></strong> is the workflow creation UI tool of AP, supporting drag-and-drop workflow creation. It integrates with <em>Action Store</em> to retrieve all action information and sends the generated workflow schema to <em>Workflow Engine</em> during workflow execution.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*I0WVsWNOe_UV_C1f" /><figcaption>Figure 7: Flow Builder UI (Action Configuration)</figcaption></figure><p>Figure 7 illustrates the UI of Flow Builder when configuring actions in workflow. On the left is the Action Panel, which lists all available actions in the <em>Action Store</em> and supports searching by action name or description. Workflow creators can drag and drop any actions in the workflow panel and then configure the action payload by clicking the action node.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*9_Fdqmq1D3vyGtLA" /><figcaption>Figure 8: Flow Builder UI (Configure the Workflow Graph)</figcaption></figure><p>Figure 8 shows the UI when configuring the workflow graph. Workflow creators can create transitions between workflow nodes (each node can be viewed as a step or state of the workflow) by creating links between nodes and configuring the transition conditions. After all the workflow nodes and links are configured, the workflow is ready to be tested and published.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*5cY6rYs24KtGgbda" /><figcaption>Figure 9: Flow Builder Architecture</figcaption></figure><p>Figure 9 is the high level architecture of Flow Builder. It contains two major components:</p><ol><li>The frontend layer, which is built with a third-party library <a href="https://github.com/projectstorm/react-diagrams">React-diagrams</a>, supports the UI and all operations on the UI.</li><li>The backend layer, Workflow Management service, which is responsible for: a) Getting all action information from the <em>Action Store</em> and passing to the frontend layer. b) Generating workflow schema that can be executed by <em>Workflow Engine</em> from the configured workflow graph on the UI. c) Serving the workflow schema to <em>Workflow Engine</em> during workflow execution.</li></ol><p>Figure 10 gives an example of an auto-generated workflow schema that can be executed by <em>Workflow Engine</em>.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*h451jjvwaI49jZTduC8Nwg.png" /><figcaption>Figure 10: Example of Auto Generated Workflow Schema</figcaption></figure><h3>3. Conclusion</h3><p>In this post, we introduced our Intelligent Automation Platform, a generic and business friendly enterprise platform to support a suite of conversational AI products at Airbnb including chatbots for customers, on-trip support products, and agent automations. With Intelligent Automation Platform, we can simplify and speed up conversational AI product development, democratize AI technology to business teams, and scale up more and more intelligent solutions to improve the Airbnb customer experience.</p><h3>Acknowledgements</h3><p>Thanks to Danny Deng, Xirui Liu, Zixuan Yang, Xiang Lan, Keyao Yang, Changhui Liu, Wenbin Zhang, Hengyu Zhou, Stephanie Pang, Jack Chen, Bart Bu, Carter Appleton, Shahaf Abileah, Mariel Young, Shuo Zhang, Wei Ji, Jiayu Liu, Kevin Jungmeisteris, Pratik Shah, Xiaoyu Meng, Michael Zhou, Haoran Zhu, Jon Sandness and Conor D’Arcy for the product collaborations.</p><p>Thanks to Tina Su, Andy Yasutake, Joy Zhang, Raj Rajagopal, Navjot Sidhu, James Eby and Julian Warszawski’s leadership support for the Intelligent Automation Platform.</p><p><em>Interested in working at Airbnb? Check out these roles:</em></p><p><a href="https://grnh.se/7de3db391us">Staff Software Engineer, CSP — Contact Solutions</a></p><p><a href="https://grnh.se/29257d691us">Senior Software Engineer, Community Support Platform</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=869c44833ff2" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/intelligent-automation-platform-empowering-conversational-ai-and-beyond-at-airbnb-869c44833ff2">Intelligent Automation Platform: Empowering Conversational AI and Beyond at Airbnb</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Airbnb’s Page Performance Score on Android]]></title>
            <link>https://medium.com/airbnb-engineering/airbnbs-page-performance-score-on-android-f9fd5e733e?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/f9fd5e733e</guid>
            <category><![CDATA[android-performance]]></category>
            <category><![CDATA[mobile-app-development]]></category>
            <category><![CDATA[software-development]]></category>
            <category><![CDATA[android]]></category>
            <dc:creator><![CDATA[Luping Lin]]></dc:creator>
            <pubDate>Fri, 17 Dec 2021 21:06:55 GMT</pubDate>
            <atom:updated>2021-12-17T21:06:55.251Z</atom:updated>
            <content:encoded><![CDATA[<p><em>Part 4 of our series on </em><a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936"><em>Airbnb’s Page Performance Score</em></a>.</p><p><a href="https://www.linkedin.com/in/lupinglin/">Luping Lin</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*jv0-M5bsGxi2bcXb" /></figure><p>Airbnb’s home grown <a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936">Page Performance Score</a> (PPS) is designed to capture the rich, complex realities of performance by collecting a multitude of user-centric performance metrics and formulating them into one single 0-100 score. In this post we will deep dive into how we define and implement these metrics on Android. Make sure you read the <a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936">overview blog post</a> first to familiarize yourself with our PPS metrics and formula.</p><h3>Instrumentation</h3><h4>Universal Page Tracking System</h4><p>The entire customer journey on Airbnb is divided into different pages, each of which has its own measured PPS. In order to support this page-based performance tracking system, we built a standardized infrastructure that enables engineers to configure pages representing their features.</p><p>On Android a page is associated with a <em>Fragment</em>. Each fragment must provide a <em>LoggingConfig</em> object specifying a page name, which can later be retrieved whenever the page name needs to be referenced. We collect performance data throughout the fragment’s lifecycle, and only emit the logging event when the fragment is paused.</p><p>A universal <em>PageName</em> enum is used to uniquely identify each page, and is referenced across all platforms to consistently represent each page in our user journey.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/f32323e5d2deb216aa9f32f7949a1958/href">https://medium.com/media/f32323e5d2deb216aa9f32f7949a1958/href</a></iframe><h4>Capturing Wait Time Perceived by Users</h4><p>A key differentiator of our new Page Performance Score (PPS) is that it measures wait time that users can see. While our early measurement effort (mentioned in our <a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936">overview blog post</a>), which was based on the commonly known <a href="https://web.dev/interactive/">Time To Interactive</a> (TTI) metric, measures code execution time and length of asynchronous calls. For example, PPS measures how long a user sees the loading indicators on screen, while TTI measures how long it takes for a network request to return results and how long it takes to build the view models. We believe PPS more closely reflects performance experienced by our users.</p><p>In order to capture visually perceived wait time, we needed all views with a loading state to implement an API that reports their loading state changes. We created a simple interface called <em>LoadableView</em>.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/04447f5c61f6521ef61e07add16903f4/href">https://medium.com/media/04447f5c61f6521ef61e07add16903f4/href</a></iframe><p>We provide primitives such as a base <em>ViewGroup</em>, a base <em>TextView</em>, and a base <em>ImageView,</em> all of which implement the <em>LoadableView</em> interface. Our developers simply need to inherit from these primitives for their views to be automatically instrumented.</p><p>One challenge was that we needed to keep track of a view’s visibility because if a view is not at least 10% visible on the screen we don’t want to include its loading time in our measurement. The computation of the percentage of visibility of every view is both frequent and recursive. Furthermore, most of our views are in a <em>RecyclerView</em> and we must ensure their visibility is updated correctly on each scroll event, while keeping the <em>RecyclerView</em> performant. We devised algorithms to reduce the frequency and complexity of these calculations, including caching the visibility states within the <em>RecyclerView</em>.</p><h3>Metric Implementation</h3><h4>Time to First Layout (TTFL)</h4><p>TTFL measures how long a user has to wait before seeing <em>any</em> content on the screen. TTFL starts at fragment initialization and ends at the first <em>onGlobalLayout </em>event after the fragment is laid out, at which point the system has finished inflating, measuring, and laying out the fragment’s view hierarchy.</p><p>A slow TTFL often indicates that the fragment’s view hierarchy is overly complicated, or the UI thread is preoccupied with unnecessary tasks during fragment initialization.</p><h4>Time to Initial Load (TTIL)</h4><p>TTIL measures how long a user sees loading indicators (excluding media loading which is measured separately) before meaningful content is displayed on screen. TTIL starts at fragment initialization like TTFL, and ends when no more views on screen are in a loading state. If a screen (Fragment) is static or cached we don’t show a loading indicator. In that scenario TTIL would be the same as TTFL.</p><p>A slow TTIL often reveals opportunities in improving network latency or client rendering time. For network latency we look for slow backend services, large payloads, unutilized cache, or a less optimized data parser. For rendering time we try to follow best practices in using the RecyclerView, avoid doing heavy or recursive computation when building view models, and reduce over drawing, etc.</p><p>As mentioned above, views with a loading state can inherit from base primitives with built-in <em>LoadableView</em> implementations. The API automatically reports the view’s loading state changes to our logging framework. We use a simple counter that increments when a view enters loading state and decrements when the data is loaded. When the counter is 0, we know that there are no more loading views on screen.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/46ba94e7102640cf23a74c52146e8368/href">https://medium.com/media/46ba94e7102640cf23a74c52146e8368/href</a></iframe><p><em>This GIF demonstrates TTFL (marked when the gray background with the Airbnb logo is shown) and TTIL (marked when the loading dots are replaced by meaningful content).</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/0*53ZcfBamEiTotrgi" /></figure><h4>Main Thread Hangs (MTH)</h4><p>Users experience screen freezes, lags, and stutters when ui frames take too long to render. Each android device has a target frame refresh rate based on the device’s capacity. However when the main thread is too busy, the device renders slower than the frame rate it’s capable of. We define a MTH as whenever any frame takes more than twice the system’s frame refresh rate to render.</p><p>Frequent MTHs indicate that the main thread might be overloaded. Heavy operations or computations should be moved off the UI thread or delayed until contents are rendered.</p><p>MTH is calculated using <a href="https://developer.android.com/reference/android/view/FrameMetrics">FrameMetrics</a> reported by the Android system. We obtain the frame refresh rate from the system and use it to calculate the threshold for the thread hangs. We then listen for system callbacks to receive <a href="https://developer.android.com/reference/android/view/FrameMetrics">FrameMetrics</a>, if the frame duration is above our threshold, we record the delta <em>(frameDuration - hangThreshold)</em> as a hang.</p><h4>Additional Load Time (ALT)</h4><p>ALT measures any wait time that occurs after the initial load, such as waiting for list paginations or for content to be updated after a Save button is pressed. ALT starts whenever a view enters the loading state <em>after</em> TTIL has already been marked, and ends when no more loading views are shown. ALT can start and end multiple times, each time is recorded as a separate ALT.</p><p>Opportunities to improve ALT often lie in predicting and prefetching additional content. The overall PPS can also be improved by balancing how much content to load in initial load vs additional loads.</p><p><em>This GIF demonstrates ALT (marked when the loading indicator at the bottom is replaced by paginated content loaded from the network).</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/0*fptmsQJ6LfgBRQdS" /></figure><h4>Rich Content Load Time (RCLT)</h4><p>RCLT measures how long a user sees a placeholder or a loading indicator until an image, a video, or some rich media content is fully displayed. <em>ImageView</em> and other rich media containers implement the same <em>LoadableView</em> API to report loading state changes to the PPS logger.</p><p>To improve RCLT, we look to reduce image size, improve image caching, optimize image formats and serving, strategically schedule loading rich content that is not yet on screen, and select performant streaming libraries, etc.</p><p><em>This GIF demonstrates RCLT (marked when the place holders are replaced with actual images loaded from the network).</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/0*BtqfXhapm7jDuKL9" /></figure><h3>Conclusion</h3><p>We successfully built an instrumentation framework on Android to capture much richer and user-centric performance metrics, guided by the same design principles in <a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936"><em>Airbnb’s Page Performance Score</em></a> across web and native platforms. On top of this framework and the data collected, we built out dashboards to monitor performance across the entire app, set up automatic alerts targeting page owners, streamlined performance goal setting at team and org levels, and systematically tracked and mitigated performance regressions.</p><p>In 2022, we plan to improve the granularity and accuracy of our instrumentations such as measuring tap responsiveness, better differentiating performance during scrolling, and providing primitives with built-in performance optimizations. We will also devote resources to build tooling to improve debuggability, and enable early regression detection and prevention via synthetic testing.</p><p>PPS gives our engineers and data scientists better insights and more ways to improve our products. It also strengthens our <a href="https://medium.com/airbnb-engineering/commitment-to-craft-e36d5a8efe2a">Commitment to Craft</a> culture. We hope that you apply these learnings in your organization as well.</p><h4>Appreciations</h4><p>Thank you to everyone who has helped build PPS on Android: <a href="https://www.linkedin.com/in/eli-hart-54a4b975/">Eli Hart</a>, <a href="https://www.linkedin.com/in/charlesx2013/">Charles Xue</a>, <a href="https://www.linkedin.com/in/nickbryanmiller/">Nick Miller</a>, <a href="https://www.linkedin.com/in/scheuermann/">Andrew Scheuermann</a>, <a href="https://www.linkedin.com/in/hdezninirola/">Antonio Niñirola</a>, <a href="https://www.linkedin.com/search/results/all/?keywords=joshua%20nelson%20%E2%9C%A8&amp;origin=RICH_QUERY_SUGGESTION&amp;position=0&amp;searchId=959d4aca-c80e-448a-b415-4a732ba7a84d&amp;sid=Rr6">Josh Nelson</a>, <a href="https://www.linkedin.com/in/adityapunjani/">Aditya Punjani</a>, <a href="https://www.linkedin.com/in/joshpolsky/">Josh Polsky</a>, <a href="https://www.linkedin.com/in/jnvollmer/">Jean-Nicolas Vollmer</a>, <a href="https://www.linkedin.com/in/wensheng-mao-76ab7142/">Wensheng Mao</a> and everyone else who helped along the way.</p><p>Interested in working at Airbnb? Check out these roles:<br><a href="https://grnh.se/6c9839421us">Staff Android Engineer</a><br><a href="https://grnh.se/1e5c9bf51us">Senior Android Engineer</a> <br><a href="https://grnh.se/aa366a2e1us">Senior Android Engineer</a><br><a href="https://grnh.se/20c296251us">Android Engineer, Special Projects</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f9fd5e733e" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/airbnbs-page-performance-score-on-android-f9fd5e733e">Airbnb’s Page Performance Score on Android</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Automating Data Protection at Scale, Part 3]]></title>
            <link>https://medium.com/airbnb-engineering/automating-data-protection-at-scale-part-3-34e592c45d46?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/34e592c45d46</guid>
            <category><![CDATA[software-development]]></category>
            <category><![CDATA[data]]></category>
            <category><![CDATA[classification]]></category>
            <category><![CDATA[security]]></category>
            <category><![CDATA[privacy]]></category>
            <dc:creator><![CDATA[elizabeth nammour]]></dc:creator>
            <pubDate>Thu, 16 Dec 2021 18:32:28 GMT</pubDate>
            <atom:updated>2021-12-16T18:32:28.101Z</atom:updated>
            <content:encoded><![CDATA[<p>Part three of a series on how we provide powerful, automated, and scalable data privacy and security engineering capabilities at Airbnb</p><p><a href="https://www.linkedin.com/in/elizabethnammour/">Elizabeth Nammour</a>, <a href="https://www.linkedin.com/in/pinyao-guo-6b621684/">Pinyao Guo</a>, Jamie Chong, <a href="https://www.linkedin.com/in/wendy-jing-jin-81452921/">Wendy Jin</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*opUbxGQ8bUEHduhi" /></figure><h3>Introduction</h3><p>In <a href="https://medium.com/airbnb-engineering/automating-data-protection-at-scale-part-1-c74909328e08">Part 1</a> and <a href="https://medium.com/airbnb-engineering/automating-data-protection-at-scale-part-2-c2b8d2068216">Part 2</a> of our blog series, we gave an overview of the Data Protection Platform (DPP). We focused on how we built a global understanding of Airbnb’s data and its associated security and privacy risks. In this blog post, we will describe how we use this understanding to provide powerful and automated security and privacy engineering capabilities and empower data governance. In order to reduce risk across the entire Airbnb organization, we sought to address the following concerns:</p><ul><li><strong>Accountability: </strong>Security and privacy compliance are not solely the responsibilities of security and privacy teams, but should be enabled across the Airbnb platform, development experience, product life cycles, and enterprise vendor solutions. As the volume of data grows and services become more complex, we need to hold the teams who control that data within Airbnb (“service owners”) accountable for the security and privacy of that data</li><li><strong>Minimal overhead: </strong>While service owners share the responsibility of reducing risks, we want to ensure we can automate the bulk of the work and minimize their operational load</li><li><strong>Global alignment: </strong>Not everyone has exactly the same understanding of data classification and protection strategies. We aim to reach a consensus among security, privacy, legal, and service owners and provide a single source of truth for privacy and security annotations and actions</li></ul><p>In the following sections, we’ll first share a deep dive into the Data Protection Service, which integrates all components of our DPP and enables us to define custom data protection jobs based on our findings. Then, we will demonstrate concrete use cases of how the DPP reduces security and privacy risks.</p><h3>Data Protection Service</h3><p>We built the Data Protection Service (DPS) to integrate all components of the DPP and automate security and privacy actions for stakeholders.</p><p>The DPS provides API endpoints to stakeholders or services outside the DPP, which allows them to query for privacy and security metadata stored in <a href="https://medium.com/airbnb-engineering/automating-data-protection-at-scale-part-1-c74909328e08">Madoka</a>. For example, we have an API endpoint that allows services to query for a list of data assets that contain any type of personal data. This enables downstream data services or pipelines to build their integrations.</p><p>The DPS also enables us to easily define custom “jobs” to automate specific steps, such as:</p><ul><li><strong>Creating JIRA notifications:</strong> In order to create JIRA tickets, the DPS uses an internal ticket generator that abstracts away the ticketing mechanisms and easily allows us to filter out any duplicate tickets. We just have to define a unique identifier for the findings so that no two tickets are filed for the same findings. JIRA is one of many ways to notify data owners. Slackbots, email notifications, and other internal vendor tools would also be feasible options.</li><li><strong>Generating pull requests (PRs):</strong> In order to create PRs in GitHub Enterprise (GHE), we created a wrapper around GHE’s APIs to easily clone a repo, create a PR, and get the status of a PR. Within each job, we implement the logic of how to modify the repo’s target files and add them to a PR.</li></ul><h3>Data Protection Annotation Validation</h3><p>To help us comply effectively and efficiently with data privacy laws, we need to know where personal data lives along with its lifecycle. We also need to protect data as it propagates across different data stores and services. To help achieve this goal, we define three levels of data classification annotations — critical, personal, public — and tag the data with the annotations.</p><p>At Airbnb, engineers and data scientists can define database-export pipelines to export online MySQL table snapshots to offline Hive tables for data analysis. We require owners to tag each table column with data classification annotations. Using these tags, we are able to segregate and further protect the most sensitive data categories with appropriate access controls and retention limits.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/608/1*2deebHEi0NYUvzwUL6yHBg.png" /><figcaption>Example of database exports definition</figcaption></figure><p>Service owners use an extension of Thrift Interface Description Language (IDL) to define data interfaces for inter-service communication. We require each field within an endpoint to be tagged with a data classification annotation, which is used to restrict service API access from high risk locations. Annotations are also used to help evaluate the security and privacy risks of a service. Below is an example of a Thrift IDL API definition.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*lgUJzzwvRbFvH8nq7RBvrg.png" /><figcaption>Example Service IDL API definition</figcaption></figure><p>However, annotations relying on human judgment are prone to errors. Service owners might misjudge or be unaware of the fields within their API or data column and annotate the data incorrectly. For this reason, we validate the correctness of data classification annotations.</p><h3>Database Exports Validation</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*IGOZi0b-6ytJGFM4" /><figcaption>Figure 1: Database Exports Data Classification Validation CI Check</figcaption></figure><p>To validate database-exports annotations, we created a CI check that leverages the DPS and runs whenever someone creates a database-exports PR.</p><p>For every column specified in the PR, the CI check does the following:</p><ol><li>Queries the DPS to determine what the privacy classification should be for that column. If the classification and the PR annotation don’t match, the CI check will fail.</li><li>Otherwise, we run an additional set of regexes to determine what the data classification annotation of that column should be set to. This is mainly useful for tables that don’t contain any data, or in the case of false negatives.</li><li>If both of these checks pass, then the CI check passes.</li></ol><p>The data warehouse also uses data classification results to validate annotations on already-checked-in database-export files. A daily job queries the DPS to fetch data classifications for all Hive tables. The job notifies service owners if the classifications and annotations don’t match. These incorrectly annotated tables will be automatically dropped if service owners do not take any actions.</p><h3>IDL Validation</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*4GQjTy7YZ5GC99Sk" /><figcaption>Figure 2: Service API Interface Data Language Validation</figcaption></figure><p>We leverage the traffic-capturing feature from Airbnb services to get request and response pairs for IDL APIs. <a href="https://medium.com/airbnb-engineering/automating-data-protection-at-scale-part-2-c2b8d2068216">Inspekt</a> periodically sends requests to each service to obtain traffic samples. Inspekt then scans and classifies the traffic samples into data elements. Madoka then collects the scanning results from Inspekt and determines if there is any discrepancy between them and the annotation tags. The scanning result classification is determined by the highest sensitivity of all detected data elements. For instance, if the scanning result contains a bank account number (high) and a mailing address (medium), the final classification will be high. The discrepancy will be pinpointed to the specific field(s) within the IDL definition.</p><p>When a discrepancy is found, the DPS creates a JIRA ticket and opens a PR for the service owner to fix the IDL annotations. The DPS locates the inconsistent field within the IDL annotation file and uses the GHE client to find the relevant contributor of the code. Then, it opens a PR with suggested changes and links to the PR within the created JIRA ticket.</p><h3>Privacy Data Subject Rights Orchestration</h3><p>With the evolution of privacy laws such as with the <a href="https://gdpr-info.eu/">General Data Protection Regulation</a> and <a href="https://leginfo.legislature.ca.gov/faces/codes_displayText.xhtml?division=3.&amp;part=4.&amp;lawCode=CIV&amp;title=1.81.5">California Consumer Privacy Act</a>, individuals are able to exert more choice and control over how their personal data is collected, stored, and used. Certain data protection laws grant individuals specific data subject rights in relation to their personal data. These include “the right to be forgotten,” which gives a user the right to ask to have their personal data erased, and the right of access, which gives a user the right to know and obtain certain information about the data that an organization holds about them.</p><h4>Obliviate</h4><p>To help us comply effectively with these regulations, we built a Data Subjects Rights (DSR) orchestration service, called Obliviate, that helps coordinate and track DSR requests for erasure, access or portability from our users.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*d1DzGO0rY1A5SQsh" /><figcaption>Figure 3: Obliviate Workflow</figcaption></figure><p>When a consumer submits a DSR Erasure or Access and Portability request to Airbnb, that request gets forwarded to Obliviate. Obliviate propagates that request to downstream services by publishing it to a Kafka queue. Services that store and ‘own’ data at Airbnb are responsible for executing the DSR request by either deleting or fetching all of the personal data stored within their tables.</p><p>In order to streamline and simplify how data services interact with Obliviate, we built Obliviate clients to support all data services. The clients provide services with empty Thrift IDL schemas that need to be filled in, one for each DSR request — erasure, access, and portability. The service owner fills in each schema with all columns that the service ‘owns’ that contain personal data.</p><p>The clients also provide services with a common interface to implement, which contains several methods responsible for executing each DSR request given a user id. The client is responsible for abstracting away the rest of the logic (e.g initializing Kafka consumers and producers).</p><p>For each DSR request, the Obliviate service monitors and waits for a response from each data service integrated with the client and notifies compliance upon completion. If a data service hasn’t responded, the service allows for multiple retries until it completes.</p><h4>Automating Obliviate Integrations</h4><p>Even with abstracting away a lot of the logic with the client code, integrating with Obliviate still took a lot of engineering effort. Service owners had to manually sift through their data to determine the exact columns that store personal data, which is very time consuming. They also had to integrate the client code and its dependencies within their service, which can take some time to test and debug. In addition to being time consuming, relying on service owners to determine all personal data in their data stores could be subject to error, since they might overlook a column or not be sure what that column contains.</p><p>We decided to use the DPS to automate these integrations as much as possible. The automated integration runs as a daily job with the following steps:</p><ol><li>The DPS sends requests to Madoka and fetches the list of columns that contain personal data but have not been integrated with Obliviate yet, along with the service that owns each column.</li><li>The DPS creates a PR for each service in that mapping that both integrates the service with the Obliviate client code, along with its dependencies, if it hasn’t been integrated already and appends each column associated with that service to the Thrift structs.</li><li>The DPS creates a JIRA ticket that links to the PR and assigns it to the service owner.</li></ol><p>All the service owner has to do is implement the three methods in the interface described above by deleting or returning all rows associated with that user from the columns included in the Thrift structures.</p><h3>Eliminating Accidental Secret Leakage</h3><p>In our <a href="https://medium.com/airbnb-engineering/automating-data-protection-at-scale-part-2-c2b8d2068216">previous blog post</a>, we described how we built Angmar to detect business and infrastructure “secrets” in code and how Inspekt detects personal data and business or infrastructure secrets in data stores and service logs. The DPS enables automated notifications and actions based on these findings and metadata from other upstream services in the Data Protection Platform. Next, we’ll take a look at a few examples of how the DPS eliminates such potential leakages at Airbnb.</p><h4>“Secrets” in Data Stores and Logs</h4><p>Once an area of potential leakage is located, DPS automatically creates a security vulnerability ticket specifying the exact leakage point and assigns the ticket to the owner. Each ticket is filed with a tag that allows security operators to track the resolution of the ticket and collect metrics. After a detection of secrets in data stores and service logs, it is mandatory to find the proper service owner accountable for the detected records.</p><p>In the <a href="https://medium.com/airbnb-engineering/automating-data-protection-at-scale-part-1-c74909328e08">ownership section</a> of part 1 of our blog post, we described how Madoka service collects the service ownership property for our data assets. Once records are found, the DPS makes an API call to Madoka with the data asset metadata included within the detected record. For instance, for MySQL, the DPS sends a request to Madoka with the database cluster name and the table name within the call; for service logs, the DPS calls Madoka with the service name within the call. Madoka then responds with the corresponding team or individual “owner” of the assets.</p><p>To avoid further data leakage, tickets only contain data asset metadata instead of the detected data content. For instance, for detected records in service logs, we only record the service log code template that introduces the vulnerability and the secret type found during the scan in the ticket, but not the actual content. Once received by the owner, they are expected to discover the secret within their data stores and service logs.</p><p>A bottleneck we observed after rolling out the DPS is that generated ticket resolution still needs manual verification. That is, when a ticket is resolved by the owner, the security team needs to verify that either the leaked secrets are removed from the data stores and service logs or the logging template leading to the leakage is removed from source code. To further reduce the operational cost, we plan to create an automated verification solution in future that triggers a regression scan when owners resolve a secret leakage ticket. For instance, for a resolved secret logging ticket, the DPS can trigger a scan over affected source code and see if the previous logging template is removed. The DPS can also trigger a scan over the affected logging cluster and search for the leaked secret to ensure that the secret is safely removed.</p><h4>Secrets in Code</h4><p>After a secret is detected within a CI check job, the CI job executes `git blame` to find the most recent contributor of the secret. In cases when the recent contributor has left the company, we trace back to the contributor’s management chain until we find a person that is active. After owner identification, the DPS performs a few operations:</p><ul><li><strong>It de-duplicates secret findings: </strong>To avoid duplicate tickets and notifications for the same secret within the same file, we calculate a hash of the secret and the path name of the target file. When the hash value appears to be an existing value, we ignore the finding in DPS.</li><li><strong>It sends a notification: </strong>Alerts are sent to a dedicated Slack channel and Datadog for metrics collecting. When security operators are contacted, these notifications can serve as referees to provide contexts for proper guidance.</li></ul><p>The DPS automates the secret data protection in the Airbnb codebase and minimizes operational load for security operations. In comparison with a pentesting program where pentesters manually triage secret leakages and operate the resolution process, Angmar incurs far fewer operations.</p><h3>Conclusion</h3><p>This post concludes our three-part series on how we are automating data protection at scale at Airbnb. We explained how understanding the data, by storing privacy and security metadata in a central service and by automatically classifying what type of data is stored where, is a necessary building block to protecting the data. In this blog post, we focused on use cases where the data protection platform helped us to reduce security and privacy risk.</p><p>If this type of work interests you, see <a href="http://careers.airbnb.com/">careers.airbnb.com</a> for current openings.</p><h3>Acknowledgments</h3><p>The Data Protection Platform was made possible by all team members of the data security team: Shengpu Liu, Zi Liu, Jesse Rosenbloom, Serhi Pichkurov, and Julia Cline. Thanks to our leadership, Marc Blanchou, Joy Zhang, Brendon Lynch, Paul Nikhinson, and Vijaya Kaza, for supporting our work. Thanks to Christopher Barcellos for reviewing our blog post. Thanks to the Trust Privacy team for the great partnership: Jujhaar Singh, Ansuman Acharya, Zoya Sultana, Steve Hill, Liam McInerney, Mamman Fan, Gustavo Alza, Shazad Sahak, Alice Park, Eliott Behar etc. Thanks to the vulnerability management team for building out the ticketing mechanism: Kadia Mashal, Keziah Plattner. Thanks to the data governance team for partnering and supporting our work: Andrew Luo, Shawn Chen, and Liyin Tang. Thank you Tina Nguyen and Cristy Schaan for helping drive and make this blog post possible. Thank you to previous members of the team who contributed greatly to the work: Lifeng Sang, Bin Zeng, Prasad Kethana, Alex Leishman, and Julie Trias.</p><p><em>All product names, logos, and brands are property of their respective owners. All company, product and service names used in this website are for identification purposes only. Use of these names, logos, and brands does not imply endorsement.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=34e592c45d46" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/automating-data-protection-at-scale-part-3-34e592c45d46">Automating Data Protection at Scale, Part 3</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Airbnb’s Page Performance Score on iOS]]></title>
            <link>https://medium.com/airbnb-engineering/airbnbs-page-performance-score-on-ios-36d5f200bc73?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/36d5f200bc73</guid>
            <category><![CDATA[performance-management]]></category>
            <category><![CDATA[metrics]]></category>
            <category><![CDATA[performance]]></category>
            <category><![CDATA[ios]]></category>
            <category><![CDATA[mobile]]></category>
            <dc:creator><![CDATA[Nicholas Miller]]></dc:creator>
            <pubDate>Mon, 13 Dec 2021 15:41:02 GMT</pubDate>
            <atom:updated>2021-12-14T14:38:12.174Z</atom:updated>
            <content:encoded><![CDATA[<p><em>This is a continuation of our series on </em><a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936"><em>Airbnb’s Page Performance Score</em></a><em>, a score that measures multiple performance metrics from real users on any platform. Series: </em><a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936"><em>Part 1</em></a><em> and </em><a href="https://medium.com/airbnb-engineering/measuring-web-performance-at-airbnb-122da8d3ea3f"><em>Part 2</em></a><em>.</em></p><p><a href="https://www.linkedin.com/in/nickbryanmiller/">Nicholas Miller</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/854/1*33B60glCNf0ePfNHrvwYew.jpeg" /></figure><p>At Airbnb, we created the <a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936">Page Performance Score</a> to provide our engineers and data scientists a multitude of user-centric performance metrics to better understand and improve our products. In this post, we will dive deeper into how we define these metrics and instrument them on iOS.</p><h3>Page System</h3><p>The entire customer journey on Airbnb is divided into different pages, each of which has its own measured <a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936">Page Performance Score</a> (PPS). In order to support this page-based performance tracking system, we built a standardized infrastructure that enables engineers to configure pages representing their features.</p><p>On iOS, a page is associated with a <em>UIViewController</em>. We collect performance data throughout a <em>UIViewController’s</em> lifecycle and only emit the logging event on <em>viewDidDisappear</em>. This logging event cannot be created or sent without a <em>PageName,</em> a universal page identifier.</p><h3>Instrumentation</h3><p>Due to the many edge cases and complexities involved in instrumenting these metrics, we created a Page Performance Score state machine class, called <em>PPSStateMachine</em>. This class encapsulates all the logic to track and compute the performance metrics and generate logging events. Any engineer who wants to log a PPS event can do so by obtaining the <em>PPSStateMachine</em> associated with their <em>UIViewController</em> and calling the relevant methods during the <em>UIViewController’s</em> lifecycle events. To make things even simpler, we’ve built additional tooling and infrastructure so engineers only need to provide a name for their page and the state of the content — e.g., loading, loaded, or error.</p><h3>PPSStateMachine</h3><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/8b7970243975a6ca0835748fa6a420d4/href">https://medium.com/media/8b7970243975a6ca0835748fa6a420d4/href</a></iframe><h3>Time</h3><p>When measuring performance, all time is measured in nanoseconds and then converted into milliseconds. By creating a typealias for the concept of nanoseconds (UInt64) and milliseconds (Float64) to more specific types, we force developers to think about the scale when converting to more commonly used types (e.g., Int, Float).</p><p>When taking the current time, we use a monotonic clock, a clock whose value increments monotonically and will continue to increment while the system is asleep. The value is of type 64-bit nanoseconds.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/4da33b57f34e75dc4693667295bf3756/href">https://medium.com/media/4da33b57f34e75dc4693667295bf3756/href</a></iframe><p>When marking the start and end time of a duration, we have a computed variable that returns the current time in milliseconds. This allows us to avoid most accuracy and precision errors due to casting.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/e3c2a7aa8281b995ca3e0dbe6f3d50a6/href">https://medium.com/media/e3c2a7aa8281b995ca3e0dbe6f3d50a6/href</a></iframe><h4>Example</h4><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/602ff441004751e85ff5e03dc96c00f8/href">https://medium.com/media/602ff441004751e85ff5e03dc96c00f8/href</a></iframe><h3>View Association</h3><p>Every <em>UIViewController</em> has an associated <em>PPSStateMachine</em>. This <em>PPSStateMachine</em> can be overridden in the event the developer wants to measure a series of pages under one name. Associating with a <em>UIViewController</em> allows the <em>PPSStateMachine</em> to be found on a <em>UIView</em> by crawling the view responder chain.</p><h3>Versioning</h3><p>Declaring lifecycle and semantic methods in the PPS protocol allows us to abstract away how the score is being calculated. Most updates to the PPS formula — with the exception of entirely new metrics such as video performance — do not result in developers needing to update their respective features. Behind the scenes, any major change to the formula is first tested by placing the potential value into the logged event’s metadata. Once the potential value is validated, it can be upgraded to an official value that affects the page’s performance score.</p><h3>Metric Implementation</h3><h3>Time to First Layout (TTFL)</h3><p>TTFL starts during the UIViewController’s viewDidLoad and ends after the UIViewController’s first viewDidLayoutSubviews.</p><h3>Time to Initial Load (TTIL)</h3><p>TTIL starts during the UIViewController’s viewDidLoad and ends one render cycle after loaded content has been set.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*EW0b3z7ZpIrJhtzI0W2DSA.gif" /><figcaption>This is for illustrative purposes only and does not necessarily show anything that may or may not be available on Airbnb at any time. The content shown in the image may or may not be correct.</figcaption></figure><h3>Scroll Thread Hangs (STH)</h3><p>STHs are reported as the difference between the duration of the hitch, filtering on a minimum threshold of twice the refresh rate, and the maximum frame duration.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/00bf78cd12435d8512756b05c21010fe/href">https://medium.com/media/00bf78cd12435d8512756b05c21010fe/href</a></iframe><p><a href="https://developer.apple.com/documentation/quartzcore/cadisplaylink"><em>CADisplayLink</em></a> accurately observes most STHs. The <em>RunLoop.Mode</em> is <em>RunLoop.Mode.Tracking</em>.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/5f2dc1fc5848b1350fe493e5bc09d6bc/href">https://medium.com/media/5f2dc1fc5848b1350fe493e5bc09d6bc/href</a></iframe><p>Every time the display link is fired, we make a calculation based on the old frame and the current frame.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*D9y4xHtuKdAEf1ytdM-iEQ.gif" /><figcaption>This is for illustrative purposes only and does not necessarily show anything that may or may not be available on Airbnb at any time. The content shown in the image may or may not be correct.</figcaption></figure><p>Main Thread Hangs (MTH) tracking could exist on iOS, however, accurately tracking MTH incurs a small but consistent drag on performance. In our tests of MTH tracking, the CPU was not able to sleep, battery was drained, and the metric wasn’t giving us significantly more information regarding visually-perceived performance than STH. As a result, we decided not to measure MTH on iOS.</p><h3>Additional Load Time (ALT)</h3><p>ALT starts when a loader is shown and ends one render cycle after the loader is gone and content is set.</p><p>To illustrate this metric, let’s take a look at infinite scroll. If the bottom is reached before the next page has been loaded then the ALT recorded is the time that the loader (or bottom) is visible until the next page has loaded. If the bottom is never reached, for instance, due to prefetching, then an ALT of zero is logged. In order to accurately log, we need to know the scroll percentage, whether the bottom loader is visible, and a state machine to track the old state.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*WTBC00sL2fp9MW5xom2jpA.gif" /><figcaption>This is for illustrative purposes only and does not necessarily show anything that may or may not be available on Airbnb at any time. The content shown in the image may or may not be correct.</figcaption></figure><h3>Rich Content Load Time (RCLT)</h3><p>RCLT is entirely hidden from engineers with our view abstraction, <em>URLImageView</em>, which is capable of showing an image from a URL.</p><p>RCLT only tracks the time that a loader or placeholder is visible. If a loading image is hidden then the act of hiding marks the end of the RCLT.</p><p>On every <em>URLImageView</em> state change the corresponding <em>PPSStateMachine</em> is found by crawling the view’s responder chain and updating the state machine with whether the image is loaded or not. The <em>PPSStateMachine</em> will calculate the duration and remove the URL portion, only saving the duration, if the duration is under a specified threshold so that logs are not too large.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/0d853ace6c3ccfbb5d418efdf36e1842/href">https://medium.com/media/0d853ace6c3ccfbb5d418efdf36e1842/href</a></iframe><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/0*FDRRuig-2gi_9IZP" /><figcaption>This is for illustrative purposes only and does not necessarily show anything that may or may not be available on Airbnb at any time. The content shown in the image may or may not be correct.</figcaption></figure><h3>Summary</h3><p>Our current implementation of PPS on iOS has allowed engineers to quickly implement and receive real performance data. We are continually evolving and expanding our tooling and infrastructure. We hope that you can apply and advance our learnings in your company.</p><h4>Appreciations</h4><p>Thank you to everyone who has helped build PPS on Native: <a href="https://www.linkedin.com/search/results/all/?keywords=luping%20lin&amp;origin=RICH_QUERY_SUGGESTION&amp;position=0&amp;searchId=58011edb-813b-43c3-9f00-f886aa446e84&amp;sid=VYi">Luping Lin</a>, <a href="https://www.linkedin.com/in/hdezninirola/">Antonio Niñirola</a>, <a href="https://www.linkedin.com/in/kellerbryan19/">Bryan Keller</a>, <a href="https://www.linkedin.com/in/noahsmartin/">Noah Martin</a>, <a href="https://www.linkedin.com/in/scheuermann/">Andrew Scheuermann</a>, <a href="https://www.linkedin.com/search/results/all/?keywords=joshua%20nelson%20%E2%9C%A8&amp;origin=RICH_QUERY_SUGGESTION&amp;position=0&amp;searchId=959d4aca-c80e-448a-b415-4a732ba7a84d&amp;sid=Rr6">Josh Nelson</a>, <a href="https://www.linkedin.com/in/joshpolsky/">Josh Polsky</a>, <a href="https://www.linkedin.com/in/jnvollmer/">Jean-Nicolas Vollmer</a>, <a href="https://www.linkedin.com/in/wensheng-mao-76ab7142/">Wensheng Mao</a> and everyone else who helped along the way.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=36d5f200bc73" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/airbnbs-page-performance-score-on-ios-36d5f200bc73">Airbnb’s Page Performance Score on iOS</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How Airbnb Supports Co-Hosting]]></title>
            <link>https://medium.com/airbnb-engineering/how-airbnb-supports-co-hosting-edfb11d88575?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/edfb11d88575</guid>
            <category><![CDATA[scalability]]></category>
            <category><![CDATA[product-development]]></category>
            <category><![CDATA[infrastructure]]></category>
            <category><![CDATA[api]]></category>
            <category><![CDATA[authorization]]></category>
            <dc:creator><![CDATA[Angeline Rao]]></dc:creator>
            <pubDate>Thu, 09 Dec 2021 19:32:19 GMT</pubDate>
            <atom:updated>2021-12-09T19:32:18.917Z</atom:updated>
            <content:encoded><![CDATA[<p>A deep dive into Airbnb’s collaborative hosting infrastructure</p><p>By: <a href="https://www.linkedin.com/in/angelinerao/">Angeline Rao</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*k8WLBeLdPKkv-MrppJi8kQ.jpeg" /></figure><h3>Introduction</h3><p>Airbnb’s mission is to empower Hosts to deliver one-of-a-kind stays that make it possible for guests to experience the world in a more authentic and connected way. Sometimes hosting is handled by one person, but in many cases hosting is a group effort. Hosts often share their responsibilities with another trusted person, such as a family member or a neighbor. These trusted partners are Co-Hosts on the Airbnb platform who are granted access to the Host’s listing, reservations, and messaging with guests.</p><p>Co-Hosting is just one form of Host collaboration. As hosting has become mainstream, the scale of hosting has grown as well; in fact, many people now host on Airbnb as their primary occupation. From Host entrepreneurs running their own businesses, to Hosts that are part of established hospitality companies, these types of Hosts collaborate through a Team on Airbnb. Within a Team, hosting team members are granted roles that correspond to their real world hosting responsibilities (e.g., guest manager) and have a set of corresponding permissions (e.g., permitted to message guests).</p><p>As the number of collaborative Hosts grows and new forms of collaboration get introduced, the engineering work to support them becomes increasingly complex. With this challenge in mind, Airbnb has developed a single common infrastructure that can support all current and future Airbnb collaboration products. This solution is now available for all internal teams.</p><p>In this blog post, we will cover the unified architecture of collaborative hosting at Airbnb and how we use this shared infrastructure to streamline the process of building products for Hosts. In the next section, we will illustrate why supporting collaborative hosting without a shared infrastructure quickly became unwieldy. Then, we will walk through Airbnb’s architecture for collaborative hosting. Finally, we will discuss how this infrastructure supports the needs of product engineers.</p><h3>Background &amp; Motivation</h3><p>Before we jump into collaborative hosting, let’s consider the single Host model. Because only one person is associated with each listing, this data could easily be stored with a host_id column in our listings database. We can then perform a single check to figure out whether a user has permission to take an action on a listing. This might look like the following:</p><pre>if (isListingHost) {<br>     // Take action on listing<br>}</pre><p>When Airbnb launched its first collaborative hosting product, Co-Hosting, we used these types of comparisons, just as we did with the single host model.</p><p>In our business logic, we need frequently to answer three types of questions around person-to-resource (e.g., listing, reservation, review) relationships:</p><ol><li><strong>Permissions</strong>: Given a person and a resource, can this person take action X on this resource? The answer to this question helps us ensure that people only take actions on Airbnb that they are explicitly permitted to take. We must not permit someone to edit the price on an unrelated Host’s listing, for example.</li><li><strong>Collection Queries</strong>: Given a person, what are the resources that they can access? The answer to this question helps us determine which message threads to display in a person’s Airbnb inbox, for example.</li><li><strong>Hosts to Display and Notify</strong>: Given a resource, who should be displayed to guests, and who should be notified of updates to this resource? The answer to this question helps us determine who should be displayed as the Host(s) of this listing, for example.</li></ol><p>After Co-Hosting, we soon found that performing the types of comparisons that we did for the single host model does not scale well to collaborative and more complex use cases.</p><ul><li>Continually adding logic that is specific to a single type of collaborative hosting results in unwieldy code. For example, permissions checks might start to look like the following:</li></ul><pre>if (isListingHost || <br>    isListingCoHost || <br>    isListingTeamMember ||  <br>    isListingCollabHost1 || <br>    isListingCollabHost2 || <br>    ...) {<br>     // Take action on listing<br>}</pre><ul><li>Engineers who are building a new feature need to understand all of the existing types of collaborative hosting and decide how collaborative Hosts should interact with the feature (e.g., which types of Team members should have access to this feature?). If engineers do not include every use case, the feature will not be available to all Hosts.</li></ul><p>Without any kind of unifying framework, product development for Hosts can quickly become a laborious process.</p><p>Today, because of our collaborative hosting infrastructure, product engineers do not need to worry about specific types of collaborative hosting. They only need to know three things, all of which we will cover in this post:</p><ol><li>For permissions, query Himeji.</li><li>For collection queries, use the resource’s dedicated service.</li><li>For Hosts to display or notify, use the Collaborative Hosting API.</li></ol><h3>Collaborative Hosting Core Architecture</h3><p>We use user groups as the data model to represent any group of people. A user group is defined by an id, a group type (e.g., COHOSTING, TEAM), and a list of user group members.</p><p>Each member in a user group is defined by their Airbnb user id and a user group role, which allows us to differentiate between the different types of members within a user group. For example, if a Host (listing owner) has a Co-Host, then the corresponding user group would be a user group with type COHOSTING that has two members: the Host, who has the LISTING_OWNER role, and the Co-Host, who has the LISTING_COHOST role.</p><figure><img alt="Diagram of how a Host and their Co-Host represented in the user group data model" src="https://cdn-images-1.medium.com/max/1024/1*6JfNAQlj8Ml9LUHRxlh8AA.png" /><figcaption><em>A Host and their Co-Host represented in the user group data model</em></figcaption></figure><p>This model is extensible to hosting teams as well. We support several roles specific to Teams based on how hosting teams commonly break down responsibilities between team members, such as the LISTING_MANAGER role, the FINANCE_MANAGER role, and the GUEST_MANAGER role.</p><p>In the creation and deletion flows for a Co-Host or Team, the corresponding user group is updated accordingly.</p><figure><img alt="Diagram showing that when Co-Hosts or Teams get updated in the product, in addition to the Co-Host and Teams sources of truth getting updated, the corresponding user groups get updated as well" src="https://cdn-images-1.medium.com/max/1024/0*DV48R3dUKBjEryHK" /><figcaption>Updates in product will trigger changes in both the source of truth (Co-Hosting or Teams) and the corresponding user groups</figcaption></figure><h4><strong>Resource &lt;&gt; User Group Associations</strong></h4><p>Now that we have a model for any collaborative hosting group, we want to associate each group with the group’s corresponding resources. This way, when we are trying to answer questions around whether a person has a relation with a given resource, there is a single source that will give us the answer, regardless of the specific collaborative relationship. We keep track of these resource &lt;&gt; user group associations by storing the Airbnb resource id, the user group id, and the timestamp when the association was created.</p><figure><img alt="Example ListingUserGroupAssociations table showing that listing A has been associated with user group C and listing B has been associated with user group D" src="https://cdn-images-1.medium.com/max/1024/0*QH1mAPP9qNiJy0sM" /><figcaption><em>Example ListingUserGroupAssociations table showing that listing A has been associated with user group C and listing B has been associated with user group D</em></figcaption></figure><p>There are two scenarios in which resource &lt;&gt; user group associations need to be updated:</p><ol><li>When a collaborative hosting relationship gets updated. For example, when a hosting team gets created, all of the Team creator’s resources get associated with the Team’s corresponding user group</li><li>When a collaborative hosting resource is updated. For example, when a guest books a reservation on a Co-Hosted listing, we need to associate the Co-Host user group with the new reservation so that the listing’s Co-Hosts can help the listing owner with hosting.</li></ol><p>If updates in response to these events do not happen in a timely manner, the product experience might fall out of date. For example, if a Host adds a Co-Host to a listing, but the underlying association is not updated, the Co-Host will not have access to the listing and its reservations.</p><p>In a business of Airbnb’s size, keeping resource &lt;&gt; user group associations up to date can be challenging. The state of affairs is constantly changing, sometimes in quick succession; a Host might create a hosting team and then change their mind and immediately delete it. As a result, race conditions do occur.</p><p>For the rest of this section, we will cover Airbnb’s scalable system to keep resource &lt;&gt; user group associations up to date in spite of race conditions. In the subsequent section, we detail how Airbnb leverages these resource &lt;&gt; user group associations during product development.</p><p><strong>A System for Achieving Accurate Resource &lt;&gt; User Group Associations</strong></p><figure><img alt="Diagram of the system that keeps resource &lt;&gt; user group associations updated" src="https://cdn-images-1.medium.com/max/1024/0*21elv_AMVnSJojew" /><figcaption><em>The system that keeps resource &lt;&gt; user group associations updated</em></figcaption></figure><p>When any resource changes, our system springs into action and fetches affected resources to perform association updates. Because there can be thousands of resources to fetch, we use an internal job queue and scheduling system to break down the work into jobs to avoid timeouts and process in parallel. For all affected resources, we compare their user group associations with the current state of Airbnb and update the associations if needed.</p><p>The side effect of processing updates in parallel is that there could be race conditions that result in inconsistencies between a source of truth and corresponding user group associations. For example, if a Host creates and then immediately deletes a Team, the resulting jobs would be executed in parallel, with the possibility of a downstream “create” job executing after a “delete” job.</p><p>To address any inconsistencies introduced, the system will next fetch the now-updated resource &lt;&gt; user group associations and compare them with the source of truth. If there are any mismatches, it fixes them using a resilient queuing system that guarantees eventual consistency.</p><p>There are two notable benefits to the design of this system:</p><ul><li><strong>Optimized Performance</strong>: Performing the anticipated updates first and then fixing inconsistencies retroactively allows for the vast majority of the processing to be done in batches and in parallel. This results in a much less expensive operation than if the resources were processed one-by-one right off the bat, even though the latter approach would eliminate the need for the step to fix inconsistencies.</li><li><strong>Idempotent</strong>: Each resource update event triggers a re-calculation of associations that is agnostic to the specific type of update. As a result, we do not need to worry about receiving two opposite events, such as create and delete, in the wrong order. We thus have the guarantee that our system updates are idempotent.</li></ul><h3>Collaborative Hosting Infrastructure in Product Development</h3><p>Now that we have a system for achieving accurate user group &lt;&gt; resource associations, let’s revisit the three types of questions around person-to-resource relationships that engineers need to answer during development.</p><h4><strong>1. Permissions</strong></h4><p>When checking if a user can edit the pricing on a listing, for example, we will now know whether the person is associated with this listing in any collaborative sense by checking the listing associations of the user’s user groups. We could find out, for example, that this user is a LISTING_MANAGER team member in a user group associated with this listing.</p><p>The last piece, then, is defining how roles map to actions — for example, we might decide that users who have the LISTING_COHOST or LISTING_MANAGER role can take the EDIT_PRICING action on listings with which their user group is associated. At Airbnb, this mapping happens in configs defined in Himeji, our central authorization framework described in <a href="https://medium.com/airbnb-engineering/himeji-a-scalable-centralized-system-for-authorization-at-airbnb-341664924574">this previous blog post</a>. Given a user, a resource, and an action, Himeji computes whether that user is permitted to take the action on the resource.</p><figure><img alt="Architecture diagram for Himeji where Himeji is pointing into data sources for resource user group associations, resources, and user groups" src="https://cdn-images-1.medium.com/max/1024/0*Vr2q-tgY6hqsd6xM" /><figcaption>Architecture diagram for Himeji</figcaption></figure><h4><strong>2. Collection Queries</strong></h4><p>To fetch the resources that a person can access, we just need to make a single query by the person’s Airbnb user id and by the user group ids where the person has a permitted user group role. We use ElasticSearch to make resources searchable by user group id by joining the resource data source with the resource &lt;&gt; user group association table. This way, each resource’s ElasticSearch document has the list of user group ids that it is associated with.</p><p>Each resource’s designated data service then serves an endpoint (e.g., getListingsByFilters) that allows product engineers to pass a parameter (e.g., includeCollaborativeHosting=true) to indicate that resources should be fetched by both the person’s user id and user group ids.</p><figure><img alt="Architecture diagram for collection queries showing mutations from resource user group associations and resources feeding into ElasticSearch, which gets queried, along with the user groups data source" src="https://cdn-images-1.medium.com/max/1024/1*W-kl0OYyPkZviH4ySDmsDQ.png" /><figcaption>Architecture diagram for collection queries</figcaption></figure><p>Note that, similar to above, we did not need to know anything about Co-Hosting or Teams specifically to answer these types of questions.</p><h4><strong>3. Determining Which Hosts to Display and Notify</strong></h4><p>The user(s) to display to guests or to notify about an update are not necessarily the same as the user(s) who have the corresponding permissions. For example, a Host who has a Co-Host may not want to receive notifications about guest messages, but they still want to access their Airbnb inbox.</p><p>As we saw previously, keeping track of the bespoke logic for each type of collaboration can become taxing for product teams. To address this issue, we built out a Collaborative Hosting API that takes all collaborative use cases into account, with endpoints such as getManagersToNotifyForReservation and getManagersToDisplay. Under the hood, we query the source of truth for each collaborative hosting use case and aggregate the results. This API abstracts away the specifics of collaborative hosting while still providing product engineers with the information that they need.</p><p>When naming API endpoints, we aimed to explicitly state the endpoint’s goal to reduce the chances that an engineer might misuse an API response. For example, the endpoint that returns users to notify for a reservation is named getManagersToNotifyForReservation, instead of getReservationManagers, which could be mistaken for a permissions endpoint that fetches the list of users that can modify a reservation.</p><h4><strong>Collaborative Hosting Playbook</strong></h4><p>With our clear structure around how collaborative hosting works across use cases, we can establish concise steps for new product development within the existing framework.</p><p><strong>Introducing a New Type of Collaborative Hosting</strong></p><p>When a new collaborative hosting use case is introduced, integrating it into Airbnb requires just a few key changes to get most of the way there:</p><ul><li>Update/add your use case to the Himeji config for permissions</li><li>Update the resource &lt;&gt; user group association system to incorporate your use case</li><li>Update the collaborative hosting API endpoints to incorporate logic from your new use case when considering notifications or display</li></ul><p><strong>Introducing a New Airbnb Feature</strong></p><p>When a new Airbnb feature is introduced, launching it to all Hosts just requires a few steps. Let’s say that Airbnb is building NewProduct. NewProduct will introduce a new type of resource, belos. We would need to:</p><ul><li>Set up belo &lt;&gt; user group associations by adding belos to the user group &lt;&gt; resource association system</li><li>Use these belo &lt;&gt; user group associations to create a search index for belos so that we can fetch belos by user group ids</li><li>If needed, add a new endpoint for notifying and displaying users for belos</li></ul><h3>Conclusion</h3><p>Airbnb has developed a collaborative hosting infrastructure that supports all types of Hosts. This makes it much easier to build products, as engineers just need to know about one central framework that will cover all hosting use cases. Collaborative hosting is critical to the success of many Hosts on Airbnb. A seamless developer experience when building for all Hosts allows us to empower Hosts to deliver great stays to guests.</p><p>If this type of work interests you, check out some of our related positions:</p><ul><li><a href="https://careers.airbnb.com/positions/2921989/">Senior Android Software Engineer, Hosting</a></li><li><a href="https://careers.airbnb.com/positions/2809890/">Senior iOS Software Engineer, Hosting</a></li></ul><p>… and more at <a href="https://careers.airbnb.com/">Careers at Airbnb</a>!</p><h3>Acknowledgments</h3><p>Collaborative hosting is only possible as a result of the work of many incredible and mission-driven people over the years. Special thanks to Yi Lang Mok, Yan Li, Evelyn Shen, Amy Li, Aaron Holsonege, Eric Guan, Sujith Vishwajith, Alan Yao, JD Jiang, Brian Mason, Peggy Zheng, Chuan Shi, Dorothy Chang, Sharlene Luo, Jingyi Ni, Matias Figueroa, Charlie Jiang, Sushu Zhang, Ken Kao, Anna Majkowska, Jessica Tai, and many more.</p><p><em>All product names, logos, and brands are property of their respective owners. All company, product and service names used in this website are for identification purposes only. Use of these names, logos, and brands does not imply endorsement.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=edfb11d88575" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/how-airbnb-supports-co-hosting-edfb11d88575">How Airbnb Supports Co-Hosting</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Measuring Web Performance at Airbnb]]></title>
            <link>https://medium.com/airbnb-engineering/measuring-web-performance-at-airbnb-122da8d3ea3f?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/122da8d3ea3f</guid>
            <category><![CDATA[performance]]></category>
            <category><![CDATA[metrics]]></category>
            <category><![CDATA[web]]></category>
            <dc:creator><![CDATA[Joshua Nelson]]></dc:creator>
            <pubDate>Mon, 06 Dec 2021 19:05:21 GMT</pubDate>
            <atom:updated>2021-12-06T19:05:21.629Z</atom:updated>
            <content:encoded><![CDATA[<p>Learn what web performance metrics Airbnb tracks, how we measure them, and how we consider tradeoffs between them in practice.</p><p><a href="https://www.linkedin.com/in/joshua-nelson-%E2%9C%A8-a0156523/">Josh Nelson</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*-MyZDBHAWNSTbGXG" /></figure><p>How long did it take for this web page to load? It’s a common question industrywide, but is it the right one? Recently, there has been a shift from using single seconds-based metrics like “page load”, to metrics that paint a more holistic picture of performance, representing the experience from a website user’s perspective. At Airbnb, measuring the web performance that our guests and hosts actually experience is critical. Previously, we described how Airbnb <a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936">created a Page Performance Score</a> to combine multiple metrics from real users into a single score. In this blog post, we describe the metrics that we consider important on our website and how they relate to industry standards. We also discuss some case studies that moved these metrics, and how they impacted the experience of website visitors.</p><h3>Web Performance Metrics</h3><p>There are five key performance metrics that we measure on our website. We chose these metrics because they represent performance as our users experience it, and because their definitions are <a href="https://chromium.googlesource.com/chromium/src/+/lkgr/docs/speed/good_toplevel_metrics.md">simple, interpretable, and performant to compute</a>.</p><p>We record these metrics both for direct requests to the site, as well as for client side transition requests between pages (Airbnb uses a <a href="https://developer.mozilla.org/en-US/docs/Glossary/SPA">single page app</a> architecture). We will give an overview of these metrics, how we instrument them, and their relative weightings in our overall <a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936">Page Performance Score</a>.</p><h4>Time To First Contentful Paint</h4><p>Time To First Contentful Paint (<a href="https://web.dev/fcp/">TTFCP</a>) measures the time between the start of navigation and the time at which <strong>anything appears on the screen</strong>. This could be text, a loading spinner, or any visual confirmation to the user that the website has received their request. We use the <a href="https://web.dev/fcp/#measure-fcp-in-javascript">paint timing API</a> for direct requests. For client routed transitions, we have written our own instrumentation that is triggered when a page transition begins:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/f21f47811c0c74642bf2bfba14f1aa4e/href">https://medium.com/media/f21f47811c0c74642bf2bfba14f1aa4e/href</a></iframe><h4>Time To First Meaningful Paint</h4><p>Time To First Meaningful Paint (TTFMP) measures the time from the start of navigation to the point at which <strong>the most meaningful element appears on the screen</strong>. This is usually the page’s largest image or highest heading. This indicates to a user that useful information has arrived and that they can start consuming the page’s content.</p><p>To instrument TTFMP, product engineers tag their page’s meaningful element with an id — we call this the FMP target. We then recursively search for a page’s FMP target.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/d246dde34f9e5ed3b89dd476cd04f0d9/href">https://medium.com/media/d246dde34f9e5ed3b89dd476cd04f0d9/href</a></iframe><p>It’s important to note this metric requires <em>manual instrumentation</em> by our product engineers — every page must include a “FMP-target”, or we’ll never record the first meaningful paint milestone. To ensure that each page instruments TTFMP correctly, we report on how often this element is found on a given page. If it is found less than 80% of the time due either to lack of instrumentation or to conditional rendering of the FMP target, we trigger alerts to warn that the metric is not valid for that page. This requires developers to keep the TTFMP instrumentation up to date through page redesigns, refactors, and A/B tests.</p><p>Instrumenting TTFMP automatically is difficult because it is hard to systematically know what element is the most “meaningful” on the page. <a href="https://web.dev/lcp/">Largest Contentful Paint</a> addresses this by measuring the largest element on the page. We do not use Largest Contentful Paint because the <a href="https://developer.mozilla.org/en-US/docs/Web/API/LargestContentfulPaint">browser API</a> for this metric only returns the paint timing for initial load and is not available for client transitions in our single page app. If Largest Contentful Paint could be reset and used for client-side routed transitions too, we would use Largest Contentful Paint as a default that requires no manual instrumentation.</p><h4>First Input Delay</h4><p>First Input Delay (<a href="https://web.dev/fid/">FID</a>) measures the time it takes for the browser to <strong>start responding to user interaction</strong>. A low FID signals to the user that the page is usable and responsive. Conversely, anything over 50ms is a <a href="https://developer.mozilla.org/en-US/docs/Web/Performance/How_long_is_too_long">perceptible delay to a user</a>. To support client transitions, we forked the <a href="https://github.com/GoogleChrome/web-vitals">first-input-delay</a> instrumentation from web-vitals to reset the observation of the input delay.</p><h4>Total Blocking Time</h4><p>Total Blocking Time (<a href="https://web.dev/tbt/">TBT</a>) measures the total sum of time for which <strong>the main thread is “blocked”</strong>. When TBT is high, the page may freeze or stop responding when scrolling or interacting, and animations may be less smooth<strong>. </strong>Tasks that take longer than 50ms are considered “<a href="https://w3c.github.io/longtasks/">long tasks</a>” and contribute to TBT.</p><p>One difficulty with using TBT is that it can be hard to attribute blocking to specific components or sections on our pages. For this reason, we have created a sub-metric we call <em>interactivity spans, </em>which captures blocking time that occurs within a specified window.</p><p>While we report the <em>total</em> blocking time, we know that <em>not all blocking time is equal</em> — time spent blocking user interaction is worse than idle blocking time. Another drawback is that blocking time accumulates indefinitely over the course of the page, which makes the metric hard to collect synthetically, and impacted by session length. We’re investigating how to attribute specific blocking times to user interaction, and will follow the direction of the <a href="https://web.dev/smoothness/">animation smoothness metrics</a> in the web vitals initiative.</p><p>TBT is <a href="https://developer.mozilla.org/en-US/docs/Web/API/Long_Tasks_API#performancelongtasktiming">currently only available in Chromium-based browsers</a>, and there is no polyfill available. In these cases, we do not report TBT — however, we have found that even with limited browser support, TBT is a useful measurement of post-load performance.</p><h4>Cumulative Layout Shift</h4><p>Cumulative Layout Shift (<a href="https://web.dev/cls/">CLS</a>) measures the layout instability that occurs during a page session, weighted both by the size and distance of the element shift. A low CLS indicates to the user that the page is <strong>predictable</strong> and gives them confidence to continue interacting with it.</p><p>CLS is also <a href="https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift#browser_compatibility">not available</a> in every browser we support. While there is no polyfill available, we do not report any value for CLS in those browsers. Similar to TBT, we find even partial browser coverage to be useful, as a shift in Browser A likely also occurs in Browser B.</p><h3>Web Page Performance Score</h3><p>We combine these scores using the Page Performance Score (PPS) system, described in the <a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936">previous post in this series</a>. PPS combines input metrics into a 0–100 score that we use for goal setting and regression detection.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*3bNL6_zkmtI26zDy" /><figcaption><em>A diagram of the relative weightings of input metrics to the PPS score for a given page. </em><a href="https://web.dev/fcp/"><em>TTFCP</em></a><em>: 35%, </em><a href="https://web.dev/fid/">FID</a><em>: 30%, TTFMP: 15%, </em><a href="https://web.dev/tbt/"><em>TBT</em></a><em>: 15%, </em><a href="https://web.dev/cls/"><em>CLS</em></a><em>: 5%</em></figcaption></figure><h3>Web Vitals and Lighthouse</h3><p><a href="https://github.com/GoogleChrome/web-vitals">Web Vitals</a> and <a href="https://developers.google.com/web/tools/lighthouse">Lighthouse</a> are large sources of inspiration and research for our implementation of PPS on the web.</p><p>Lighthouse is a tool that rates a web page by running synthetic tests, auditing, and scoring the page. However, Lighthouse runs these tests synthetically, while PPS scores pages according to real user metrics. Lighthouse is a powerful diagnostic tool, while PPS lets us use real user metrics for goal setting and regression detection.</p><p>Web Vitals is a library that measures real user metrics, similar to PPS. However, it does not include a numerical scoring system similar to PPS or Lighthouse, and it does not yet account for client transitions inside a Single Page Application. We do make use of web vitals by including and prioritizing similar metrics to ensure that the direction of PPS and Web Vitals are aligned.</p><h3>Early Flush Case Study</h3><p>When making changes to improve performance, we often run A/B tests to gather data on how successful our improvements were. Ideally, we would strictly improve performance by improving one or more of the metrics described previously. However, we sometimes see examples where one metric has improved at the expense of another. The PPS system streamlines decision making when considering tradeoffs.</p><p>As an example, on pages that have dynamic content (such as our listing pages), we previously CDN cached a generic version of the page that contained a loading state, leading to a fast TTFCP. We then ran an experiment to flush HTML content from the server early and skip this initial loading state.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*bXFjV4d-JKnNmRFa6gK0_Q.png" /><figcaption><em>Left: Before, CDN cached — shimmering skeleton loading state. Right: After, Early flushed page, including the first meaningful paint image.</em></figcaption></figure><p>The result of this experiment was a slower TTFCP without the CDN, but a faster TTFMP because we skip the initial loading state. Though we weight TTFCP higher than TTFMP, we found that the magnitude of improvement in TTFMP outweighed the regression in TTFCP and shipped the change. This type of decision is simple to make when we have a Web Page Performance Score to help us consistently evaluate tradeoffs.</p><h3>Summary</h3><p>We have seen through experimentation that these metrics correlate with positive user experience changes. Web PPS gives us a single score we can use for goal setting and regression detection, while also capturing many different aspects of user experience: paint timings, interactivity and layout stability. We hope that Web PPS can be used as a reference for implementing similar systems outside of Airbnb.</p><p>Our deepest thanks go out to our industry colleagues working on performance — as the industry evolves Web PPS will also evolve.</p><p>Thanks to <a href="https://www.linkedin.com/in/lupinglin/">Luping Lin</a>, Victor Lin, <a href="https://www.linkedin.com/in/gabe-lyons-9a574543/">Gabe Lyons</a>, <a href="https://www.linkedin.com/in/nickbryanmiller/">Nick Miller</a>, <a href="https://www.linkedin.com/in/hdezninirola/">Antonio Niñirola</a>, <a href="https://www.linkedin.com/in/adityapunjani/">Aditya Punjani</a>, <a href="https://www.linkedin.com/in/guy-rittger-%E2%93%A5-1355b4/">Guy Rittger</a>, <a href="https://www.linkedin.com/in/scheuermann/">Andrew Scheuermann</a>, <a href="https://www.linkedin.com/in/jnvollmer/">Jean-Nicolas Vollmer</a>, and <a href="https://www.linkedin.com/in/xiaokangxin/">Xiaokang Xin</a> for their contributions to this article and to PPS.</p><p><em>All product names, logos, and brands are property of their respective owners. All company, product and service names used in this website are for identification purposes only. Use of these names, logos, and brands does not imply endorsement.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=122da8d3ea3f" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/measuring-web-performance-at-airbnb-122da8d3ea3f">Measuring Web Performance at Airbnb</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
    </channel>
</rss>