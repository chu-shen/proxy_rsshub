<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:cc="http://cyber.law.harvard.edu/rss/creativeCommonsRssModule.html">
    <channel>
        <title><![CDATA[The Airbnb Tech Blog - Medium]]></title>
        <description><![CDATA[Creative engineers and data scientists building a world where you can belong anywhere. http://airbnb.io - Medium]]></description>
        <link>https://medium.com/airbnb-engineering?source=rss----53c7c27702d5---4</link>
        <image>
            <url>https://cdn-images-1.medium.com/proxy/1*TGH72Nnw24QL3iV9IOm4VA.png</url>
            <title>The Airbnb Tech Blog - Medium</title>
            <link>https://medium.com/airbnb-engineering?source=rss----53c7c27702d5---4</link>
        </image>
        <generator>Medium</generator>
        <lastBuildDate>Mon, 14 Feb 2022 16:19:36 GMT</lastBuildDate>
        <atom:link href="https://medium.com/feed/airbnb-engineering" rel="self" type="application/rss+xml"/>
        <webMaster><![CDATA[yourfriends@medium.com]]></webMaster>
        <atom:link href="http://medium.superfeedr.com" rel="hub"/>
        <item>
            <title><![CDATA[The Past, Present, and Future of react-dates]]></title>
            <link>https://medium.com/airbnb-engineering/the-past-present-and-future-of-react-dates-b351ab739d3f?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/b351ab739d3f</guid>
            <category><![CDATA[open-source]]></category>
            <category><![CDATA[frontend]]></category>
            <category><![CDATA[front-end-development]]></category>
            <category><![CDATA[react]]></category>
            <category><![CDATA[javascript]]></category>
            <dc:creator><![CDATA[Diane Ko]]></dc:creator>
            <pubDate>Fri, 21 Jan 2022 17:45:50 GMT</pubDate>
            <atom:updated>2022-01-24T22:44:18.497Z</atom:updated>
            <content:encoded><![CDATA[<p><a href="https://www.linkedin.com/in/kodiane/">Diane Ko</a></p><figure><img alt="Silhouettes of two people in front of the inside of a large, clear clock overlooking a city." src="https://cdn-images-1.medium.com/max/1024/1*VymqCVttV2_VOqmmApgakw.jpeg" /></figure><p>In 2016, Airbnb released react-dates, a React date picker component library. The <a href="https://github.com/airbnb/react-dates/stargazers">project has amassed more than 11,000 stars</a>. GitHub also tells us that <a href="https://github.com/airbnb/react-dates/network/dependents">react-dates is used by over 30,000 repos</a>.</p><p>In more recent years, Airbnb’s requirements for a date picker have changed in a way that has diverged from react-dates. If we were to have made those changes to the library, it would have severely limited the flexibility of the library, one of its key features. To better support the react-dates community, we’ve made the decision to transfer ownership of the react-dates repo to a new <a href="https://github.com/react-dates">react-dates GitHub organization</a>. We believe this new home will better serve the community and continue to evolve the original goals of react-dates.</p><p>If you want to help react-dates grow, please check out the <a href="https://github.com/airbnb/react-dates/issues">open issues</a> and <a href="https://github.com/airbnb/react-dates/pulls">pull requests</a> — the <a href="https://github.com/airbnb/react-dates/labels/pull%20request%20wanted">“pull request wanted” tag</a> is a great starting point.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=b351ab739d3f" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/the-past-present-and-future-of-react-dates-b351ab739d3f">The Past, Present, and Future of react-dates</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Intelligent Automation Platform: Empowering Conversational AI and Beyond at Airbnb]]></title>
            <link>https://medium.com/airbnb-engineering/intelligent-automation-platform-empowering-conversational-ai-and-beyond-at-airbnb-869c44833ff2?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/869c44833ff2</guid>
            <category><![CDATA[engineering]]></category>
            <category><![CDATA[ai]]></category>
            <category><![CDATA[automation]]></category>
            <category><![CDATA[chatbots]]></category>
            <category><![CDATA[customer-support]]></category>
            <dc:creator><![CDATA[Zhiheng Xu]]></dc:creator>
            <pubDate>Tue, 11 Jan 2022 18:10:01 GMT</pubDate>
            <atom:updated>2022-01-11T21:19:55.329Z</atom:updated>
            <content:encoded><![CDATA[<p>How Intelligent Automation Platform supports conversational AI and agent-automation to improve the Airbnb customer experience</p><p>By <a href="https://www.linkedin.com/in/zhiheng-xu-50249b31/">Zhiheng Xu</a>, <a href="https://www.linkedin.com/in/yi-alex-zhou-1284651b/">Alex Zhou</a>, <a href="https://www.linkedin.com/in/chutianwang/">Jeremy Wang</a>, <a href="https://www.linkedin.com/in/zecheng-xu-11bb778a/">Zecheng Xu</a>, <a href="https://www.linkedin.com/in/ziyi-wang-6651b5b1/">Ziyi Wang</a>, <a href="https://www.linkedin.com/in/jiayu-lou-337ba785/">Jiayu Lou</a>, <a href="https://www.linkedin.com/in/liuming-zhang-4b120894/">Liuming Zhang</a>, <a href="https://www.linkedin.com/in/fengjian-pan/">Gary Pan</a>, Jeffrey Zhao, Yisong Wang, <a href="https://www.linkedin.com/in/priyanksinghal/">Priyank Singhal</a>, <a href="https://www.linkedin.com/in/clairexiong/">Claire Xiong</a>, <a href="https://medium.com/@waynezhang511">Wayne Zhang</a>, <a href="https://www.linkedin.com/in/benmatata2020/">Ben Ma</a>, <a href="https://www.linkedin.com/in/hao-wang-2661553/">Hao Wang</a>, Carter Appleton, Anthony Clifton</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*-OP5Y1xe4uxuNzvn" /></figure><p>With the rapid development of Machine Learning and Natural Language Processing technologies, conversational AI has attracted huge attention in recent years. More and more conversational AI applications such as virtual assistants, smart speakers, and customer support chatbots have been developed to help people in their daily lives.</p><p>At Airbnb, we have developed multiple conversational AI products to enhance our host and guest experience. Examples include our <a href="https://medium.com/airbnb-engineering/using-chatbots-to-provide-faster-covid-19-community-support-567c97c5c1c9">chatbot systems</a>, which support users through in-app messaging or automated phone calls, our <a href="https://medium.com/airbnb-engineering/task-oriented-conversational-ai-in-airbnb-customer-support-5ebf49169eaa">task-oriented ML framework</a> for issue detection and automatic problem solving, and various on-trip support products to proactively help guests improve their experience while they are on trip.</p><p>In this blog post, we introduce the <strong><em>Intelligent Automation Platform</em></strong> (AP), a generic enterprise-level platform developed by Airbnb to support a suite of conversational AI products. From this point forward, the Intelligent Automation Platform will be referenced as “AP”.</p><p>By modeling Conversational AI products as <a href="https://en.wikipedia.org/wiki/Markov_decision_process">Markov Decision Process</a> (MDP) workflows, AP provides a unified representation of workflows and actions to facilitate workflow consolidation and action reusability. Additionally, the platform offers a GUI development tool to enable drag-and-drop workflow creation, facilitate fast iteration of products, and empower non-technical teams to build conversational AI products.</p><h3><strong>1. Platform Architecture</strong></h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*UIcZmMClcOTgHDDW" /><figcaption>Figure 1: AP Architecture</figcaption></figure><p>Figure 1 shows the high-level architecture of AP, which consists of 4 main components:</p><ol><li><strong>Event Orchestrator</strong>, the event orchestration layer of the platform. It translates input/output messages between clients and Workflow Engine, to ensure that workflows on AP can be built and executed in a generic way.</li><li><strong>Workflow Engine</strong>, the “brain” of the platform. It is responsible for managing and executing all the workflows powered by the platform.</li><li><strong>Action Store</strong>, the action execution engine of the platform. It supports action requests during workflow execution. Action Store is an open platform for developers to create new actions or reuse existing ones. By using actions in the Action Store, we standardize task execution based on different systems and backends, and ensure consistent user experience across different products.</li><li><strong>Flow Builder</strong>, the workflow creation GUI tool of the platform. It’s a collaborative, drag-and-drop interface that simplifies creation and management of workflows. The output of Flow Builder are workflows that can be loaded and executed by Workflow Engine.</li></ol><p>Figure 2 shows an example of a demo “Q &amp; A” workflow on AP. The demo workflow, configured via Flow Builder, can answer users’ questions from different channels (such as messaging or phone).</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*FnBOBUiWhA2gjW8t" /><figcaption>Figure 2: A Demo Q&amp;A Workflow on AP</figcaption></figure><p>When the platform receives a request for the “Q &amp; A” workflow, it triggers:</p><ol><li>Event Orchestrator to normalize the request and find the corresponding workflow session if it exists (a workflow session is a single instance of the workflow), and then forward the request to Workflow Engine.</li><li>Workflow Engine to restore the previous state of the workflow or create a new one from the start node (state), and then execute the workflow: a) Execute the actions defined for the current workflow state. b) Move the workflow to the next state based on the action results or other conditions. c) Pause the workflow and wait for the next input if needed.</li><li>Action Store to execute all the actions required by Workflow Engine.</li></ol><h3>2. Key Components of Intelligent Automation Platform</h3><h4>2.1 Event Orchestrator</h4><p>One of the design principles of AP is to provide channel-agnostic problem solving capabilities (channels represent the source of requests, such as in-app chatbot or phone). Workflows and Actions are intended to be channel-agnostic, focusing on the core of the problem no matter which channel users choose to contact us via to resolve their issues.</p><p><strong><em>Event Orchestrator</em></strong> is the event orchestration layer of AP. It normalizes the input and output of the platform to ensure that conversational workflows can be built and executed in a channel-agnostic way. Figure 3 provides the architecture of Event Orchestrator, which contains 3 layers: orchestration layer, context data layer, and workflow request layer.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*B_Xp_EsngxICFpgh" /><figcaption>Figure 3: Event Orchestrator Architecture</figcaption></figure><p>The orchestration layer handles all the requests and responses. It currently supports 3 types of input:</p><ol><li><strong>Channel message</strong>. These are messages delivered from different channels, such as phone, email or in-app messaging.</li><li><strong>Async events</strong>. These are async events (such as <a href="https://kafka.apache.org/intro">Kafka</a> events) generated by different Airbnb internal systems, like cancellation events.</li><li><strong>Internal service requests</strong>. Event Orchestrator also provides a few endpoints to handle workflow requests from other Airbnb internal services directly.</li></ol><p>Context data layer stores all contextual information related to the platform requests. Before creating a workflow request to the <em>Workflow Engine</em>, context data layer: a) Identifies whether the request is about a new workflow session or an existing one, by looking up the session mapping tables. b) Restores critical contextual information for workflow execution by reading from session data tables.</p><p>Workflow request layer prepares the request to <em>Workflow Engine</em> for workflow execution and processes the response from <em>Workflow Engine</em>. It makes sure that platform requests from different sources are converted into the same Workflow Engine requests so that <em>Workflow Engine</em> can handle all workflows in a generic way.</p><h4>2.2 Workflow Engine</h4><p><strong><em>Workflow Engine</em></strong> is the “brain” of AP, responsible for executing and monitoring all the workflows powered by the platform.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*KCemaFJ_3_SHp3s5" /><figcaption>Figure 4: Workflow Engine Architecture</figcaption></figure><p>Figure 4 shows the overall architecture of Workflow Engine, which consists of 4 main components:</p><ol><li><strong>Session Manager</strong>. Session Manager manages the lifecycle of entire workflow execution. After receiving a workflow execution request, it will restore the previous state of the workflow (if a workflow is resumed) or create a new workflow from the start state (if a new workflow is created). When workflow needs to pause and wait for user response, Session Manager will store the current state and all workflow variables into the database, to be restored by the next request of the same session.</li><li><strong>Schema Loader</strong>. Schema Loader loads the workflow schema generated by <em>Flow Builder</em>, the workflow creation UI tool of AP. A workflow schema is a JSON schema file automatically generated by <em>Flow Builder </em>(see more details in the <em>Flow Builder</em> section).</li><li><strong>Workflow Executor</strong>. Workflow Executor executes the workflow based on the workflow schema, starting from the current state of the workflow. It processes the action defined in the current state by sending a request to the <em>Action Store</em>, handles the response, and saves the variables to the Variable Manager. After that, it moves the workflow to the next state according to the transition conditions and starts processing the next workflow state. The Workflow Executor will keep repeating the process until the workflow needs to be paused (and waiting for user response), or until it reaches the end of the workflow.</li><li><strong>Variable Manager</strong>. Variables are the data supporting workflow execution. Variable Manager manages all the variables and is accessible by Workflow Executor to read and update variables during workflow execution.</li></ol><h4>2.3 Action Store</h4><p><strong><em>Action Store</em></strong> is the action execution engine of AP, supporting action execution requests from <em>Workflow Engine</em>. It is also an open platform for developers to create new actions or reuse existing ones. All actions in the Action Store are available on <em>Flow Builder</em> for creating workflows.</p><p>As shown in figure 5, all actions in the Action Store implement a common interface, so that they can be processed in the same way during action execution (by <em>Workflow Engine</em>) and workflow creation (by <em>Flow Builder</em>). An action can be as simple as fetching a user’s reservation data or as complicated as issue prediction, which might involve multiple machine learning models and feature generation pipelines.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*mGHSc3l3YH9cd9GJ" /><figcaption>Figure 5: Action Interface</figcaption></figure><p>Figure 6 shows the high level Architecture of Action Store, which contains 3 main components:</p><ol><li><strong>Action Executor</strong>. Action Executor supports action execution requests. When receiving a request, Action Executor will load the action implementation from Action Manager based on the action type and invoke the execution function defined in the implementation. Many actions rely on external services to finish the execution, and the Action Executor will be responsible for sending those external requests and processing the response.</li><li><strong>ActionInfo Handler</strong>. ActionInfo Handler supports <em>Flow Builder</em> for workflow creation by serializing all the action information (e.g., metadata, payload, results, etc.) to <em>Flow Builder</em> to render the actions on the UI and support action configuration when creating workflows. More details are available in the <em>Flow Builder</em> section.</li><li><strong>Action Manager</strong>. Action Manager registers and manages all the actions created in the Action Store. It provides action implementation to Action Executor and ActionInfo Handler based on the action type.</li></ol><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*0upy1aVoDkIG8tVJ" /><figcaption>Figure 6: Action Store Architecture</figcaption></figure><h4>2.4 Flow Builder</h4><p><strong><em>Flow Builder</em></strong> is the workflow creation UI tool of AP, supporting drag-and-drop workflow creation. It integrates with <em>Action Store</em> to retrieve all action information and sends the generated workflow schema to <em>Workflow Engine</em> during workflow execution.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*I0WVsWNOe_UV_C1f" /><figcaption>Figure 7: Flow Builder UI (Action Configuration)</figcaption></figure><p>Figure 7 illustrates the UI of Flow Builder when configuring actions in workflow. On the left is the Action Panel, which lists all available actions in the <em>Action Store</em> and supports searching by action name or description. Workflow creators can drag and drop any actions in the workflow panel and then configure the action payload by clicking the action node.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*9_Fdqmq1D3vyGtLA" /><figcaption>Figure 8: Flow Builder UI (Configure the Workflow Graph)</figcaption></figure><p>Figure 8 shows the UI when configuring the workflow graph. Workflow creators can create transitions between workflow nodes (each node can be viewed as a step or state of the workflow) by creating links between nodes and configuring the transition conditions. After all the workflow nodes and links are configured, the workflow is ready to be tested and published.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*5cY6rYs24KtGgbda" /><figcaption>Figure 9: Flow Builder Architecture</figcaption></figure><p>Figure 9 is the high level architecture of Flow Builder. It contains two major components:</p><ol><li>The frontend layer, which is built with a third-party library <a href="https://github.com/projectstorm/react-diagrams">React-diagrams</a>, supports the UI and all operations on the UI.</li><li>The backend layer, Workflow Management service, which is responsible for: a) Getting all action information from the <em>Action Store</em> and passing to the frontend layer. b) Generating workflow schema that can be executed by <em>Workflow Engine</em> from the configured workflow graph on the UI. c) Serving the workflow schema to <em>Workflow Engine</em> during workflow execution.</li></ol><p>Figure 10 gives an example of an auto-generated workflow schema that can be executed by <em>Workflow Engine</em>.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*h451jjvwaI49jZTduC8Nwg.png" /><figcaption>Figure 10: Example of Auto Generated Workflow Schema</figcaption></figure><h3>3. Conclusion</h3><p>In this post, we introduced our Intelligent Automation Platform, a generic and business friendly enterprise platform to support a suite of conversational AI products at Airbnb including chatbots for customers, on-trip support products, and agent automations. With Intelligent Automation Platform, we can simplify and speed up conversational AI product development, democratize AI technology to business teams, and scale up more and more intelligent solutions to improve the Airbnb customer experience.</p><h3>Acknowledgements</h3><p>Thanks to Danny Deng, Xirui Liu, Zixuan Yang, Xiang Lan, Keyao Yang, Changhui Liu, Wenbin Zhang, Hengyu Zhou, Stephanie Pang, Jack Chen, Bart Bu, Carter Appleton, Shahaf Abileah, Mariel Young, Shuo Zhang, Wei Ji, Jiayu Liu, Kevin Jungmeisteris, Pratik Shah, Xiaoyu Meng, Michael Zhou, Haoran Zhu, Jon Sandness and Conor D’Arcy for the product collaborations.</p><p>Thanks to Tina Su, Andy Yasutake, Joy Zhang, Raj Rajagopal, Navjot Sidhu, James Eby and Julian Warszawski’s leadership support for the Intelligent Automation Platform.</p><p><em>Interested in working at Airbnb? Check out these roles:</em></p><p><a href="https://grnh.se/7de3db391us">Staff Software Engineer, CSP — Contact Solutions</a></p><p><a href="https://grnh.se/29257d691us">Senior Software Engineer, Community Support Platform</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=869c44833ff2" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/intelligent-automation-platform-empowering-conversational-ai-and-beyond-at-airbnb-869c44833ff2">Intelligent Automation Platform: Empowering Conversational AI and Beyond at Airbnb</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Airbnb’s Page Performance Score on Android]]></title>
            <link>https://medium.com/airbnb-engineering/airbnbs-page-performance-score-on-android-f9fd5e733e?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/f9fd5e733e</guid>
            <category><![CDATA[android-performance]]></category>
            <category><![CDATA[mobile-app-development]]></category>
            <category><![CDATA[software-development]]></category>
            <category><![CDATA[android]]></category>
            <dc:creator><![CDATA[Luping Lin]]></dc:creator>
            <pubDate>Fri, 17 Dec 2021 21:06:55 GMT</pubDate>
            <atom:updated>2021-12-17T21:06:55.251Z</atom:updated>
            <content:encoded><![CDATA[<p><em>Part 4 of our series on </em><a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936"><em>Airbnb’s Page Performance Score</em></a>.</p><p><a href="https://www.linkedin.com/in/lupinglin/">Luping Lin</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*jv0-M5bsGxi2bcXb" /></figure><p>Airbnb’s home grown <a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936">Page Performance Score</a> (PPS) is designed to capture the rich, complex realities of performance by collecting a multitude of user-centric performance metrics and formulating them into one single 0-100 score. In this post we will deep dive into how we define and implement these metrics on Android. Make sure you read the <a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936">overview blog post</a> first to familiarize yourself with our PPS metrics and formula.</p><h3>Instrumentation</h3><h4>Universal Page Tracking System</h4><p>The entire customer journey on Airbnb is divided into different pages, each of which has its own measured PPS. In order to support this page-based performance tracking system, we built a standardized infrastructure that enables engineers to configure pages representing their features.</p><p>On Android a page is associated with a <em>Fragment</em>. Each fragment must provide a <em>LoggingConfig</em> object specifying a page name, which can later be retrieved whenever the page name needs to be referenced. We collect performance data throughout the fragment’s lifecycle, and only emit the logging event when the fragment is paused.</p><p>A universal <em>PageName</em> enum is used to uniquely identify each page, and is referenced across all platforms to consistently represent each page in our user journey.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/f32323e5d2deb216aa9f32f7949a1958/href">https://medium.com/media/f32323e5d2deb216aa9f32f7949a1958/href</a></iframe><h4>Capturing Wait Time Perceived by Users</h4><p>A key differentiator of our new Page Performance Score (PPS) is that it measures wait time that users can see. While our early measurement effort (mentioned in our <a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936">overview blog post</a>), which was based on the commonly known <a href="https://web.dev/interactive/">Time To Interactive</a> (TTI) metric, measures code execution time and length of asynchronous calls. For example, PPS measures how long a user sees the loading indicators on screen, while TTI measures how long it takes for a network request to return results and how long it takes to build the view models. We believe PPS more closely reflects performance experienced by our users.</p><p>In order to capture visually perceived wait time, we needed all views with a loading state to implement an API that reports their loading state changes. We created a simple interface called <em>LoadableView</em>.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/04447f5c61f6521ef61e07add16903f4/href">https://medium.com/media/04447f5c61f6521ef61e07add16903f4/href</a></iframe><p>We provide primitives such as a base <em>ViewGroup</em>, a base <em>TextView</em>, and a base <em>ImageView,</em> all of which implement the <em>LoadableView</em> interface. Our developers simply need to inherit from these primitives for their views to be automatically instrumented.</p><p>One challenge was that we needed to keep track of a view’s visibility because if a view is not at least 10% visible on the screen we don’t want to include its loading time in our measurement. The computation of the percentage of visibility of every view is both frequent and recursive. Furthermore, most of our views are in a <em>RecyclerView</em> and we must ensure their visibility is updated correctly on each scroll event, while keeping the <em>RecyclerView</em> performant. We devised algorithms to reduce the frequency and complexity of these calculations, including caching the visibility states within the <em>RecyclerView</em>.</p><h3>Metric Implementation</h3><h4>Time to First Layout (TTFL)</h4><p>TTFL measures how long a user has to wait before seeing <em>any</em> content on the screen. TTFL starts at fragment initialization and ends at the first <em>onGlobalLayout </em>event after the fragment is laid out, at which point the system has finished inflating, measuring, and laying out the fragment’s view hierarchy.</p><p>A slow TTFL often indicates that the fragment’s view hierarchy is overly complicated, or the UI thread is preoccupied with unnecessary tasks during fragment initialization.</p><h4>Time to Initial Load (TTIL)</h4><p>TTIL measures how long a user sees loading indicators (excluding media loading which is measured separately) before meaningful content is displayed on screen. TTIL starts at fragment initialization like TTFL, and ends when no more views on screen are in a loading state. If a screen (Fragment) is static or cached we don’t show a loading indicator. In that scenario TTIL would be the same as TTFL.</p><p>A slow TTIL often reveals opportunities in improving network latency or client rendering time. For network latency we look for slow backend services, large payloads, unutilized cache, or a less optimized data parser. For rendering time we try to follow best practices in using the RecyclerView, avoid doing heavy or recursive computation when building view models, and reduce over drawing, etc.</p><p>As mentioned above, views with a loading state can inherit from base primitives with built-in <em>LoadableView</em> implementations. The API automatically reports the view’s loading state changes to our logging framework. We use a simple counter that increments when a view enters loading state and decrements when the data is loaded. When the counter is 0, we know that there are no more loading views on screen.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/46ba94e7102640cf23a74c52146e8368/href">https://medium.com/media/46ba94e7102640cf23a74c52146e8368/href</a></iframe><p><em>This GIF demonstrates TTFL (marked when the gray background with the Airbnb logo is shown) and TTIL (marked when the loading dots are replaced by meaningful content).</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/0*53ZcfBamEiTotrgi" /></figure><h4>Main Thread Hangs (MTH)</h4><p>Users experience screen freezes, lags, and stutters when ui frames take too long to render. Each android device has a target frame refresh rate based on the device’s capacity. However when the main thread is too busy, the device renders slower than the frame rate it’s capable of. We define a MTH as whenever any frame takes more than twice the system’s frame refresh rate to render.</p><p>Frequent MTHs indicate that the main thread might be overloaded. Heavy operations or computations should be moved off the UI thread or delayed until contents are rendered.</p><p>MTH is calculated using <a href="https://developer.android.com/reference/android/view/FrameMetrics">FrameMetrics</a> reported by the Android system. We obtain the frame refresh rate from the system and use it to calculate the threshold for the thread hangs. We then listen for system callbacks to receive <a href="https://developer.android.com/reference/android/view/FrameMetrics">FrameMetrics</a>, if the frame duration is above our threshold, we record the delta <em>(frameDuration - hangThreshold)</em> as a hang.</p><h4>Additional Load Time (ALT)</h4><p>ALT measures any wait time that occurs after the initial load, such as waiting for list paginations or for content to be updated after a Save button is pressed. ALT starts whenever a view enters the loading state <em>after</em> TTIL has already been marked, and ends when no more loading views are shown. ALT can start and end multiple times, each time is recorded as a separate ALT.</p><p>Opportunities to improve ALT often lie in predicting and prefetching additional content. The overall PPS can also be improved by balancing how much content to load in initial load vs additional loads.</p><p><em>This GIF demonstrates ALT (marked when the loading indicator at the bottom is replaced by paginated content loaded from the network).</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/0*fptmsQJ6LfgBRQdS" /></figure><h4>Rich Content Load Time (RCLT)</h4><p>RCLT measures how long a user sees a placeholder or a loading indicator until an image, a video, or some rich media content is fully displayed. <em>ImageView</em> and other rich media containers implement the same <em>LoadableView</em> API to report loading state changes to the PPS logger.</p><p>To improve RCLT, we look to reduce image size, improve image caching, optimize image formats and serving, strategically schedule loading rich content that is not yet on screen, and select performant streaming libraries, etc.</p><p><em>This GIF demonstrates RCLT (marked when the place holders are replaced with actual images loaded from the network).</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/0*BtqfXhapm7jDuKL9" /></figure><h3>Conclusion</h3><p>We successfully built an instrumentation framework on Android to capture much richer and user-centric performance metrics, guided by the same design principles in <a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936"><em>Airbnb’s Page Performance Score</em></a> across web and native platforms. On top of this framework and the data collected, we built out dashboards to monitor performance across the entire app, set up automatic alerts targeting page owners, streamlined performance goal setting at team and org levels, and systematically tracked and mitigated performance regressions.</p><p>In 2022, we plan to improve the granularity and accuracy of our instrumentations such as measuring tap responsiveness, better differentiating performance during scrolling, and providing primitives with built-in performance optimizations. We will also devote resources to build tooling to improve debuggability, and enable early regression detection and prevention via synthetic testing.</p><p>PPS gives our engineers and data scientists better insights and more ways to improve our products. It also strengthens our <a href="https://medium.com/airbnb-engineering/commitment-to-craft-e36d5a8efe2a">Commitment to Craft</a> culture. We hope that you apply these learnings in your organization as well.</p><h4>Appreciations</h4><p>Thank you to everyone who has helped build PPS on Android: <a href="https://www.linkedin.com/in/eli-hart-54a4b975/">Eli Hart</a>, <a href="https://www.linkedin.com/in/charlesx2013/">Charles Xue</a>, <a href="https://www.linkedin.com/in/nickbryanmiller/">Nick Miller</a>, <a href="https://www.linkedin.com/in/scheuermann/">Andrew Scheuermann</a>, <a href="https://www.linkedin.com/in/hdezninirola/">Antonio Niñirola</a>, <a href="https://www.linkedin.com/search/results/all/?keywords=joshua%20nelson%20%E2%9C%A8&amp;origin=RICH_QUERY_SUGGESTION&amp;position=0&amp;searchId=959d4aca-c80e-448a-b415-4a732ba7a84d&amp;sid=Rr6">Josh Nelson</a>, <a href="https://www.linkedin.com/in/adityapunjani/">Aditya Punjani</a>, <a href="https://www.linkedin.com/in/joshpolsky/">Josh Polsky</a>, <a href="https://www.linkedin.com/in/jnvollmer/">Jean-Nicolas Vollmer</a>, <a href="https://www.linkedin.com/in/wensheng-mao-76ab7142/">Wensheng Mao</a> and everyone else who helped along the way.</p><p>Interested in working at Airbnb? Check out these roles:<br><a href="https://grnh.se/6c9839421us">Staff Android Engineer</a><br><a href="https://grnh.se/1e5c9bf51us">Senior Android Engineer</a> <br><a href="https://grnh.se/aa366a2e1us">Senior Android Engineer</a><br><a href="https://grnh.se/20c296251us">Android Engineer, Special Projects</a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f9fd5e733e" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/airbnbs-page-performance-score-on-android-f9fd5e733e">Airbnb’s Page Performance Score on Android</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Automating Data Protection at Scale, Part 3]]></title>
            <link>https://medium.com/airbnb-engineering/automating-data-protection-at-scale-part-3-34e592c45d46?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/34e592c45d46</guid>
            <category><![CDATA[software-development]]></category>
            <category><![CDATA[data]]></category>
            <category><![CDATA[classification]]></category>
            <category><![CDATA[security]]></category>
            <category><![CDATA[privacy]]></category>
            <dc:creator><![CDATA[elizabeth nammour]]></dc:creator>
            <pubDate>Thu, 16 Dec 2021 18:32:28 GMT</pubDate>
            <atom:updated>2021-12-16T18:32:28.101Z</atom:updated>
            <content:encoded><![CDATA[<p>Part three of a series on how we provide powerful, automated, and scalable data privacy and security engineering capabilities at Airbnb</p><p><a href="https://www.linkedin.com/in/elizabethnammour/">Elizabeth Nammour</a>, <a href="https://www.linkedin.com/in/pinyao-guo-6b621684/">Pinyao Guo</a>, Jamie Chong, <a href="https://www.linkedin.com/in/wendy-jing-jin-81452921/">Wendy Jin</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*opUbxGQ8bUEHduhi" /></figure><h3>Introduction</h3><p>In <a href="https://medium.com/airbnb-engineering/automating-data-protection-at-scale-part-1-c74909328e08">Part 1</a> and <a href="https://medium.com/airbnb-engineering/automating-data-protection-at-scale-part-2-c2b8d2068216">Part 2</a> of our blog series, we gave an overview of the Data Protection Platform (DPP). We focused on how we built a global understanding of Airbnb’s data and its associated security and privacy risks. In this blog post, we will describe how we use this understanding to provide powerful and automated security and privacy engineering capabilities and empower data governance. In order to reduce risk across the entire Airbnb organization, we sought to address the following concerns:</p><ul><li><strong>Accountability: </strong>Security and privacy compliance are not solely the responsibilities of security and privacy teams, but should be enabled across the Airbnb platform, development experience, product life cycles, and enterprise vendor solutions. As the volume of data grows and services become more complex, we need to hold the teams who control that data within Airbnb (“service owners”) accountable for the security and privacy of that data</li><li><strong>Minimal overhead: </strong>While service owners share the responsibility of reducing risks, we want to ensure we can automate the bulk of the work and minimize their operational load</li><li><strong>Global alignment: </strong>Not everyone has exactly the same understanding of data classification and protection strategies. We aim to reach a consensus among security, privacy, legal, and service owners and provide a single source of truth for privacy and security annotations and actions</li></ul><p>In the following sections, we’ll first share a deep dive into the Data Protection Service, which integrates all components of our DPP and enables us to define custom data protection jobs based on our findings. Then, we will demonstrate concrete use cases of how the DPP reduces security and privacy risks.</p><h3>Data Protection Service</h3><p>We built the Data Protection Service (DPS) to integrate all components of the DPP and automate security and privacy actions for stakeholders.</p><p>The DPS provides API endpoints to stakeholders or services outside the DPP, which allows them to query for privacy and security metadata stored in <a href="https://medium.com/airbnb-engineering/automating-data-protection-at-scale-part-1-c74909328e08">Madoka</a>. For example, we have an API endpoint that allows services to query for a list of data assets that contain any type of personal data. This enables downstream data services or pipelines to build their integrations.</p><p>The DPS also enables us to easily define custom “jobs” to automate specific steps, such as:</p><ul><li><strong>Creating JIRA notifications:</strong> In order to create JIRA tickets, the DPS uses an internal ticket generator that abstracts away the ticketing mechanisms and easily allows us to filter out any duplicate tickets. We just have to define a unique identifier for the findings so that no two tickets are filed for the same findings. JIRA is one of many ways to notify data owners. Slackbots, email notifications, and other internal vendor tools would also be feasible options.</li><li><strong>Generating pull requests (PRs):</strong> In order to create PRs in GitHub Enterprise (GHE), we created a wrapper around GHE’s APIs to easily clone a repo, create a PR, and get the status of a PR. Within each job, we implement the logic of how to modify the repo’s target files and add them to a PR.</li></ul><h3>Data Protection Annotation Validation</h3><p>To help us comply effectively and efficiently with data privacy laws, we need to know where personal data lives along with its lifecycle. We also need to protect data as it propagates across different data stores and services. To help achieve this goal, we define three levels of data classification annotations — critical, personal, public — and tag the data with the annotations.</p><p>At Airbnb, engineers and data scientists can define database-export pipelines to export online MySQL table snapshots to offline Hive tables for data analysis. We require owners to tag each table column with data classification annotations. Using these tags, we are able to segregate and further protect the most sensitive data categories with appropriate access controls and retention limits.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/608/1*2deebHEi0NYUvzwUL6yHBg.png" /><figcaption>Example of database exports definition</figcaption></figure><p>Service owners use an extension of Thrift Interface Description Language (IDL) to define data interfaces for inter-service communication. We require each field within an endpoint to be tagged with a data classification annotation, which is used to restrict service API access from high risk locations. Annotations are also used to help evaluate the security and privacy risks of a service. Below is an example of a Thrift IDL API definition.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*lgUJzzwvRbFvH8nq7RBvrg.png" /><figcaption>Example Service IDL API definition</figcaption></figure><p>However, annotations relying on human judgment are prone to errors. Service owners might misjudge or be unaware of the fields within their API or data column and annotate the data incorrectly. For this reason, we validate the correctness of data classification annotations.</p><h3>Database Exports Validation</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*IGOZi0b-6ytJGFM4" /><figcaption>Figure 1: Database Exports Data Classification Validation CI Check</figcaption></figure><p>To validate database-exports annotations, we created a CI check that leverages the DPS and runs whenever someone creates a database-exports PR.</p><p>For every column specified in the PR, the CI check does the following:</p><ol><li>Queries the DPS to determine what the privacy classification should be for that column. If the classification and the PR annotation don’t match, the CI check will fail.</li><li>Otherwise, we run an additional set of regexes to determine what the data classification annotation of that column should be set to. This is mainly useful for tables that don’t contain any data, or in the case of false negatives.</li><li>If both of these checks pass, then the CI check passes.</li></ol><p>The data warehouse also uses data classification results to validate annotations on already-checked-in database-export files. A daily job queries the DPS to fetch data classifications for all Hive tables. The job notifies service owners if the classifications and annotations don’t match. These incorrectly annotated tables will be automatically dropped if service owners do not take any actions.</p><h3>IDL Validation</h3><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*4GQjTy7YZ5GC99Sk" /><figcaption>Figure 2: Service API Interface Data Language Validation</figcaption></figure><p>We leverage the traffic-capturing feature from Airbnb services to get request and response pairs for IDL APIs. <a href="https://medium.com/airbnb-engineering/automating-data-protection-at-scale-part-2-c2b8d2068216">Inspekt</a> periodically sends requests to each service to obtain traffic samples. Inspekt then scans and classifies the traffic samples into data elements. Madoka then collects the scanning results from Inspekt and determines if there is any discrepancy between them and the annotation tags. The scanning result classification is determined by the highest sensitivity of all detected data elements. For instance, if the scanning result contains a bank account number (high) and a mailing address (medium), the final classification will be high. The discrepancy will be pinpointed to the specific field(s) within the IDL definition.</p><p>When a discrepancy is found, the DPS creates a JIRA ticket and opens a PR for the service owner to fix the IDL annotations. The DPS locates the inconsistent field within the IDL annotation file and uses the GHE client to find the relevant contributor of the code. Then, it opens a PR with suggested changes and links to the PR within the created JIRA ticket.</p><h3>Privacy Data Subject Rights Orchestration</h3><p>With the evolution of privacy laws such as with the <a href="https://gdpr-info.eu/">General Data Protection Regulation</a> and <a href="https://leginfo.legislature.ca.gov/faces/codes_displayText.xhtml?division=3.&amp;part=4.&amp;lawCode=CIV&amp;title=1.81.5">California Consumer Privacy Act</a>, individuals are able to exert more choice and control over how their personal data is collected, stored, and used. Certain data protection laws grant individuals specific data subject rights in relation to their personal data. These include “the right to be forgotten,” which gives a user the right to ask to have their personal data erased, and the right of access, which gives a user the right to know and obtain certain information about the data that an organization holds about them.</p><h4>Obliviate</h4><p>To help us comply effectively with these regulations, we built a Data Subjects Rights (DSR) orchestration service, called Obliviate, that helps coordinate and track DSR requests for erasure, access or portability from our users.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*d1DzGO0rY1A5SQsh" /><figcaption>Figure 3: Obliviate Workflow</figcaption></figure><p>When a consumer submits a DSR Erasure or Access and Portability request to Airbnb, that request gets forwarded to Obliviate. Obliviate propagates that request to downstream services by publishing it to a Kafka queue. Services that store and ‘own’ data at Airbnb are responsible for executing the DSR request by either deleting or fetching all of the personal data stored within their tables.</p><p>In order to streamline and simplify how data services interact with Obliviate, we built Obliviate clients to support all data services. The clients provide services with empty Thrift IDL schemas that need to be filled in, one for each DSR request — erasure, access, and portability. The service owner fills in each schema with all columns that the service ‘owns’ that contain personal data.</p><p>The clients also provide services with a common interface to implement, which contains several methods responsible for executing each DSR request given a user id. The client is responsible for abstracting away the rest of the logic (e.g initializing Kafka consumers and producers).</p><p>For each DSR request, the Obliviate service monitors and waits for a response from each data service integrated with the client and notifies compliance upon completion. If a data service hasn’t responded, the service allows for multiple retries until it completes.</p><h4>Automating Obliviate Integrations</h4><p>Even with abstracting away a lot of the logic with the client code, integrating with Obliviate still took a lot of engineering effort. Service owners had to manually sift through their data to determine the exact columns that store personal data, which is very time consuming. They also had to integrate the client code and its dependencies within their service, which can take some time to test and debug. In addition to being time consuming, relying on service owners to determine all personal data in their data stores could be subject to error, since they might overlook a column or not be sure what that column contains.</p><p>We decided to use the DPS to automate these integrations as much as possible. The automated integration runs as a daily job with the following steps:</p><ol><li>The DPS sends requests to Madoka and fetches the list of columns that contain personal data but have not been integrated with Obliviate yet, along with the service that owns each column.</li><li>The DPS creates a PR for each service in that mapping that both integrates the service with the Obliviate client code, along with its dependencies, if it hasn’t been integrated already and appends each column associated with that service to the Thrift structs.</li><li>The DPS creates a JIRA ticket that links to the PR and assigns it to the service owner.</li></ol><p>All the service owner has to do is implement the three methods in the interface described above by deleting or returning all rows associated with that user from the columns included in the Thrift structures.</p><h3>Eliminating Accidental Secret Leakage</h3><p>In our <a href="https://medium.com/airbnb-engineering/automating-data-protection-at-scale-part-2-c2b8d2068216">previous blog post</a>, we described how we built Angmar to detect business and infrastructure “secrets” in code and how Inspekt detects personal data and business or infrastructure secrets in data stores and service logs. The DPS enables automated notifications and actions based on these findings and metadata from other upstream services in the Data Protection Platform. Next, we’ll take a look at a few examples of how the DPS eliminates such potential leakages at Airbnb.</p><h4>“Secrets” in Data Stores and Logs</h4><p>Once an area of potential leakage is located, DPS automatically creates a security vulnerability ticket specifying the exact leakage point and assigns the ticket to the owner. Each ticket is filed with a tag that allows security operators to track the resolution of the ticket and collect metrics. After a detection of secrets in data stores and service logs, it is mandatory to find the proper service owner accountable for the detected records.</p><p>In the <a href="https://medium.com/airbnb-engineering/automating-data-protection-at-scale-part-1-c74909328e08">ownership section</a> of part 1 of our blog post, we described how Madoka service collects the service ownership property for our data assets. Once records are found, the DPS makes an API call to Madoka with the data asset metadata included within the detected record. For instance, for MySQL, the DPS sends a request to Madoka with the database cluster name and the table name within the call; for service logs, the DPS calls Madoka with the service name within the call. Madoka then responds with the corresponding team or individual “owner” of the assets.</p><p>To avoid further data leakage, tickets only contain data asset metadata instead of the detected data content. For instance, for detected records in service logs, we only record the service log code template that introduces the vulnerability and the secret type found during the scan in the ticket, but not the actual content. Once received by the owner, they are expected to discover the secret within their data stores and service logs.</p><p>A bottleneck we observed after rolling out the DPS is that generated ticket resolution still needs manual verification. That is, when a ticket is resolved by the owner, the security team needs to verify that either the leaked secrets are removed from the data stores and service logs or the logging template leading to the leakage is removed from source code. To further reduce the operational cost, we plan to create an automated verification solution in future that triggers a regression scan when owners resolve a secret leakage ticket. For instance, for a resolved secret logging ticket, the DPS can trigger a scan over affected source code and see if the previous logging template is removed. The DPS can also trigger a scan over the affected logging cluster and search for the leaked secret to ensure that the secret is safely removed.</p><h4>Secrets in Code</h4><p>After a secret is detected within a CI check job, the CI job executes `git blame` to find the most recent contributor of the secret. In cases when the recent contributor has left the company, we trace back to the contributor’s management chain until we find a person that is active. After owner identification, the DPS performs a few operations:</p><ul><li><strong>It de-duplicates secret findings: </strong>To avoid duplicate tickets and notifications for the same secret within the same file, we calculate a hash of the secret and the path name of the target file. When the hash value appears to be an existing value, we ignore the finding in DPS.</li><li><strong>It sends a notification: </strong>Alerts are sent to a dedicated Slack channel and Datadog for metrics collecting. When security operators are contacted, these notifications can serve as referees to provide contexts for proper guidance.</li></ul><p>The DPS automates the secret data protection in the Airbnb codebase and minimizes operational load for security operations. In comparison with a pentesting program where pentesters manually triage secret leakages and operate the resolution process, Angmar incurs far fewer operations.</p><h3>Conclusion</h3><p>This post concludes our three-part series on how we are automating data protection at scale at Airbnb. We explained how understanding the data, by storing privacy and security metadata in a central service and by automatically classifying what type of data is stored where, is a necessary building block to protecting the data. In this blog post, we focused on use cases where the data protection platform helped us to reduce security and privacy risk.</p><p>If this type of work interests you, see <a href="http://careers.airbnb.com/">careers.airbnb.com</a> for current openings.</p><h3>Acknowledgments</h3><p>The Data Protection Platform was made possible by all team members of the data security team: Shengpu Liu, Zi Liu, Jesse Rosenbloom, Serhi Pichkurov, and Julia Cline. Thanks to our leadership, Marc Blanchou, Joy Zhang, Brendon Lynch, Paul Nikhinson, and Vijaya Kaza, for supporting our work. Thanks to Christopher Barcellos for reviewing our blog post. Thanks to the Trust Privacy team for the great partnership: Jujhaar Singh, Ansuman Acharya, Zoya Sultana, Steve Hill, Liam McInerney, Mamman Fan, Gustavo Alza, Shazad Sahak, Alice Park, Eliott Behar etc. Thanks to the vulnerability management team for building out the ticketing mechanism: Kadia Mashal, Keziah Plattner. Thanks to the data governance team for partnering and supporting our work: Andrew Luo, Shawn Chen, and Liyin Tang. Thank you Tina Nguyen and Cristy Schaan for helping drive and make this blog post possible. Thank you to previous members of the team who contributed greatly to the work: Lifeng Sang, Bin Zeng, Prasad Kethana, Alex Leishman, and Julie Trias.</p><p><em>All product names, logos, and brands are property of their respective owners. All company, product and service names used in this website are for identification purposes only. Use of these names, logos, and brands does not imply endorsement.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=34e592c45d46" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/automating-data-protection-at-scale-part-3-34e592c45d46">Automating Data Protection at Scale, Part 3</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Airbnb’s Page Performance Score on iOS]]></title>
            <link>https://medium.com/airbnb-engineering/airbnbs-page-performance-score-on-ios-36d5f200bc73?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/36d5f200bc73</guid>
            <category><![CDATA[performance-management]]></category>
            <category><![CDATA[metrics]]></category>
            <category><![CDATA[performance]]></category>
            <category><![CDATA[ios]]></category>
            <category><![CDATA[mobile]]></category>
            <dc:creator><![CDATA[Nicholas Miller]]></dc:creator>
            <pubDate>Mon, 13 Dec 2021 15:41:02 GMT</pubDate>
            <atom:updated>2021-12-14T14:38:12.174Z</atom:updated>
            <content:encoded><![CDATA[<p><em>This is a continuation of our series on </em><a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936"><em>Airbnb’s Page Performance Score</em></a><em>, a score that measures multiple performance metrics from real users on any platform. Series: </em><a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936"><em>Part 1</em></a><em> and </em><a href="https://medium.com/airbnb-engineering/measuring-web-performance-at-airbnb-122da8d3ea3f"><em>Part 2</em></a><em>.</em></p><p><a href="https://www.linkedin.com/in/nickbryanmiller/">Nicholas Miller</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/854/1*33B60glCNf0ePfNHrvwYew.jpeg" /></figure><p>At Airbnb, we created the <a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936">Page Performance Score</a> to provide our engineers and data scientists a multitude of user-centric performance metrics to better understand and improve our products. In this post, we will dive deeper into how we define these metrics and instrument them on iOS.</p><h3>Page System</h3><p>The entire customer journey on Airbnb is divided into different pages, each of which has its own measured <a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936">Page Performance Score</a> (PPS). In order to support this page-based performance tracking system, we built a standardized infrastructure that enables engineers to configure pages representing their features.</p><p>On iOS, a page is associated with a <em>UIViewController</em>. We collect performance data throughout a <em>UIViewController’s</em> lifecycle and only emit the logging event on <em>viewDidDisappear</em>. This logging event cannot be created or sent without a <em>PageName,</em> a universal page identifier.</p><h3>Instrumentation</h3><p>Due to the many edge cases and complexities involved in instrumenting these metrics, we created a Page Performance Score state machine class, called <em>PPSStateMachine</em>. This class encapsulates all the logic to track and compute the performance metrics and generate logging events. Any engineer who wants to log a PPS event can do so by obtaining the <em>PPSStateMachine</em> associated with their <em>UIViewController</em> and calling the relevant methods during the <em>UIViewController’s</em> lifecycle events. To make things even simpler, we’ve built additional tooling and infrastructure so engineers only need to provide a name for their page and the state of the content — e.g., loading, loaded, or error.</p><h3>PPSStateMachine</h3><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/8b7970243975a6ca0835748fa6a420d4/href">https://medium.com/media/8b7970243975a6ca0835748fa6a420d4/href</a></iframe><h3>Time</h3><p>When measuring performance, all time is measured in nanoseconds and then converted into milliseconds. By creating a typealias for the concept of nanoseconds (UInt64) and milliseconds (Float64) to more specific types, we force developers to think about the scale when converting to more commonly used types (e.g., Int, Float).</p><p>When taking the current time, we use a monotonic clock, a clock whose value increments monotonically and will continue to increment while the system is asleep. The value is of type 64-bit nanoseconds.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/4da33b57f34e75dc4693667295bf3756/href">https://medium.com/media/4da33b57f34e75dc4693667295bf3756/href</a></iframe><p>When marking the start and end time of a duration, we have a computed variable that returns the current time in milliseconds. This allows us to avoid most accuracy and precision errors due to casting.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/e3c2a7aa8281b995ca3e0dbe6f3d50a6/href">https://medium.com/media/e3c2a7aa8281b995ca3e0dbe6f3d50a6/href</a></iframe><h4>Example</h4><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/602ff441004751e85ff5e03dc96c00f8/href">https://medium.com/media/602ff441004751e85ff5e03dc96c00f8/href</a></iframe><h3>View Association</h3><p>Every <em>UIViewController</em> has an associated <em>PPSStateMachine</em>. This <em>PPSStateMachine</em> can be overridden in the event the developer wants to measure a series of pages under one name. Associating with a <em>UIViewController</em> allows the <em>PPSStateMachine</em> to be found on a <em>UIView</em> by crawling the view responder chain.</p><h3>Versioning</h3><p>Declaring lifecycle and semantic methods in the PPS protocol allows us to abstract away how the score is being calculated. Most updates to the PPS formula — with the exception of entirely new metrics such as video performance — do not result in developers needing to update their respective features. Behind the scenes, any major change to the formula is first tested by placing the potential value into the logged event’s metadata. Once the potential value is validated, it can be upgraded to an official value that affects the page’s performance score.</p><h3>Metric Implementation</h3><h3>Time to First Layout (TTFL)</h3><p>TTFL starts during the UIViewController’s viewDidLoad and ends after the UIViewController’s first viewDidLayoutSubviews.</p><h3>Time to Initial Load (TTIL)</h3><p>TTIL starts during the UIViewController’s viewDidLoad and ends one render cycle after loaded content has been set.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*EW0b3z7ZpIrJhtzI0W2DSA.gif" /><figcaption>This is for illustrative purposes only and does not necessarily show anything that may or may not be available on Airbnb at any time. The content shown in the image may or may not be correct.</figcaption></figure><h3>Scroll Thread Hangs (STH)</h3><p>STHs are reported as the difference between the duration of the hitch, filtering on a minimum threshold of twice the refresh rate, and the maximum frame duration.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/00bf78cd12435d8512756b05c21010fe/href">https://medium.com/media/00bf78cd12435d8512756b05c21010fe/href</a></iframe><p><a href="https://developer.apple.com/documentation/quartzcore/cadisplaylink"><em>CADisplayLink</em></a> accurately observes most STHs. The <em>RunLoop.Mode</em> is <em>RunLoop.Mode.Tracking</em>.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/5f2dc1fc5848b1350fe493e5bc09d6bc/href">https://medium.com/media/5f2dc1fc5848b1350fe493e5bc09d6bc/href</a></iframe><p>Every time the display link is fired, we make a calculation based on the old frame and the current frame.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*D9y4xHtuKdAEf1ytdM-iEQ.gif" /><figcaption>This is for illustrative purposes only and does not necessarily show anything that may or may not be available on Airbnb at any time. The content shown in the image may or may not be correct.</figcaption></figure><p>Main Thread Hangs (MTH) tracking could exist on iOS, however, accurately tracking MTH incurs a small but consistent drag on performance. In our tests of MTH tracking, the CPU was not able to sleep, battery was drained, and the metric wasn’t giving us significantly more information regarding visually-perceived performance than STH. As a result, we decided not to measure MTH on iOS.</p><h3>Additional Load Time (ALT)</h3><p>ALT starts when a loader is shown and ends one render cycle after the loader is gone and content is set.</p><p>To illustrate this metric, let’s take a look at infinite scroll. If the bottom is reached before the next page has been loaded then the ALT recorded is the time that the loader (or bottom) is visible until the next page has loaded. If the bottom is never reached, for instance, due to prefetching, then an ALT of zero is logged. In order to accurately log, we need to know the scroll percentage, whether the bottom loader is visible, and a state machine to track the old state.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/1*WTBC00sL2fp9MW5xom2jpA.gif" /><figcaption>This is for illustrative purposes only and does not necessarily show anything that may or may not be available on Airbnb at any time. The content shown in the image may or may not be correct.</figcaption></figure><h3>Rich Content Load Time (RCLT)</h3><p>RCLT is entirely hidden from engineers with our view abstraction, <em>URLImageView</em>, which is capable of showing an image from a URL.</p><p>RCLT only tracks the time that a loader or placeholder is visible. If a loading image is hidden then the act of hiding marks the end of the RCLT.</p><p>On every <em>URLImageView</em> state change the corresponding <em>PPSStateMachine</em> is found by crawling the view’s responder chain and updating the state machine with whether the image is loaded or not. The <em>PPSStateMachine</em> will calculate the duration and remove the URL portion, only saving the duration, if the duration is under a specified threshold so that logs are not too large.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/0d853ace6c3ccfbb5d418efdf36e1842/href">https://medium.com/media/0d853ace6c3ccfbb5d418efdf36e1842/href</a></iframe><figure><img alt="" src="https://cdn-images-1.medium.com/max/600/0*FDRRuig-2gi_9IZP" /><figcaption>This is for illustrative purposes only and does not necessarily show anything that may or may not be available on Airbnb at any time. The content shown in the image may or may not be correct.</figcaption></figure><h3>Summary</h3><p>Our current implementation of PPS on iOS has allowed engineers to quickly implement and receive real performance data. We are continually evolving and expanding our tooling and infrastructure. We hope that you can apply and advance our learnings in your company.</p><h4>Appreciations</h4><p>Thank you to everyone who has helped build PPS on Native: <a href="https://www.linkedin.com/search/results/all/?keywords=luping%20lin&amp;origin=RICH_QUERY_SUGGESTION&amp;position=0&amp;searchId=58011edb-813b-43c3-9f00-f886aa446e84&amp;sid=VYi">Luping Lin</a>, <a href="https://www.linkedin.com/in/hdezninirola/">Antonio Niñirola</a>, <a href="https://www.linkedin.com/in/kellerbryan19/">Bryan Keller</a>, <a href="https://www.linkedin.com/in/noahsmartin/">Noah Martin</a>, <a href="https://www.linkedin.com/in/scheuermann/">Andrew Scheuermann</a>, <a href="https://www.linkedin.com/search/results/all/?keywords=joshua%20nelson%20%E2%9C%A8&amp;origin=RICH_QUERY_SUGGESTION&amp;position=0&amp;searchId=959d4aca-c80e-448a-b415-4a732ba7a84d&amp;sid=Rr6">Josh Nelson</a>, <a href="https://www.linkedin.com/in/joshpolsky/">Josh Polsky</a>, <a href="https://www.linkedin.com/in/jnvollmer/">Jean-Nicolas Vollmer</a>, <a href="https://www.linkedin.com/in/wensheng-mao-76ab7142/">Wensheng Mao</a> and everyone else who helped along the way.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=36d5f200bc73" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/airbnbs-page-performance-score-on-ios-36d5f200bc73">Airbnb’s Page Performance Score on iOS</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How Airbnb Supports Co-Hosting]]></title>
            <link>https://medium.com/airbnb-engineering/how-airbnb-supports-co-hosting-edfb11d88575?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/edfb11d88575</guid>
            <category><![CDATA[scalability]]></category>
            <category><![CDATA[product-development]]></category>
            <category><![CDATA[infrastructure]]></category>
            <category><![CDATA[api]]></category>
            <category><![CDATA[authorization]]></category>
            <dc:creator><![CDATA[Angeline Rao]]></dc:creator>
            <pubDate>Thu, 09 Dec 2021 19:32:19 GMT</pubDate>
            <atom:updated>2021-12-09T19:32:18.917Z</atom:updated>
            <content:encoded><![CDATA[<p>A deep dive into Airbnb’s collaborative hosting infrastructure</p><p>By: <a href="https://www.linkedin.com/in/angelinerao/">Angeline Rao</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*k8WLBeLdPKkv-MrppJi8kQ.jpeg" /></figure><h3>Introduction</h3><p>Airbnb’s mission is to empower Hosts to deliver one-of-a-kind stays that make it possible for guests to experience the world in a more authentic and connected way. Sometimes hosting is handled by one person, but in many cases hosting is a group effort. Hosts often share their responsibilities with another trusted person, such as a family member or a neighbor. These trusted partners are Co-Hosts on the Airbnb platform who are granted access to the Host’s listing, reservations, and messaging with guests.</p><p>Co-Hosting is just one form of Host collaboration. As hosting has become mainstream, the scale of hosting has grown as well; in fact, many people now host on Airbnb as their primary occupation. From Host entrepreneurs running their own businesses, to Hosts that are part of established hospitality companies, these types of Hosts collaborate through a Team on Airbnb. Within a Team, hosting team members are granted roles that correspond to their real world hosting responsibilities (e.g., guest manager) and have a set of corresponding permissions (e.g., permitted to message guests).</p><p>As the number of collaborative Hosts grows and new forms of collaboration get introduced, the engineering work to support them becomes increasingly complex. With this challenge in mind, Airbnb has developed a single common infrastructure that can support all current and future Airbnb collaboration products. This solution is now available for all internal teams.</p><p>In this blog post, we will cover the unified architecture of collaborative hosting at Airbnb and how we use this shared infrastructure to streamline the process of building products for Hosts. In the next section, we will illustrate why supporting collaborative hosting without a shared infrastructure quickly became unwieldy. Then, we will walk through Airbnb’s architecture for collaborative hosting. Finally, we will discuss how this infrastructure supports the needs of product engineers.</p><h3>Background &amp; Motivation</h3><p>Before we jump into collaborative hosting, let’s consider the single Host model. Because only one person is associated with each listing, this data could easily be stored with a host_id column in our listings database. We can then perform a single check to figure out whether a user has permission to take an action on a listing. This might look like the following:</p><pre>if (isListingHost) {<br>     // Take action on listing<br>}</pre><p>When Airbnb launched its first collaborative hosting product, Co-Hosting, we used these types of comparisons, just as we did with the single host model.</p><p>In our business logic, we need frequently to answer three types of questions around person-to-resource (e.g., listing, reservation, review) relationships:</p><ol><li><strong>Permissions</strong>: Given a person and a resource, can this person take action X on this resource? The answer to this question helps us ensure that people only take actions on Airbnb that they are explicitly permitted to take. We must not permit someone to edit the price on an unrelated Host’s listing, for example.</li><li><strong>Collection Queries</strong>: Given a person, what are the resources that they can access? The answer to this question helps us determine which message threads to display in a person’s Airbnb inbox, for example.</li><li><strong>Hosts to Display and Notify</strong>: Given a resource, who should be displayed to guests, and who should be notified of updates to this resource? The answer to this question helps us determine who should be displayed as the Host(s) of this listing, for example.</li></ol><p>After Co-Hosting, we soon found that performing the types of comparisons that we did for the single host model does not scale well to collaborative and more complex use cases.</p><ul><li>Continually adding logic that is specific to a single type of collaborative hosting results in unwieldy code. For example, permissions checks might start to look like the following:</li></ul><pre>if (isListingHost || <br>    isListingCoHost || <br>    isListingTeamMember ||  <br>    isListingCollabHost1 || <br>    isListingCollabHost2 || <br>    ...) {<br>     // Take action on listing<br>}</pre><ul><li>Engineers who are building a new feature need to understand all of the existing types of collaborative hosting and decide how collaborative Hosts should interact with the feature (e.g., which types of Team members should have access to this feature?). If engineers do not include every use case, the feature will not be available to all Hosts.</li></ul><p>Without any kind of unifying framework, product development for Hosts can quickly become a laborious process.</p><p>Today, because of our collaborative hosting infrastructure, product engineers do not need to worry about specific types of collaborative hosting. They only need to know three things, all of which we will cover in this post:</p><ol><li>For permissions, query Himeji.</li><li>For collection queries, use the resource’s dedicated service.</li><li>For Hosts to display or notify, use the Collaborative Hosting API.</li></ol><h3>Collaborative Hosting Core Architecture</h3><p>We use user groups as the data model to represent any group of people. A user group is defined by an id, a group type (e.g., COHOSTING, TEAM), and a list of user group members.</p><p>Each member in a user group is defined by their Airbnb user id and a user group role, which allows us to differentiate between the different types of members within a user group. For example, if a Host (listing owner) has a Co-Host, then the corresponding user group would be a user group with type COHOSTING that has two members: the Host, who has the LISTING_OWNER role, and the Co-Host, who has the LISTING_COHOST role.</p><figure><img alt="Diagram of how a Host and their Co-Host represented in the user group data model" src="https://cdn-images-1.medium.com/max/1024/1*6JfNAQlj8Ml9LUHRxlh8AA.png" /><figcaption><em>A Host and their Co-Host represented in the user group data model</em></figcaption></figure><p>This model is extensible to hosting teams as well. We support several roles specific to Teams based on how hosting teams commonly break down responsibilities between team members, such as the LISTING_MANAGER role, the FINANCE_MANAGER role, and the GUEST_MANAGER role.</p><p>In the creation and deletion flows for a Co-Host or Team, the corresponding user group is updated accordingly.</p><figure><img alt="Diagram showing that when Co-Hosts or Teams get updated in the product, in addition to the Co-Host and Teams sources of truth getting updated, the corresponding user groups get updated as well" src="https://cdn-images-1.medium.com/max/1024/0*DV48R3dUKBjEryHK" /><figcaption>Updates in product will trigger changes in both the source of truth (Co-Hosting or Teams) and the corresponding user groups</figcaption></figure><h4><strong>Resource &lt;&gt; User Group Associations</strong></h4><p>Now that we have a model for any collaborative hosting group, we want to associate each group with the group’s corresponding resources. This way, when we are trying to answer questions around whether a person has a relation with a given resource, there is a single source that will give us the answer, regardless of the specific collaborative relationship. We keep track of these resource &lt;&gt; user group associations by storing the Airbnb resource id, the user group id, and the timestamp when the association was created.</p><figure><img alt="Example ListingUserGroupAssociations table showing that listing A has been associated with user group C and listing B has been associated with user group D" src="https://cdn-images-1.medium.com/max/1024/0*QH1mAPP9qNiJy0sM" /><figcaption><em>Example ListingUserGroupAssociations table showing that listing A has been associated with user group C and listing B has been associated with user group D</em></figcaption></figure><p>There are two scenarios in which resource &lt;&gt; user group associations need to be updated:</p><ol><li>When a collaborative hosting relationship gets updated. For example, when a hosting team gets created, all of the Team creator’s resources get associated with the Team’s corresponding user group</li><li>When a collaborative hosting resource is updated. For example, when a guest books a reservation on a Co-Hosted listing, we need to associate the Co-Host user group with the new reservation so that the listing’s Co-Hosts can help the listing owner with hosting.</li></ol><p>If updates in response to these events do not happen in a timely manner, the product experience might fall out of date. For example, if a Host adds a Co-Host to a listing, but the underlying association is not updated, the Co-Host will not have access to the listing and its reservations.</p><p>In a business of Airbnb’s size, keeping resource &lt;&gt; user group associations up to date can be challenging. The state of affairs is constantly changing, sometimes in quick succession; a Host might create a hosting team and then change their mind and immediately delete it. As a result, race conditions do occur.</p><p>For the rest of this section, we will cover Airbnb’s scalable system to keep resource &lt;&gt; user group associations up to date in spite of race conditions. In the subsequent section, we detail how Airbnb leverages these resource &lt;&gt; user group associations during product development.</p><p><strong>A System for Achieving Accurate Resource &lt;&gt; User Group Associations</strong></p><figure><img alt="Diagram of the system that keeps resource &lt;&gt; user group associations updated" src="https://cdn-images-1.medium.com/max/1024/0*21elv_AMVnSJojew" /><figcaption><em>The system that keeps resource &lt;&gt; user group associations updated</em></figcaption></figure><p>When any resource changes, our system springs into action and fetches affected resources to perform association updates. Because there can be thousands of resources to fetch, we use an internal job queue and scheduling system to break down the work into jobs to avoid timeouts and process in parallel. For all affected resources, we compare their user group associations with the current state of Airbnb and update the associations if needed.</p><p>The side effect of processing updates in parallel is that there could be race conditions that result in inconsistencies between a source of truth and corresponding user group associations. For example, if a Host creates and then immediately deletes a Team, the resulting jobs would be executed in parallel, with the possibility of a downstream “create” job executing after a “delete” job.</p><p>To address any inconsistencies introduced, the system will next fetch the now-updated resource &lt;&gt; user group associations and compare them with the source of truth. If there are any mismatches, it fixes them using a resilient queuing system that guarantees eventual consistency.</p><p>There are two notable benefits to the design of this system:</p><ul><li><strong>Optimized Performance</strong>: Performing the anticipated updates first and then fixing inconsistencies retroactively allows for the vast majority of the processing to be done in batches and in parallel. This results in a much less expensive operation than if the resources were processed one-by-one right off the bat, even though the latter approach would eliminate the need for the step to fix inconsistencies.</li><li><strong>Idempotent</strong>: Each resource update event triggers a re-calculation of associations that is agnostic to the specific type of update. As a result, we do not need to worry about receiving two opposite events, such as create and delete, in the wrong order. We thus have the guarantee that our system updates are idempotent.</li></ul><h3>Collaborative Hosting Infrastructure in Product Development</h3><p>Now that we have a system for achieving accurate user group &lt;&gt; resource associations, let’s revisit the three types of questions around person-to-resource relationships that engineers need to answer during development.</p><h4><strong>1. Permissions</strong></h4><p>When checking if a user can edit the pricing on a listing, for example, we will now know whether the person is associated with this listing in any collaborative sense by checking the listing associations of the user’s user groups. We could find out, for example, that this user is a LISTING_MANAGER team member in a user group associated with this listing.</p><p>The last piece, then, is defining how roles map to actions — for example, we might decide that users who have the LISTING_COHOST or LISTING_MANAGER role can take the EDIT_PRICING action on listings with which their user group is associated. At Airbnb, this mapping happens in configs defined in Himeji, our central authorization framework described in <a href="https://medium.com/airbnb-engineering/himeji-a-scalable-centralized-system-for-authorization-at-airbnb-341664924574">this previous blog post</a>. Given a user, a resource, and an action, Himeji computes whether that user is permitted to take the action on the resource.</p><figure><img alt="Architecture diagram for Himeji where Himeji is pointing into data sources for resource user group associations, resources, and user groups" src="https://cdn-images-1.medium.com/max/1024/0*Vr2q-tgY6hqsd6xM" /><figcaption>Architecture diagram for Himeji</figcaption></figure><h4><strong>2. Collection Queries</strong></h4><p>To fetch the resources that a person can access, we just need to make a single query by the person’s Airbnb user id and by the user group ids where the person has a permitted user group role. We use ElasticSearch to make resources searchable by user group id by joining the resource data source with the resource &lt;&gt; user group association table. This way, each resource’s ElasticSearch document has the list of user group ids that it is associated with.</p><p>Each resource’s designated data service then serves an endpoint (e.g., getListingsByFilters) that allows product engineers to pass a parameter (e.g., includeCollaborativeHosting=true) to indicate that resources should be fetched by both the person’s user id and user group ids.</p><figure><img alt="Architecture diagram for collection queries showing mutations from resource user group associations and resources feeding into ElasticSearch, which gets queried, along with the user groups data source" src="https://cdn-images-1.medium.com/max/1024/1*W-kl0OYyPkZviH4ySDmsDQ.png" /><figcaption>Architecture diagram for collection queries</figcaption></figure><p>Note that, similar to above, we did not need to know anything about Co-Hosting or Teams specifically to answer these types of questions.</p><h4><strong>3. Determining Which Hosts to Display and Notify</strong></h4><p>The user(s) to display to guests or to notify about an update are not necessarily the same as the user(s) who have the corresponding permissions. For example, a Host who has a Co-Host may not want to receive notifications about guest messages, but they still want to access their Airbnb inbox.</p><p>As we saw previously, keeping track of the bespoke logic for each type of collaboration can become taxing for product teams. To address this issue, we built out a Collaborative Hosting API that takes all collaborative use cases into account, with endpoints such as getManagersToNotifyForReservation and getManagersToDisplay. Under the hood, we query the source of truth for each collaborative hosting use case and aggregate the results. This API abstracts away the specifics of collaborative hosting while still providing product engineers with the information that they need.</p><p>When naming API endpoints, we aimed to explicitly state the endpoint’s goal to reduce the chances that an engineer might misuse an API response. For example, the endpoint that returns users to notify for a reservation is named getManagersToNotifyForReservation, instead of getReservationManagers, which could be mistaken for a permissions endpoint that fetches the list of users that can modify a reservation.</p><h4><strong>Collaborative Hosting Playbook</strong></h4><p>With our clear structure around how collaborative hosting works across use cases, we can establish concise steps for new product development within the existing framework.</p><p><strong>Introducing a New Type of Collaborative Hosting</strong></p><p>When a new collaborative hosting use case is introduced, integrating it into Airbnb requires just a few key changes to get most of the way there:</p><ul><li>Update/add your use case to the Himeji config for permissions</li><li>Update the resource &lt;&gt; user group association system to incorporate your use case</li><li>Update the collaborative hosting API endpoints to incorporate logic from your new use case when considering notifications or display</li></ul><p><strong>Introducing a New Airbnb Feature</strong></p><p>When a new Airbnb feature is introduced, launching it to all Hosts just requires a few steps. Let’s say that Airbnb is building NewProduct. NewProduct will introduce a new type of resource, belos. We would need to:</p><ul><li>Set up belo &lt;&gt; user group associations by adding belos to the user group &lt;&gt; resource association system</li><li>Use these belo &lt;&gt; user group associations to create a search index for belos so that we can fetch belos by user group ids</li><li>If needed, add a new endpoint for notifying and displaying users for belos</li></ul><h3>Conclusion</h3><p>Airbnb has developed a collaborative hosting infrastructure that supports all types of Hosts. This makes it much easier to build products, as engineers just need to know about one central framework that will cover all hosting use cases. Collaborative hosting is critical to the success of many Hosts on Airbnb. A seamless developer experience when building for all Hosts allows us to empower Hosts to deliver great stays to guests.</p><p>If this type of work interests you, check out some of our related positions:</p><ul><li><a href="https://careers.airbnb.com/positions/2921989/">Senior Android Software Engineer, Hosting</a></li><li><a href="https://careers.airbnb.com/positions/2809890/">Senior iOS Software Engineer, Hosting</a></li></ul><p>… and more at <a href="https://careers.airbnb.com/">Careers at Airbnb</a>!</p><h3>Acknowledgments</h3><p>Collaborative hosting is only possible as a result of the work of many incredible and mission-driven people over the years. Special thanks to Yi Lang Mok, Yan Li, Evelyn Shen, Amy Li, Aaron Holsonege, Eric Guan, Sujith Vishwajith, Alan Yao, JD Jiang, Brian Mason, Peggy Zheng, Chuan Shi, Dorothy Chang, Sharlene Luo, Jingyi Ni, Matias Figueroa, Charlie Jiang, Sushu Zhang, Ken Kao, Anna Majkowska, Jessica Tai, and many more.</p><p><em>All product names, logos, and brands are property of their respective owners. All company, product and service names used in this website are for identification purposes only. Use of these names, logos, and brands does not imply endorsement.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=edfb11d88575" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/how-airbnb-supports-co-hosting-edfb11d88575">How Airbnb Supports Co-Hosting</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Measuring Web Performance at Airbnb]]></title>
            <link>https://medium.com/airbnb-engineering/measuring-web-performance-at-airbnb-122da8d3ea3f?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/122da8d3ea3f</guid>
            <category><![CDATA[performance]]></category>
            <category><![CDATA[metrics]]></category>
            <category><![CDATA[web]]></category>
            <dc:creator><![CDATA[Joshua Nelson]]></dc:creator>
            <pubDate>Mon, 06 Dec 2021 19:05:21 GMT</pubDate>
            <atom:updated>2021-12-06T19:05:21.629Z</atom:updated>
            <content:encoded><![CDATA[<p>Learn what web performance metrics Airbnb tracks, how we measure them, and how we consider tradeoffs between them in practice.</p><p><a href="https://www.linkedin.com/in/joshua-nelson-%E2%9C%A8-a0156523/">Josh Nelson</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*-MyZDBHAWNSTbGXG" /></figure><p>How long did it take for this web page to load? It’s a common question industrywide, but is it the right one? Recently, there has been a shift from using single seconds-based metrics like “page load”, to metrics that paint a more holistic picture of performance, representing the experience from a website user’s perspective. At Airbnb, measuring the web performance that our guests and hosts actually experience is critical. Previously, we described how Airbnb <a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936">created a Page Performance Score</a> to combine multiple metrics from real users into a single score. In this blog post, we describe the metrics that we consider important on our website and how they relate to industry standards. We also discuss some case studies that moved these metrics, and how they impacted the experience of website visitors.</p><h3>Web Performance Metrics</h3><p>There are five key performance metrics that we measure on our website. We chose these metrics because they represent performance as our users experience it, and because their definitions are <a href="https://chromium.googlesource.com/chromium/src/+/lkgr/docs/speed/good_toplevel_metrics.md">simple, interpretable, and performant to compute</a>.</p><p>We record these metrics both for direct requests to the site, as well as for client side transition requests between pages (Airbnb uses a <a href="https://developer.mozilla.org/en-US/docs/Glossary/SPA">single page app</a> architecture). We will give an overview of these metrics, how we instrument them, and their relative weightings in our overall <a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936">Page Performance Score</a>.</p><h4>Time To First Contentful Paint</h4><p>Time To First Contentful Paint (<a href="https://web.dev/fcp/">TTFCP</a>) measures the time between the start of navigation and the time at which <strong>anything appears on the screen</strong>. This could be text, a loading spinner, or any visual confirmation to the user that the website has received their request. We use the <a href="https://web.dev/fcp/#measure-fcp-in-javascript">paint timing API</a> for direct requests. For client routed transitions, we have written our own instrumentation that is triggered when a page transition begins:</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/f21f47811c0c74642bf2bfba14f1aa4e/href">https://medium.com/media/f21f47811c0c74642bf2bfba14f1aa4e/href</a></iframe><h4>Time To First Meaningful Paint</h4><p>Time To First Meaningful Paint (TTFMP) measures the time from the start of navigation to the point at which <strong>the most meaningful element appears on the screen</strong>. This is usually the page’s largest image or highest heading. This indicates to a user that useful information has arrived and that they can start consuming the page’s content.</p><p>To instrument TTFMP, product engineers tag their page’s meaningful element with an id — we call this the FMP target. We then recursively search for a page’s FMP target.</p><iframe src="" width="0" height="0" frameborder="0" scrolling="no"><a href="https://medium.com/media/d246dde34f9e5ed3b89dd476cd04f0d9/href">https://medium.com/media/d246dde34f9e5ed3b89dd476cd04f0d9/href</a></iframe><p>It’s important to note this metric requires <em>manual instrumentation</em> by our product engineers — every page must include a “FMP-target”, or we’ll never record the first meaningful paint milestone. To ensure that each page instruments TTFMP correctly, we report on how often this element is found on a given page. If it is found less than 80% of the time due either to lack of instrumentation or to conditional rendering of the FMP target, we trigger alerts to warn that the metric is not valid for that page. This requires developers to keep the TTFMP instrumentation up to date through page redesigns, refactors, and A/B tests.</p><p>Instrumenting TTFMP automatically is difficult because it is hard to systematically know what element is the most “meaningful” on the page. <a href="https://web.dev/lcp/">Largest Contentful Paint</a> addresses this by measuring the largest element on the page. We do not use Largest Contentful Paint because the <a href="https://developer.mozilla.org/en-US/docs/Web/API/LargestContentfulPaint">browser API</a> for this metric only returns the paint timing for initial load and is not available for client transitions in our single page app. If Largest Contentful Paint could be reset and used for client-side routed transitions too, we would use Largest Contentful Paint as a default that requires no manual instrumentation.</p><h4>First Input Delay</h4><p>First Input Delay (<a href="https://web.dev/fid/">FID</a>) measures the time it takes for the browser to <strong>start responding to user interaction</strong>. A low FID signals to the user that the page is usable and responsive. Conversely, anything over 50ms is a <a href="https://developer.mozilla.org/en-US/docs/Web/Performance/How_long_is_too_long">perceptible delay to a user</a>. To support client transitions, we forked the <a href="https://github.com/GoogleChrome/web-vitals">first-input-delay</a> instrumentation from web-vitals to reset the observation of the input delay.</p><h4>Total Blocking Time</h4><p>Total Blocking Time (<a href="https://web.dev/tbt/">TBT</a>) measures the total sum of time for which <strong>the main thread is “blocked”</strong>. When TBT is high, the page may freeze or stop responding when scrolling or interacting, and animations may be less smooth<strong>. </strong>Tasks that take longer than 50ms are considered “<a href="https://w3c.github.io/longtasks/">long tasks</a>” and contribute to TBT.</p><p>One difficulty with using TBT is that it can be hard to attribute blocking to specific components or sections on our pages. For this reason, we have created a sub-metric we call <em>interactivity spans, </em>which captures blocking time that occurs within a specified window.</p><p>While we report the <em>total</em> blocking time, we know that <em>not all blocking time is equal</em> — time spent blocking user interaction is worse than idle blocking time. Another drawback is that blocking time accumulates indefinitely over the course of the page, which makes the metric hard to collect synthetically, and impacted by session length. We’re investigating how to attribute specific blocking times to user interaction, and will follow the direction of the <a href="https://web.dev/smoothness/">animation smoothness metrics</a> in the web vitals initiative.</p><p>TBT is <a href="https://developer.mozilla.org/en-US/docs/Web/API/Long_Tasks_API#performancelongtasktiming">currently only available in Chromium-based browsers</a>, and there is no polyfill available. In these cases, we do not report TBT — however, we have found that even with limited browser support, TBT is a useful measurement of post-load performance.</p><h4>Cumulative Layout Shift</h4><p>Cumulative Layout Shift (<a href="https://web.dev/cls/">CLS</a>) measures the layout instability that occurs during a page session, weighted both by the size and distance of the element shift. A low CLS indicates to the user that the page is <strong>predictable</strong> and gives them confidence to continue interacting with it.</p><p>CLS is also <a href="https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift#browser_compatibility">not available</a> in every browser we support. While there is no polyfill available, we do not report any value for CLS in those browsers. Similar to TBT, we find even partial browser coverage to be useful, as a shift in Browser A likely also occurs in Browser B.</p><h3>Web Page Performance Score</h3><p>We combine these scores using the Page Performance Score (PPS) system, described in the <a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936">previous post in this series</a>. PPS combines input metrics into a 0–100 score that we use for goal setting and regression detection.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/0*3bNL6_zkmtI26zDy" /><figcaption><em>A diagram of the relative weightings of input metrics to the PPS score for a given page. </em><a href="https://web.dev/fcp/"><em>TTFCP</em></a><em>: 35%, </em><a href="https://web.dev/fid/">FID</a><em>: 30%, TTFMP: 15%, </em><a href="https://web.dev/tbt/"><em>TBT</em></a><em>: 15%, </em><a href="https://web.dev/cls/"><em>CLS</em></a><em>: 5%</em></figcaption></figure><h3>Web Vitals and Lighthouse</h3><p><a href="https://github.com/GoogleChrome/web-vitals">Web Vitals</a> and <a href="https://developers.google.com/web/tools/lighthouse">Lighthouse</a> are large sources of inspiration and research for our implementation of PPS on the web.</p><p>Lighthouse is a tool that rates a web page by running synthetic tests, auditing, and scoring the page. However, Lighthouse runs these tests synthetically, while PPS scores pages according to real user metrics. Lighthouse is a powerful diagnostic tool, while PPS lets us use real user metrics for goal setting and regression detection.</p><p>Web Vitals is a library that measures real user metrics, similar to PPS. However, it does not include a numerical scoring system similar to PPS or Lighthouse, and it does not yet account for client transitions inside a Single Page Application. We do make use of web vitals by including and prioritizing similar metrics to ensure that the direction of PPS and Web Vitals are aligned.</p><h3>Early Flush Case Study</h3><p>When making changes to improve performance, we often run A/B tests to gather data on how successful our improvements were. Ideally, we would strictly improve performance by improving one or more of the metrics described previously. However, we sometimes see examples where one metric has improved at the expense of another. The PPS system streamlines decision making when considering tradeoffs.</p><p>As an example, on pages that have dynamic content (such as our listing pages), we previously CDN cached a generic version of the page that contained a loading state, leading to a fast TTFCP. We then ran an experiment to flush HTML content from the server early and skip this initial loading state.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*bXFjV4d-JKnNmRFa6gK0_Q.png" /><figcaption><em>Left: Before, CDN cached — shimmering skeleton loading state. Right: After, Early flushed page, including the first meaningful paint image.</em></figcaption></figure><p>The result of this experiment was a slower TTFCP without the CDN, but a faster TTFMP because we skip the initial loading state. Though we weight TTFCP higher than TTFMP, we found that the magnitude of improvement in TTFMP outweighed the regression in TTFCP and shipped the change. This type of decision is simple to make when we have a Web Page Performance Score to help us consistently evaluate tradeoffs.</p><h3>Summary</h3><p>We have seen through experimentation that these metrics correlate with positive user experience changes. Web PPS gives us a single score we can use for goal setting and regression detection, while also capturing many different aspects of user experience: paint timings, interactivity and layout stability. We hope that Web PPS can be used as a reference for implementing similar systems outside of Airbnb.</p><p>Our deepest thanks go out to our industry colleagues working on performance — as the industry evolves Web PPS will also evolve.</p><p>Thanks to <a href="https://www.linkedin.com/in/lupinglin/">Luping Lin</a>, Victor Lin, <a href="https://www.linkedin.com/in/gabe-lyons-9a574543/">Gabe Lyons</a>, <a href="https://www.linkedin.com/in/nickbryanmiller/">Nick Miller</a>, <a href="https://www.linkedin.com/in/hdezninirola/">Antonio Niñirola</a>, <a href="https://www.linkedin.com/in/adityapunjani/">Aditya Punjani</a>, <a href="https://www.linkedin.com/in/guy-rittger-%E2%93%A5-1355b4/">Guy Rittger</a>, <a href="https://www.linkedin.com/in/scheuermann/">Andrew Scheuermann</a>, <a href="https://www.linkedin.com/in/jnvollmer/">Jean-Nicolas Vollmer</a>, and <a href="https://www.linkedin.com/in/xiaokangxin/">Xiaokang Xin</a> for their contributions to this article and to PPS.</p><p><em>All product names, logos, and brands are property of their respective owners. All company, product and service names used in this website are for identification purposes only. Use of these names, logos, and brands does not imply endorsement.</em></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=122da8d3ea3f" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/measuring-web-performance-at-airbnb-122da8d3ea3f">Measuring Web Performance at Airbnb</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Creating Airbnb’s Page Performance Score]]></title>
            <link>https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/5f664be0936</guid>
            <category><![CDATA[android-app-development]]></category>
            <category><![CDATA[performance]]></category>
            <category><![CDATA[software-development]]></category>
            <category><![CDATA[ios-app-development]]></category>
            <category><![CDATA[web-development]]></category>
            <dc:creator><![CDATA[Andrew Scheuermann]]></dc:creator>
            <pubDate>Thu, 18 Nov 2021 19:57:55 GMT</pubDate>
            <atom:updated>2021-11-18T20:57:29.336Z</atom:updated>
            <content:encoded><![CDATA[<p>Learn how Airbnb built the Page Performance Score, a 0–100 score that measures multiple performance metrics from real users on any platform.</p><p><a href="https://www.linkedin.com/in/scheuermann/">Andrew Scheuermann</a></p><figure><img alt="Two men playing guitar, one main playing an oboe." src="https://cdn-images-1.medium.com/max/1024/0*Mipmtj8Fk9XmyBMK" /></figure><p>Performance is important at Airbnb and part of our <a href="https://medium.com/airbnb-engineering/commitment-to-craft-e36d5a8efe2a">Commitment to Craft</a>. A fast experience is good for business and critical to our mission to “create a world where anyone can belong anywhere”.</p><p>Before we can create a fast experience we need to agree on what “fast” measures. Web, iOS, and Android each have different platform-specific performance metrics. For product engineers it can be challenging to understand which of these metrics to prioritize, and for management it’s difficult to compare platforms and keep progress reports succinct.</p><p>We’ve developed a new performance measurement system called the Page Performance Score that allows us to track multiple performance metrics from real customers across different platforms with ease. This post describes that system, and in the following weeks we’ll be publishing deep dives into the specifics for Web, iOS, and Android.</p><h3>Early Performance Measurement Efforts</h3><p>When Airbnb first started measuring performance, we used a single metric called “Time To Airbnb Interactive” (TTAI) that measured the time from page start to when content became visible and interactive. This approach had many positive outcomes. We built performance tracking architecture, fixed latency issues, and cultivated a company culture that valued performance.</p><p>However, TTAI also had shortcomings. Different platforms had different baselines and goals. Page comparisons were difficult because the “interactive” definition could change between similar pages. In some situations TTAI improved but engagement metrics did not. Most importantly, TTAI was a single metric and a single metric cannot capture the full spectrum of our customers’ performance expectations. Our definition of “fast” was incomplete and limited our overall performance efforts.</p><blockquote>A single metric cannot capture the full spectrum of our customers’ performance expectations.</blockquote><h3>Introducing the Page Performance Score</h3><p>We needed a nuanced view of performance while maintaining the simplicity of tracking a single number, so we created the Page Performance Score (PPS).</p><ul><li><strong>Page</strong>: The entire customer journey on Airbnb is divided into different pages.</li><li><strong>Performance</strong>: A page contains multiple performance metrics.</li><li><strong>Score</strong>: Every day, on each platform, we formulate a given page’s performance data into a 0–100 score.</li></ul><p>PPS allows us to combine multiple input metrics into an easily comparable score. PPS is a step-function improvement over our prior single-metric approach.</p><h3>The Metrics</h3><p>The metrics that we measure differ by platform, but the general approach of measuring multiple metrics and formulating a 0–100 score is the same. All of the metrics are <a href="https://web.dev/user-centric-performance-metrics/">user-centric</a> and fall into two general categories:</p><ol><li><strong>Initial Load Metrics</strong> measure the time from “page start” to content visible.</li><li><strong>Post Load Metrics</strong> measure page responsiveness after the initial load.</li></ol><figure><img alt="The Airbnb app opens, shows a loader, then the final meaningful page content." src="https://cdn-images-1.medium.com/max/600/0*BdTy3tjZIYtwtc2S" /><figcaption><em>The Airbnb homepage displays the loader and then meaningful content.</em></figcaption></figure><h4>Initial Load Metrics</h4><p><strong>Time To First Contentful Paint</strong> (Web) and <strong>Time To First Layout</strong> (Native) measure the time from “page start” until the first piece of content is visible, which is commonly a loader.</p><p><strong>Time To First Meaningful Paint</strong> (Web) and <strong>Time To Initial Load</strong> (Native) measure the time from “page start” until the meaningful content is displayed.</p><p>Initial Load Metrics are visualized on the left.</p><h4>Post Load Metrics</h4><p><a href="https://web.dev/fid/"><strong>First Input Delay</strong></a> (Web) measures the delay between user interaction and when the browser begins to respond. Delays of 50ms or longer are <a href="https://developer.mozilla.org/en-US/docs/Web/Performance/How_long_is_too_long">perceptible to the user</a>.</p><p><a href="https://web.dev/tbt/"><strong>Total Blocking Time</strong></a> (Web) and <strong>Thread Hangs</strong> (Native) cause the app to lag during layout, animations, and scrolling.</p><p><strong>Additional Load Time</strong> (Native) measures the average time that additional loaders are displayed within a page, such as during pagination.</p><p><strong>Rich Content Load Time</strong> (Native) measures the average time for images and videos to load.</p><p><a href="https://web.dev/cls/"><strong>Cumulative Layout Shift</strong></a> (Web) measures layout instability weighted by the size and distance of the element shift.</p><h3>The Formula</h3><p>After measuring the metrics we distill that information into a single number using the PPS Formula, which was forked from the <a href="https://web.dev/performance-scoring/">Lighthouse Formula</a>. For each metric we identified Good, Moderate, and Poor thresholds based on internal and <a href="https://web.dev/defining-core-web-vitals-thresholds/">industry data</a>. We created a scoring curve by assigning the Good range a score above 0.7, the Poor range below 0.5, and the Moderate range in between.</p><figure><img alt="A log normal curve with X values from 0 to 1, and Y values from 0 to 100,000." src="https://cdn-images-1.medium.com/max/976/0*6RlR2VE-YdrQVLqs" /><figcaption><em>A 10,000ms metric value would score ~0.9 in this example curve.</em></figcaption></figure><p>Every day we calculate a given page’s metric’s <a href="https://en.wikipedia.org/wiki/Truncated_mean">capped average</a> value from millions of real-user page loads. We map that capped average value against the metric’s curve to get a 0–1 score. We combine the metric scores into a composite PPS score by multiplying the metric scores by the metric weights. We chose the weights by examining our performance-focused A/B tests and ensuring that the weights are maximally aligned with Airbnb’s internal engagement metrics.</p><h4>Web Metric Weights</h4><figure><img alt="A percentage stacked bar chart with values TTFCP 35%, TTFMP 15%, FID 30%, TBT 15%, and CLS 5%." src="https://cdn-images-1.medium.com/max/1024/0*j1F-huoAevfFGkEF" /></figure><h4>Native Metric Weights</h4><figure><img alt="A percentage stacked bar chart with values TTFL 10%, TTIL 50%, TH 10%, ALT 15%, and RCLT 15%." src="https://cdn-images-1.medium.com/max/1024/0*jSbbMQYWVEIGUycR" /></figure><p>The resulting PPS formula can be expressed as….</p><p><em>PPS = curve(metric_1) * weight_1 + curve(metric_2) * weight_2 …</em></p><p>For example, on Web….</p><p><em>PPS = curve(TTFCP) * 35% + curve(TTFMP) * 15% + curve(FID) * 30% + curve(TBT) * 15% + curve(CLS) * 5%</em></p><h4>PPS Evolutions</h4><p>Migrating the company from a single metric to PPS was organizationally challenging. We had to train the company to stop viewing performance as a single seconds-based number, which is a paradigm shift that requires cross functional alignment. To help ease the transition we mapped the old TTAI ranges with the new PPS ranges.</p><figure><img alt="A table with the following values: Good Speed equals TTAI less than 3 seconds and also equals PPS greater than 70; Average Speed equals TTAI 3 to 5 seconds and also equals PPS 50 to 70; Slow Speed equals TTAI above 5 seconds and also equals PPS less than 50." src="https://cdn-images-1.medium.com/max/1024/0*eaCWefUEjUyvHvfH" /></figure><p>Once the company understood PPS, improving on it was comparatively easy. We simply add or replace metrics as our understanding of performance improves and the 0–100 score remains constant. PPS was designed to evolve. For example, in 2019 the Chrome team introduced <a href="https://web.dev/cls/">Cumulative Layout Shift</a>, which was a perfect candidate for Web PPS. It was a user-centric metric, had good browser coverage, and could be measured on direct and client-routed page loads. We instrumented the metric, validated the data, and then incorporated it into the next version of PPS. Easy!</p><h3>Weighted Average Score</h3><p>In addition to tracking individual pages’ PPS scores we track the entire organization’s overall performance progress by creating a Weighted Average Score (WAS). Consider these example PPS scores and traffic for three common pages:</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*eRUXs4sMKnOixViNn08zCA.png" /></figure><p><em>(73 * 5,000,000 + 84 * 20,000,000 + 75 * 10,000,000) / 35,000,000 = ~80</em></p><p>If these were the only pages at Airbnb our WAS would be ~80. Airbnb has hundreds of pages so a WAS helps us prioritize and proportionally weight the most high-traffic pages.</p><h3>Conclusion</h3><p>With PPS our engineers and data scientists now have a multitude of user-centric performance metrics to understand and improve their products. We can clearly compare the performance progress of different pages, different organizations, and even different platforms. PPS allows teams to set simple goals and determine which individual metrics to prioritize. PPS can evolve: metrics can be replaced, weights can change, targets can tighten, and yet the 0–100 score remains constant.</p><p>Changing our definition of “fast” has been well worth the effort. The company has evolved from viewing performance as a single metric to a 0–100 score that represents the rich, complex realities of performance. We have leveled up our performance measurement system and hope that you apply these learnings in your organization as well.</p><h3>Acknowledgments</h3><p>Thank you to the everyone who has helped build PPS over the years: <a href="https://www.linkedin.com/in/adityapunjani/">Aditya Punjani</a>, <a href="https://www.linkedin.com/in/alperkokmen/">Alper Kokmen</a>, <a href="https://www.linkedin.com/in/hdezninirola/">Antonio Niñirola</a>, <a href="https://www.linkedin.com/in/ben-weiher-123088122/">Ben Weiher</a>, <a href="https://www.linkedin.com/in/charlesx2013/">Charles Xue</a>, <a href="https://www.linkedin.com/in/egor-pakhomov-35179a3a/">Egor Pakhomov</a>, <a href="https://www.linkedin.com/in/eli-hart-54a4b975/">Eli Hart</a>, <a href="https://www.linkedin.com/in/elliotsachs/">Elliot Sachs</a>, <a href="https://www.linkedin.com/in/gabe-lyons-9a574543/">Gabe Lyons</a>, <a href="https://www.linkedin.com/in/guy-rittger-%E2%93%A5-1355b4/">Guy Rittger</a>, <a href="https://www.linkedin.com/in/jnvollmer/">Jean-Nicolas Vollmer</a>, <a href="https://www.linkedin.com/search/results/all/?keywords=joshua%20nelson%20%E2%9C%A8&amp;origin=RICH_QUERY_SUGGESTION&amp;position=0&amp;searchId=959d4aca-c80e-448a-b415-4a732ba7a84d&amp;sid=Rr6">Josh Nelson</a>, <a href="https://www.linkedin.com/in/joshpolsky/">Josh Polsky</a>, <a href="https://www.linkedin.com/in/lupinglin/">Luping Lin</a>, <a href="https://www.linkedin.com/in/markgiangreco/">Mark Giangreco</a>, <a href="https://www.linkedin.com/in/mattschreinerphd/">Matt Schreiner</a>, <a href="https://www.linkedin.com/in/nickbryanmiller/">Nick Miller</a>, <a href="https://www.linkedin.com/in/thenickreynolds/">Nick Reynolds</a>, <a href="https://www.linkedin.com/in/noahsmartin/">Noah Martin</a>, <a href="https://www.linkedin.com/in/xiaokangxin/">Xiaokang Xin</a>, and everyone else who helped along the way.</p><p><em>Interested in joining Airbnb? Check out these roles:</em></p><p><a href="https://grnh.se/feab9b481us"><em>Android Software Engineer, Guest Experience</em></a><em><br></em><a href="https://grnh.se/cbf480fa1us"><em>Senior iOS Software Engineer, Guest Experience</em></a><em><br></em><a href="https://grnh.se/23eb3d8b1us"><em>Senior Android Software Engineer, Guest Experience</em></a><em><br></em><a href="https://grnh.se/4092a3ba1us"><em>Staff iOS Software Engineer, Guest Experience</em></a><em><br></em><a href="https://grnh.se/a6f52fb91us"><em>Staff Android Software Engineer, Guest Experience</em></a><em><br></em><a href="https://grnh.se/0bcae9dd1us"><em>Senior Software Engineer, Guest Experience</em></a><em><br></em><a href="https://grnh.se/7d47f8ce1us"><em>Staff Fullstack Engineer, Guest Experience</em></a><em> <br></em><a href="https://grnh.se/e80a733a1us"><em>Senior Data Scientist — Analytics Engineering, Guest Experience</em></a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=5f664be0936" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/creating-airbnbs-page-performance-score-5f664be0936">Creating Airbnb’s Page Performance Score</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[My Journey to Airbnb — Elizabeth Ponce]]></title>
            <link>https://medium.com/airbnb-engineering/my-journey-to-airbnb-elizabeth-ponce-c7bb96299bfe?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/c7bb96299bfe</guid>
            <category><![CDATA[information-technology]]></category>
            <category><![CDATA[people]]></category>
            <category><![CDATA[infrastructure]]></category>
            <category><![CDATA[engineering]]></category>
            <category><![CDATA[security]]></category>
            <dc:creator><![CDATA[AirbnbEng]]></dc:creator>
            <pubDate>Thu, 04 Nov 2021 13:42:36 GMT</pubDate>
            <atom:updated>2021-11-04T15:14:56.813Z</atom:updated>
            <content:encoded><![CDATA[<h3>My Journey to Airbnb — Elizabeth Ponce</h3><p>Forging a path to a technical role at Airbnb</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*v2tZmxHXHBsRQvObyD53ow.jpeg" /></figure><p><a href="https://www.linkedin.com/in/emcponce/">Elizabeth Ponce</a></p><p><em>Many Airbnbers know Elizabeth for her role as a community builder and leader -Global Co-Lead for the Genders Marginalized in Tech (GemTech) resource group at Airbnb, and the host of amazing events like our company-wide Dog President Election. What people might not know is that Elizabeth has been on an incredible journey since joining Airbnb in 2017. She started as a customer support specialist, spent years developing a deep technical skillset, and is now a systems engineer on the BizTech team.</em></p><p><em>Elizabeth discovered software engineering relatively later in her career. Her first bachelor’s degree was in Conflict Resolution. When the Portland office offered an internal Intro to Web to Development class, Elizabeth signed up, thinking some basic knowledge about the internet would come in handy for her role. Instead, this class launched her on a path to getting a second bachelor’s degree in computer science (while continuing to work full-time at Airbnb!).</em></p><p><em>This is Elizabeth’s story, in her own words:</em></p><h3>Joining Airbnb as a customer support specialist</h3><p>Before Airbnb, I was a community organizer, leading and scaling youth development programs, and also a bike mechanic. I had a lot of great experience in the nonprofit world and in the teaching world, but I was ready for a new chapter. A friend sent me a job posting for a customer support role at Airbnb. I’d been an Airbnb Guest and Host in the past, so I recognized my personal and professional experience would be helpful to the community.</p><p>Right away, I was impressed with the experience the company was trying to craft for the interviewees and who they were trying to hire for. But I never could have imagined the journey that was in store for me at Airbnb.</p><h3>The Lunch and Learn class that changed everything</h3><p>In 2018, engineers at our Portland office hosted an eight-week Intro to Web Development class as a “Lunch and Learn” series. In the Customer Support org, you could use a certain number of hours per quarter for learning and development, so I applied to use those hours to take this class. I looked at it as kind of like a CPR class: Essential knowledge to have for my job, but hopefully I’d never have to use it.</p><p>I think maybe within the first hour of that class — setting up a Hello World, and learning the basics of HTTP — I was like, what? This is how the internet is put together? I don’t need any special qualifications, and I can just make a website?</p><p>That class unlocked new parts of my brain. It showed me that engineering isn’t something people are born knowing. Instead, it’s like running a marathon, or diagnosing a bike. There’s a skill set you can build on with a lot of practice, and beyond that skill set there are theories and techniques, processes and tools.</p><p>That started me on this learning journey. I did some Codeacademy lessons and activities, then I took a JavaScript Bootcamp on nights and weekends. But I still wanted more. It was like I’d been handed a toolkit, and now I wanted to learn about the plumbing. That set me on track to a second bachelor’s degree in Computer Science, which I refer to as my “7-to-11” job.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*KYGtgWXrGVxXnCOi5y7dLQ.jpeg" /></figure><h3>Making the transition to a technical role</h3><p>At Airbnb I focused on applying the computer science concepts I was learning. In Customer Support, that meant working closely with the engineering team on debugging issues. Then I moved over to the Trust team, which handles account security and content integrity. To do threat detection and analysis, I was writing queries in SQL, reviewing logs, and gaining technical analyst experience. I also got to work with the CSIRT team and our InfoSec group, which was really exciting and interesting.</p><p>Along the way I was constantly asking questions and knocking on doors. I heard things like, you need a degree, you need an internship, you need to do X, Y, and Z to get into a technical role. But I’ve seen that people want to work together on finding a solution when what you’re asking for is a great idea. And it’s a great idea for someone who worked in customer support, learning the 360 degree journey of our host and guests, to become an engineer and help solve our technical problems.</p><p>I never stopped exploring what was possible, and I ended up meeting engineering leaders who said, let’s make that happen. It’s been amazing to have the support of people at Airbnb who understand what I’m trying to do. And this summer I transitioned to engineering full-time.</p><h3>The first 90 days as an engineer</h3><p>I wake up in the morning and I turn off the alarm and I’m like: I’m an engineer! Every part of it is super stimulating. I own something that I’m building, and I get to have experts collaborate with me on it and give me feedback. It’s a creative development cycle that never ends, that keeps improving.</p><p>The role I have now is really unique — I’m rotating through all the subteams within corporate infrastructure, so I can get the full spectrum of the kind of technical challenges we face. My first project was unlike anything<em> </em>I’ve done in school: I was learning about Terraform and developing in a cloud computing environment using Golang; we apply configurations at scale and design with resource optimization and automation in mind. I’d also never had anybody look at my code and give me feedback. Anytime I receive feedback it’s a gift, I even have a Google Form on my profile specifically for people to provide anonymous (or not!) feedback. Code reviews are awesome! And it’s been amazing to work with an architect on the plan for my project and learn how our internal systems all fit together.</p><p>It’s better than I ever could have expected. It’s way surpassed any of my ideas of “What does an engineer do?” And the fact that I had a vastly different life experience and area of expertise really gives me a new lens that I can apply in combination with my technical skill set.</p><h3>GemTech</h3><p>When I started out on this journey I didn’t have any friends who were interested in computers. So I founded a Women in Engineering group at the Portland office, which eventually developed into a new group, GemTech, that is inclusive of all underrepresented genders in technical roles and their allies. It’s been so important for me to have this community to connect, ask questions, and share my experience.</p><p>For example, I remember I failed a midterm for my first computer science class, and I thought I was never going to make it as an engineer — until I talked to people and learned that this is a really normal experience. I want to share that you don’t have to be great at something to get started. And life still continues — you may need to take a break, or a term off, which is what I did to take care of my mom during the pandemic. But if you have the curiosity, inspiration and the willingness to do it, you can always keep growing.</p><p><em>Interested in working with Elizabeth at Airbnb? Check out these roles:</em></p><p><a href="https://grnh.se/d5c21f4e1us"><em>Senior Engineering Manager, BI Strategy &amp; Data Engineering</em></a></p><p><a href="https://grnh.se/36da4e251us"><em>Staff Data Engineer</em></a></p><p><a href="https://grnh.se/469a8e9b1us"><em>Senior Security Engineer</em></a></p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=c7bb96299bfe" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/my-journey-to-airbnb-elizabeth-ponce-c7bb96299bfe">My Journey to Airbnb — Elizabeth Ponce</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Meet Ottr: A Serverless Public Key Infrastructure Framework]]></title>
            <link>https://medium.com/airbnb-engineering/meet-ottr-a-serverless-public-key-infrastructure-framework-f6580010ae0c?source=rss----53c7c27702d5---4</link>
            <guid isPermaLink="false">https://medium.com/p/f6580010ae0c</guid>
            <category><![CDATA[open-source]]></category>
            <category><![CDATA[airbnb]]></category>
            <category><![CDATA[security]]></category>
            <category><![CDATA[public-key-infrastructure]]></category>
            <category><![CDATA[aws]]></category>
            <dc:creator><![CDATA[Kenneth Yang]]></dc:creator>
            <pubDate>Tue, 26 Oct 2021 18:09:19 GMT</pubDate>
            <atom:updated>2021-10-26T18:58:43.010Z</atom:updated>
            <content:encoded><![CDATA[<p><em>Ottr is a serverless Public Key Infrastructure framework that handles end-to-end certificate rotations without the use of an agent. The purpose of the blog is to provide an overview on Ottr with sample reference architecture, logical and network flows, and highlight the benefits of the solution. For installation instructions, skip to the Open Source section of the article.</em></p><p><a href="https://www.linkedin.com/in/kenneyan/">Kenneth Yang</a></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/900/1*6C4m508jFNo-FtFNIK1acw.png" /></figure><h3>Introduction</h3><p>Managing certificates for Public Key Infrastructure (PKI) is a difficult problem to solve at scale for any organization. While there are a number of <a href="https://letsencrypt.org/how-it-works/">agent-based solutions</a> to automate certificate rotations for Linux and Windows distributions, the process to broker certificates for network infrastructure commonly involves either manual intervention from engineering teams or use of enrollment protocols such as Certificate Management Protocol (CMP), Simple Certificate Enrollment Protocol (SCEP), or Enrollment over Secure Transport (EST), which all have their security issues.</p><p>We built Ottr at Airbnb to be a scalable and configurable serverless framework on AWS with little operational overhead or reliance on enrollment protocols. Ottr can be extended to handle end-to-end certificate rotations for any hosts (e.g., network infrastructure, Linux, Windows) capable of managing their own X.509 certificates from a remote session (e.g., API, SSH, SSM Agent).</p><h4>Background</h4><p>PKI governs the issuance of digital certificates to protect sensitive data, provide unique digital identities, and ensure secure end-to-end communication. Certificate Authorities (CA) are responsible for brokering these X.509 certificates and own the policies, practices, and procedures for vetting recipients and the issuing process. The CA used to generate the digital certificate can be from a Private CA, which your organization manages, or a Public CA, such as <a href="https://letsencrypt.org/">Let’s Encrypt</a>, which is managed by the <a href="https://www.abetterinternet.org/">Internet Security Research Group (ISRG)</a>.</p><p>At Airbnb, engineers are responsible for ensuring that end-to-end encryption is in place for compute nodes as well for firewalls, load balancers, and other network devices. The diagram below illustrates the typical process for certificate reissue.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*_wSqMv2Z_AWmThkHg0a5uQ.png" /></figure><p>As you can see, this is a heavily manual process requiring an approval step, which creates operational overhead for multiple teams. The details are broken down below:</p><ol><li><strong>Generate Private Key and Certificate Signing Request (CSR):</strong> A CSR is a cryptographically signed request that contains information around organization details as well as the Common Name (CN) and Subject Alternative Names (SANs) for which the certificate will be valid. A CSR is typically generated using OpenSSL, where a Private Key is created on the target device (and never leaves the host) and the associated Public Key is embedded within the CSR.</li><li><strong>Send CSR to Certificate Authority (CA):</strong> In order for a CSR to be signed by the CA, the domain must be validated. This can be done through a number of different ways (e.g., HTTP-01, DNS-01 Challenges). The CA can either be a Private CA for which your organization controls the trust chain, or a Public CA such as Let’s Encrypt whose <a href="https://letsencrypt.org/certificates/">chain of trust</a> is outside of your control.</li><li><strong>Approve CSR: </strong>Due to the sensitive nature of the certificate request process, an<strong> </strong>approval will typically be required from a security team to allow the CA to generate the certificate for the CSR that was submitted.</li><li><strong>Download Certificate:</strong> After approval, the certificate, intermediate certificate, root certificate, or full chain will be available from your CA and can be downloaded in a base64 format (e.g., .pem, .cer, .p7b).</li><li><strong>Upload Certificate: </strong>Depending on the platform, the full chain certificate will then be uploaded to the target device in a format that is supported (e.g., .pem) and restarted if applicable.</li></ol><h3>Why Ottr?</h3><p>When we were first designing Ottr, Airbnb needed a framework to manage X.509 certificates for hosts that could not run agents to manage their X.509 certificates; we needed a solution that would be customizable and scalable, while still emphasizing security. The diagram below illustrates how certificate reissue works with Ottr.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*21rKmxuIKBD3bSF0BUN1-g.png" /></figure><p>There are many advantages of this new framework:</p><ul><li><strong>Serverless:</strong> No underlying infrastructure to manage, which means we do not have to patch or harden new servers.</li><li><strong>Limited Dependencies:</strong> Only major dependency is upon the ACME Client (acme.sh), which is well-maintained.</li><li><strong>Customizable:</strong> Ottr is modular in design, meaning it provides developers the ability to build custom integrations when additional platforms are introduced to the infrastructure. Developers can use Certificate Authorities outside of Let’s Encrypt, so long as they support the ACME protocol.</li><li><strong>Scalable:</strong> Ability to perform thousands of certificate rotations per day (based off the rate-limit the CA sets).</li><li><strong>Security:</strong> Infrastructure security is a default; the Terraform modules that build Ottr have hardened configurations and follow the principle of least privilege.</li><li><strong>Automated:</strong> Ottr handles the end-to-end certificate rotation lifecycle without any manual intervention.</li><li><strong>Portability:</strong> Ottr builds 100+ resources through Terraform that are easily configurable through modules and deployable across any AWS environment.</li><li><strong>Cost:</strong> Ottr can be used with a Private or Public CA (e.g., Let’s Encrypt) running ACME at no additional cost.</li><li><strong>Error Handling:</strong> Provides instantaneous feedback through Slack on any potential errors during runtime.</li><li><strong>Open Source:</strong> Anyone can contribute, and new platform support can be introduced as the framework matures.</li></ul><h3>Getting Under the Hood</h3><p><em>In this section, we’ll dive into the different components that comprise Ottr and explain how they connect together to abstract the complexities of PKI from the end user.</em></p><h4>High Level Diagram</h4><p><em>Ottr Architecture</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*yUXlXD6mzsLGmMEgAGeIhQ.png" /></figure><p>Let’s take a look at the architecture of Ottr and how each component works in relation to the overall flow:</p><ul><li><strong>CloudWatch Event:<em> </em></strong>Automated entrypoint that triggers the Lambda Router at a configurable interval (e.g., once per day).</li><li><strong>Ottr API:</strong> Alternative entrypoint that can be used to execute one-off certificate rotations.</li><li><strong>Lambda Synchronizer:</strong> Aggregates host metadata from datacenters and/or AWS used to update the DynamoDB database via the Ottr API.</li><li><strong>Lambda Router:</strong> Scans the DynamoDB database and determines which hosts are eligible for certificate rotations and forwards data to Step Function.</li><li><strong>Step Function:</strong> Processes batch of device data in parallel from Router Lambda or API and executes an ECS Container for each host that is targeted for a certificate rotation.</li><li><strong>ECS Container:</strong> Pulls down platform specific image from Elastic Container Registry (ECR) based on the ECS Task Definition metadata element that is retrieved from the Step Function.</li><li><strong>Lambda Handler:</strong> In cases where a container runtime error occurs, there is an external integration with Slack that will provide device details and a link to entry within CloudWatch Logs.</li></ul><p><strong>Container Runtime:</strong></p><ul><li>Establish connection to device to generate a Public/Private Key Pair and CSR on the device; pull the CSR onto the container filesystem.</li><li>ACME Client binds the organization’s ACME credentials on the container and sends the CSR to the CA (e.g., Let’s Encrypt) to begin the certificate signing flow.</li><li>ACME Client writes DNS TXT Record(s) to the DNS Subdelegate Zone in Route53 for each Common Name (CN) and Subject Alternative Name (SAN) from the CSR.</li><li>CA validates domain ownership through a DNS-01 Challenge; when validated, a certificate is generated and the ACME Client writes the fullchain certificate to the container filesystem.</li><li>Depending on platform logic, the certificate is applied to the device and a number of validation checks are performed.</li><li>Upon success, the new certificate expiration date is updated for the device in the DynamoDB database.</li></ul><h4>Database</h4><p>The API is not only an alternative entrypoint for Ottr, but it is also the preferred endpoint for managing assets within the DynamoDB database. The elements within the database provide device details that are used both to determine when a certificate is expiring as well as the metadata used to map a host to a platform specific ECS Task Definition for runtime logic.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*n-dEsmMrkZBTg6YrK4JwQA.png" /></figure><p><em>Database Asset Output Example</em></p><pre>{<br>   &quot;system_name&quot;: &quot;test.example.com&quot;,<br>   &quot;common_name&quot;: &quot;test.example.com&quot;,<br>   &quot;certificate_authority&quot;: &quot;lets_encrypt&quot;,<br>   &quot;certificate_expiration&quot;: &quot;2021-01-01T00:00:00&quot;,<br>   &quot;certificate_validation&quot;: &quot;True&quot;,<br>   &quot;data_center&quot;: &quot;DC1&quot;,<br>   &quot;device_model&quot;: &quot;PA-XXXX&quot;,<br>   &quot;host_platform&quot;: &quot;panos&quot;,<br>   &quot;ip_address&quot;: &quot;10.0.0.1&quot;,<br>   &quot;origin&quot;: &quot;API&quot;,<br>   &quot;os_version&quot;: &quot;9.x.x&quot;,<br>   &quot;subject_alternative_name&quot;: [<br>   &quot;subdomain.example.com&quot;<br>   ]<br>}</pre><h4>Task Routing</h4><p>During the routing process, the database is first scanned to build a list of devices that have a certificate expiration within 30 days. That list is further narrowed down depending on if the host has valid Route53 Records within the DNS Subdelegate Zone. If these are both true, the logic moves to map each host to a corresponding ECS Task Definition based on the Routing Configuration that is set.</p><p>Following the routing configuration example below, if there is a PAN-OS device running 9.x.x with a model PA-XXXX and has the Certificate Authority set for Let’s Encrypt, an ECS Task of <em>otter-panos-9x-lets-encrypt</em> will be returned. By having this routing logic, it enables end users to perform different types of device rotation logic all under one platform.</p><p><em>Routing Configuration Example</em></p><pre>{<br> &quot;note&quot;: {<br>   &quot;description&quot;: &quot;Routes to trigger certificate renewal or generation based on Platform, OS Version, and Certificate Authority.&quot;<br> },<br> &quot;platform&quot;: {<br>   &quot;panos&quot;: {<br>     &quot;os&quot;: {<br>       &quot;9.x.x&quot;: {<br>         &quot;certificate_authority&quot;: {<br>           &quot;lets_encrypt&quot;: &quot;otter-panos-9x-lets-encrypt&quot; # ECS Task Definition<br>         },<br>         &quot;model&quot;: [<br>           &quot;PA-XXXX&quot;,<br>           &quot;PA-YYYY&quot;,<br>         ]<br>       },<br>   ...</pre><p><em>​​</em>After the router builds the mappings between hosts and task definitions from the routing configuration, the payload is sent into the Step Function and gets processed as a Map, which is used to run a set of steps for each element. The Step Function launches an ECS Fargate Container that pulls an ECR Image defined within the ECS Task Definition. The process is performed in parallel with a max concurrency of the number of Elastic Network Interfaces (ENI) available within the subnet. If there are more containers that are required to run than the available number of ENIs, the Step Function will queue jobs until the previous executions finish and network interfaces become available.</p><p>Looking at the Step Function input below, it shows that <em>test.example.com</em> has an ECS Task Definition of <em>otter-panos-9x-lets-encrypt </em>while <em>test.airbnb.com</em> has an ECS Task Definition of <em>otter-linux-aws-ssm-lets-encrypt. </em>Although both the platforms and the domains are different, Ottr can execute both these rotations in parallel independently of each other because a dedicated container is spun up for each host.</p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*HXAuO66-776Hr6h6fr0o7g.png" /></figure><h4>DNS Subdelegation</h4><p>One of the core security design decisions of the service was to limit access to Route53 (DNS). Ottr performs domain validation using a DNS-01 challenge, which means that the ACME Client needs to write a DNS TXT Record to _acme-challenge.[FQDN] in order for the Certificate Authority to validate ownership of the domain. The security concern is we do not want to provide access that allows write permissions across the organization’s primary hosted zone. While Ottr may only require the ability to write a TXT record to _acme-challenge.test.example.com, as of the time of this writing, AWS does not provide the granularity necessary to specify write access to TXT Records only, which would mean Ottr would be granted access to write any record types including A, CNAME, PTR, and MX Records to your organization’s domain(s).</p><p>To limit access, we introduced DNS subdelegation to the ACME Client. When the infrastructure for Ottr is built, there will be a new Route53 Hosted Zone that is created depending on the configuration such as <em>example-acme.com</em>. When the ACME Client sends the Certificate Signing Request (CSR) to the Certificate Authority (CA), the CA will subsequently look for the TXT record within the challenge-alias field, which will be <em>example-acme.com</em>.</p><p>What this means is that before the domain validation process occurs, DNS needs to be configured to set up a CNAME mapping between your host <em>test.example.com</em> to forward records to <em>example-acme.com</em>.</p><p><em>Terraform DNS Module</em></p><pre>module &quot;dns_example&quot; {<br> source = &quot;./modules/dns&quot;</pre><pre>certificate_common_name = &quot;test.example.com&quot;<br> subject_alternative_names = [&quot;subdomain.example.com&quot;,  &quot;dev.example.com&quot;]<br>}</pre><p><em>DNS CNAME Record Mapping</em></p><pre>_acme-challenge.test.example.com <br>  =&gt;   _acme-challenge.test.example-acme.com<br><br>_acme-challenge.subdomain.example.com <br>  =&gt;   _acme-challenge.test.example-acme.com</pre><pre>_acme-challenge.dev.example.com <br>  =&gt;   _acme-challenge.test.example-acme.com</pre><p>By adding this mapping, all TXT records are written and read within <em>example-acme.com</em>. As a result the permissions within Ottr can be limited to read only for domains such as <em>example.com</em> and write permissions would be granted to the subdelegate zone <em>example-acme.com</em>.</p><h4>External Integrations</h4><p>By default, Ottr includes an external integration with Slack for error handling. After each ECS Task is completed, a new certificate expiration is added to the database pending a successful run. If an error occurs in the container runtime, it results in a notification being generated in Slack to provide operational teams instantaneous feedback and a link that directly points you to the CloudWatch Logs of the failed task. While Slack is the default integration, custom logic can be written if your organization prefers to use other platforms or triaging methods for error handling.</p><h4>Network Architecture</h4><p><em>Ottr Network Data Flow</em></p><figure><img alt="" src="https://cdn-images-1.medium.com/max/1024/1*XMgiF7zl2A_2UWm5Z65Hsw.png" /></figure><p>Let’s take a look at network connectivity for routes outside of the AWS infrastructure. After the Step Function determines valid hosts to perform certificate rotations on, it will execute a container for each device in parallel. These containers are launched depending on ENI availability in one of two subnets that is predefined when building the infrastructure with Terraform. After connecting to the device and retrieving the CSR, the ACME Client sends the CSR to the Certificate Authority. By default this is Let’s Encrypt, but Ottr has the capability of integrating with any CA that supports the ACME Protocol.</p><p>During the signing process, the ACME Client requires routes to both the Certificate Authority as well as Cloudflare DNS endpoints. Since Let’s Encrypt is the default CA, access to the production endpoint <a href="https://acme-v02.api.letsencrypt.org"><em>acme-v02.api.letsencrypt.org</em></a> as well as the staging endpoint <a href="https://acme-staging-v02.api.letsencrypt.org"><em>acme-staging-v02.api.letsencrypt.org</em></a> are required over 443 (SSL). Cloudflare DNS <a href="https://cloudflare-dns.com"><em>cloudflare-dns.com</em></a> is also used to poll DNS status using DNS over HTTPS (DoH) to determine when the DNS TXT record used for domain validation has been posted by the ACME Client. By using DoH, the DNS resolver runs queries over TLS which improves security since DNS queries are encrypted and not run via DNS over UDP. Performance is also improved since the ACME Client polls DNS compared to using sleep to wait for a set time before querying DNS to validate the domain.</p><h3>Results and ROI</h3><p>From deploying Ottr within Airbnb, our organization has realized several benefits. We’ve seen returns on investment due both to time saved and to the reduced operational overhead for engineering teams. Since the introduction of Ottr at the beginning of the year, thousands of certificate rotations have been performed without any human intervention. This has alleviated a pain point for multiple teams including Operations, which was responsible for monitoring and triaging tickets for expired certificates, Engineering which was responsible for the manual certificate rotation process, and Security which was involved in request approvals.</p><p>Another important return was related to improvements in security. By having Ottr act as a broker between the CA and host, engineers would no longer need to make changes to DNS records to validate domain ownership. This resulted in the reduction of AWS IAM permissions across a number of teams, improving least privilege. In addition, Ottr provides a repeatable framework in which the private key never leaves the host during its lifespan, rather than having engineers generate a private key locally and upload it to the host.</p><p>Most importantly, certificate rotations are being run in more frequent intervals instead of certificate renewals, which means the private key is switched out for each execution; this results in shorter certificate lifespans, which in the case of private key compromise lessens the timeframe data can be decrypted.</p><h3>Conclusion</h3><p>Although Public Key Infrastructure can be a complex problem to solve at scale, Ottr was built to abstract a number of challenges associated with certificate provisioning while also providing additional benefits around operations and security.</p><p>By open sourcing Ottr, we hope to create a community to share, collaborate, and expand the framework to help fit the needs of other organizations. If you’re interested in helping protect people and data, Airbnb Security is hiring. Check out our <a href="https://www.airbnb.com/careers/departments/engineering">open positions</a> and apply today!</p><h3>Open Source</h3><p><strong>Setup<br></strong>Ottr is now open sourced on <a href="https://github.com/airbnb/ottr">Github</a>. You can begin building the infrastructure by going to the Setup resource page and learn more about our current implementations through the Supported Platforms link.</p><p><strong>Contributing<br></strong>Please feel free to reach out or submit pull requests with any suggestions. If you are currently leveraging Ottr and running rotations against platforms that currently aren’t supported, please view the <a href="https://github.com/airbnb/ottr/tree/master/docs/CONTRIBUTE.md">contributions page</a> and consider helping add your implementations to the platform!</p><p><strong>Credits and Contributions:<br></strong>Ben Paradis (Staff Security Engineer, Airbnb)<br>Aaron von Hungen (Senior Security Program Manager)<br>John Borromeo (Senior Network Engineer, Airbnb)<br>Ryan Diers (Security Engineer, Airbnb)<br>Sean Corcran (Senior Systems Engineer, Airbnb)<br>Jeff Nanney (Staff Network Architect, Airbnb)<br>Mark Vlcek (Security Engineer, Airbnb)<br>Zeeshan Khadim (Former Manager, Airbnb)<br>Tina Nguyen (Senior Project Manager, Airbnb)</p><p>Development Community Supporting acme.sh</p><p><em>All product names, logos, and brands are property of their respective owners. All company, product and service names used in this website are for identification purposes only. Use of these names, logos, and brands does not imply endorsement.</em></p><h3>Appendix</h3><p>All trademarks are the property of their registered owners; Airbnb claims no responsibility for nor proprietary interest in them.</p><img src="https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=f6580010ae0c" width="1" height="1" alt=""><hr><p><a href="https://medium.com/airbnb-engineering/meet-ottr-a-serverless-public-key-infrastructure-framework-f6580010ae0c">Meet Ottr: A Serverless Public Key Infrastructure Framework</a> was originally published in <a href="https://medium.com/airbnb-engineering">The Airbnb Tech Blog</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>]]></content:encoded>
        </item>
    </channel>
</rss>